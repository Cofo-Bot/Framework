/**
 * Generated by "@vuepress/internal-site-data"
 */
export const siteData = {
  "title": "Cofo Framework",
  "description": "",
  "base": "/",
  "headTags": [],
  "pages": [
    {
      "title": "CofoClient",
      "frontmatter": {},
      "regularPath": "/api/classes/CofoClient.html",
      "relativePath": "api/classes/CofoClient.md",
      "key": "v-0cde5d5a",
      "path": "/api/classes/CofoClient.html",
      "headers": [
        {
          "level": 2,
          "title": "Hierarchy",
          "slug": "hierarchy",
          "normalizedTitle": "hierarchy",
          "charIndex": 65
        },
        {
          "level": 2,
          "title": "Table of contents",
          "slug": "table-of-contents",
          "normalizedTitle": "table of contents",
          "charIndex": 110
        },
        {
          "level": 3,
          "title": "Constructors",
          "slug": "constructors",
          "normalizedTitle": "constructors",
          "charIndex": 132
        },
        {
          "level": 3,
          "title": "Properties",
          "slug": "properties",
          "normalizedTitle": "properties",
          "charIndex": 165
        },
        {
          "level": 3,
          "title": "Methods",
          "slug": "methods",
          "normalizedTitle": "methods",
          "charIndex": 794
        },
        {
          "level": 2,
          "title": "Constructors",
          "slug": "constructors-2",
          "normalizedTitle": "constructors",
          "charIndex": 132
        },
        {
          "level": 3,
          "title": "constructor",
          "slug": "constructor",
          "normalizedTitle": "constructor",
          "charIndex": 149
        },
        {
          "level": 2,
          "title": "Properties",
          "slug": "properties-2",
          "normalizedTitle": "properties",
          "charIndex": 165
        },
        {
          "level": 3,
          "title": "application",
          "slug": "application",
          "normalizedTitle": "application",
          "charIndex": 180
        },
        {
          "level": 3,
          "title": "baseDirectory",
          "slug": "basedirectory",
          "normalizedTitle": "basedirectory",
          "charIndex": 195
        },
        {
          "level": 3,
          "title": "bot",
          "slug": "bot",
          "normalizedTitle": "bot",
          "charIndex": 212
        },
        {
          "level": 3,
          "title": "channelGuildMap",
          "slug": "channelguildmap",
          "normalizedTitle": "channelguildmap",
          "charIndex": 219
        },
        {
          "level": 3,
          "title": "defaultPrefix",
          "slug": "defaultprefix",
          "normalizedTitle": "defaultprefix",
          "charIndex": 238
        },
        {
          "level": 3,
          "title": "gatewayURL",
          "slug": "gatewayurl",
          "normalizedTitle": "gatewayurl",
          "charIndex": 255
        },
        {
          "level": 3,
          "title": "groupChannels",
          "slug": "groupchannels",
          "normalizedTitle": "groupchannels",
          "charIndex": 269
        },
        {
          "level": 3,
          "title": "guildShardMap",
          "slug": "guildshardmap",
          "normalizedTitle": "guildshardmap",
          "charIndex": 286
        },
        {
          "level": 3,
          "title": "guilds",
          "slug": "guilds",
          "normalizedTitle": "guilds",
          "charIndex": 303
        },
        {
          "level": 3,
          "title": "handler",
          "slug": "handler",
          "normalizedTitle": "handler",
          "charIndex": 313
        },
        {
          "level": 3,
          "title": "ignoreBots",
          "slug": "ignorebots",
          "normalizedTitle": "ignorebots",
          "charIndex": 324
        },
        {
          "level": 3,
          "title": "lastConnect",
          "slug": "lastconnect",
          "normalizedTitle": "lastconnect",
          "charIndex": 338
        },
        {
          "level": 3,
          "title": "lastReconnectDelay",
          "slug": "lastreconnectdelay",
          "normalizedTitle": "lastreconnectdelay",
          "charIndex": 353
        },
        {
          "level": 3,
          "title": "logger",
          "slug": "logger",
          "normalizedTitle": "logger",
          "charIndex": 375
        },
        {
          "level": 3,
          "title": "mentionPrefix",
          "slug": "mentionprefix",
          "normalizedTitle": "mentionprefix",
          "charIndex": 385
        },
        {
          "level": 3,
          "title": "notes",
          "slug": "notes",
          "normalizedTitle": "notes",
          "charIndex": 402
        },
        {
          "level": 3,
          "title": "options",
          "slug": "options",
          "normalizedTitle": "options",
          "charIndex": 411
        },
        {
          "level": 3,
          "title": "owners",
          "slug": "owners",
          "normalizedTitle": "owners",
          "charIndex": 422
        },
        {
          "level": 3,
          "title": "presence",
          "slug": "presence",
          "normalizedTitle": "presence",
          "charIndex": 432
        },
        {
          "level": 3,
          "title": "privateChannelMap",
          "slug": "privatechannelmap",
          "normalizedTitle": "privatechannelmap",
          "charIndex": 444
        },
        {
          "level": 3,
          "title": "privateChannels",
          "slug": "privatechannels",
          "normalizedTitle": "privatechannels",
          "charIndex": 465
        },
        {
          "level": 3,
          "title": "ready",
          "slug": "ready",
          "normalizedTitle": "ready",
          "charIndex": 484
        },
        {
          "level": 3,
          "title": "reconnectAttempts",
          "slug": "reconnectattempts",
          "normalizedTitle": "reconnectattempts",
          "charIndex": 493
        },
        {
          "level": 3,
          "title": "relationships",
          "slug": "relationships",
          "normalizedTitle": "relationships",
          "charIndex": 514
        },
        {
          "level": 3,
          "title": "requestHandler",
          "slug": "requesthandler",
          "normalizedTitle": "requesthandler",
          "charIndex": 531
        },
        {
          "level": 3,
          "title": "shards",
          "slug": "shards",
          "normalizedTitle": "shards",
          "charIndex": 549
        },
        {
          "level": 3,
          "title": "startTime",
          "slug": "starttime",
          "normalizedTitle": "starttime",
          "charIndex": 559
        },
        {
          "level": 3,
          "title": "testMode",
          "slug": "testmode",
          "normalizedTitle": "testmode",
          "charIndex": 572
        },
        {
          "level": 3,
          "title": "threadGuildMap",
          "slug": "threadguildmap",
          "normalizedTitle": "threadguildmap",
          "charIndex": 584
        },
        {
          "level": 3,
          "title": "unavailableGuilds",
          "slug": "unavailableguilds",
          "normalizedTitle": "unavailableguilds",
          "charIndex": 602
        },
        {
          "level": 3,
          "title": "uptime",
          "slug": "uptime",
          "normalizedTitle": "uptime",
          "charIndex": 623
        },
        {
          "level": 3,
          "title": "user",
          "slug": "user",
          "normalizedTitle": "user",
          "charIndex": 633
        },
        {
          "level": 3,
          "title": "userGuildSettings",
          "slug": "userguildsettings",
          "normalizedTitle": "userguildsettings",
          "charIndex": 641
        },
        {
          "level": 3,
          "title": "userSettings",
          "slug": "usersettings",
          "normalizedTitle": "usersettings",
          "charIndex": 662
        },
        {
          "level": 3,
          "title": "users",
          "slug": "users",
          "normalizedTitle": "users",
          "charIndex": 678
        },
        {
          "level": 3,
          "title": "voiceConnections",
          "slug": "voiceconnections",
          "normalizedTitle": "voiceconnections",
          "charIndex": 687
        },
        {
          "level": 3,
          "title": "captureRejectionSymbol",
          "slug": "capturerejectionsymbol",
          "normalizedTitle": "capturerejectionsymbol",
          "charIndex": 707
        },
        {
          "level": 3,
          "title": "captureRejections",
          "slug": "capturerejections",
          "normalizedTitle": "capturerejections",
          "charIndex": 733
        },
        {
          "level": 3,
          "title": "defaultMaxListeners",
          "slug": "defaultmaxlisteners",
          "normalizedTitle": "defaultmaxlisteners",
          "charIndex": 754
        },
        {
          "level": 3,
          "title": "errorMonitor",
          "slug": "errormonitor",
          "normalizedTitle": "errormonitor",
          "charIndex": 777
        },
        {
          "level": 2,
          "title": "Methods",
          "slug": "methods-2",
          "normalizedTitle": "methods",
          "charIndex": 794
        },
        {
          "level": 3,
          "title": "acceptInvite",
          "slug": "acceptinvite",
          "normalizedTitle": "acceptinvite",
          "charIndex": 806
        },
        {
          "level": 3,
          "title": "addGroupRecipient",
          "slug": "addgrouprecipient",
          "normalizedTitle": "addgrouprecipient",
          "charIndex": 822
        },
        {
          "level": 3,
          "title": "addGuildDiscoverySubcategory",
          "slug": "addguilddiscoverysubcategory",
          "normalizedTitle": "addguilddiscoverysubcategory",
          "charIndex": 843
        },
        {
          "level": 3,
          "title": "addGuildMemberRole",
          "slug": "addguildmemberrole",
          "normalizedTitle": "addguildmemberrole",
          "charIndex": 875
        },
        {
          "level": 3,
          "title": "addListener",
          "slug": "addlistener",
          "normalizedTitle": "addlistener",
          "charIndex": 897
        },
        {
          "level": 3,
          "title": "addMessageReaction",
          "slug": "addmessagereaction",
          "normalizedTitle": "addmessagereaction",
          "charIndex": 912
        },
        {
          "level": 3,
          "title": "addRelationship",
          "slug": "addrelationship",
          "normalizedTitle": "addrelationship",
          "charIndex": 934
        },
        {
          "level": 3,
          "title": "addSelfPremiumSubscription",
          "slug": "addselfpremiumsubscription",
          "normalizedTitle": "addselfpremiumsubscription",
          "charIndex": 953
        },
        {
          "level": 3,
          "title": "banGuildMember",
          "slug": "banguildmember",
          "normalizedTitle": "banguildmember",
          "charIndex": 983
        },
        {
          "level": 3,
          "title": "bulkEditCommandPermissions",
          "slug": "bulkeditcommandpermissions",
          "normalizedTitle": "bulkeditcommandpermissions",
          "charIndex": 1001
        },
        {
          "level": 3,
          "title": "bulkEditCommands",
          "slug": "bulkeditcommands",
          "normalizedTitle": "bulkeditcommands",
          "charIndex": 1031
        },
        {
          "level": 3,
          "title": "bulkEditGuildCommands",
          "slug": "bulkeditguildcommands",
          "normalizedTitle": "bulkeditguildcommands",
          "charIndex": 1051
        },
        {
          "level": 3,
          "title": "closeVoiceConnection",
          "slug": "closevoiceconnection",
          "normalizedTitle": "closevoiceconnection",
          "charIndex": 1076
        },
        {
          "level": 3,
          "title": "connect",
          "slug": "connect",
          "normalizedTitle": "connect",
          "charIndex": 359
        },
        {
          "level": 3,
          "title": "createChannel",
          "slug": "createchannel",
          "normalizedTitle": "createchannel",
          "charIndex": 1111
        },
        {
          "level": 3,
          "title": "createChannelInvite",
          "slug": "createchannelinvite",
          "normalizedTitle": "createchannelinvite",
          "charIndex": 1128
        },
        {
          "level": 3,
          "title": "createChannelWebhook",
          "slug": "createchannelwebhook",
          "normalizedTitle": "createchannelwebhook",
          "charIndex": 1151
        },
        {
          "level": 3,
          "title": "createCommand",
          "slug": "createcommand",
          "normalizedTitle": "createcommand",
          "charIndex": 1175
        },
        {
          "level": 3,
          "title": "createGroupChannel",
          "slug": "creategroupchannel",
          "normalizedTitle": "creategroupchannel",
          "charIndex": 1192
        },
        {
          "level": 3,
          "title": "createGuild",
          "slug": "createguild",
          "normalizedTitle": "createguild",
          "charIndex": 1214
        },
        {
          "level": 3,
          "title": "createGuildCommand",
          "slug": "createguildcommand",
          "normalizedTitle": "createguildcommand",
          "charIndex": 1229
        },
        {
          "level": 3,
          "title": "createGuildEmoji",
          "slug": "createguildemoji",
          "normalizedTitle": "createguildemoji",
          "charIndex": 1251
        },
        {
          "level": 3,
          "title": "createGuildFromTemplate",
          "slug": "createguildfromtemplate",
          "normalizedTitle": "createguildfromtemplate",
          "charIndex": 1271
        },
        {
          "level": 3,
          "title": "createGuildSticker",
          "slug": "createguildsticker",
          "normalizedTitle": "createguildsticker",
          "charIndex": 1298
        },
        {
          "level": 3,
          "title": "createGuildTemplate",
          "slug": "createguildtemplate",
          "normalizedTitle": "createguildtemplate",
          "charIndex": 1320
        },
        {
          "level": 3,
          "title": "createInteractionResponse",
          "slug": "createinteractionresponse",
          "normalizedTitle": "createinteractionresponse",
          "charIndex": 1343
        },
        {
          "level": 3,
          "title": "createMessage",
          "slug": "createmessage",
          "normalizedTitle": "createmessage",
          "charIndex": 1372
        },
        {
          "level": 3,
          "title": "createRole",
          "slug": "createrole",
          "normalizedTitle": "createrole",
          "charIndex": 1389
        },
        {
          "level": 3,
          "title": "createStageInstance",
          "slug": "createstageinstance",
          "normalizedTitle": "createstageinstance",
          "charIndex": 1403
        },
        {
          "level": 3,
          "title": "createThreadWithMessage",
          "slug": "createthreadwithmessage",
          "normalizedTitle": "createthreadwithmessage",
          "charIndex": 1426
        },
        {
          "level": 3,
          "title": "createThreadWithoutMessage",
          "slug": "createthreadwithoutmessage",
          "normalizedTitle": "createthreadwithoutmessage",
          "charIndex": 1453
        },
        {
          "level": 3,
          "title": "crosspostMessage",
          "slug": "crosspostmessage",
          "normalizedTitle": "crosspostmessage",
          "charIndex": 1483
        },
        {
          "level": 3,
          "title": "deleteChannel",
          "slug": "deletechannel",
          "normalizedTitle": "deletechannel",
          "charIndex": 1503
        },
        {
          "level": 3,
          "title": "deleteChannelPermission",
          "slug": "deletechannelpermission",
          "normalizedTitle": "deletechannelpermission",
          "charIndex": 1520
        },
        {
          "level": 3,
          "title": "deleteCommand",
          "slug": "deletecommand",
          "normalizedTitle": "deletecommand",
          "charIndex": 1547
        },
        {
          "level": 3,
          "title": "deleteGuild",
          "slug": "deleteguild",
          "normalizedTitle": "deleteguild",
          "charIndex": 1564
        },
        {
          "level": 3,
          "title": "deleteGuildCommand",
          "slug": "deleteguildcommand",
          "normalizedTitle": "deleteguildcommand",
          "charIndex": 1579
        },
        {
          "level": 3,
          "title": "deleteGuildDiscoverySubcategory",
          "slug": "deleteguilddiscoverysubcategory",
          "normalizedTitle": "deleteguilddiscoverysubcategory",
          "charIndex": 1601
        },
        {
          "level": 3,
          "title": "deleteGuildEmoji",
          "slug": "deleteguildemoji",
          "normalizedTitle": "deleteguildemoji",
          "charIndex": 1636
        },
        {
          "level": 3,
          "title": "deleteGuildIntegration",
          "slug": "deleteguildintegration",
          "normalizedTitle": "deleteguildintegration",
          "charIndex": 1656
        },
        {
          "level": 3,
          "title": "deleteGuildSticker",
          "slug": "deleteguildsticker",
          "normalizedTitle": "deleteguildsticker",
          "charIndex": 1682
        },
        {
          "level": 3,
          "title": "deleteGuildTemplate",
          "slug": "deleteguildtemplate",
          "normalizedTitle": "deleteguildtemplate",
          "charIndex": 1704
        },
        {
          "level": 3,
          "title": "deleteInvite",
          "slug": "deleteinvite",
          "normalizedTitle": "deleteinvite",
          "charIndex": 1727
        },
        {
          "level": 3,
          "title": "deleteMessage",
          "slug": "deletemessage",
          "normalizedTitle": "deletemessage",
          "charIndex": 1743
        },
        {
          "level": 3,
          "title": "deleteMessages",
          "slug": "deletemessages",
          "normalizedTitle": "deletemessages",
          "charIndex": 1760
        },
        {
          "level": 3,
          "title": "deleteRole",
          "slug": "deleterole",
          "normalizedTitle": "deleterole",
          "charIndex": 1778
        },
        {
          "level": 3,
          "title": "deleteSelfConnection",
          "slug": "deleteselfconnection",
          "normalizedTitle": "deleteselfconnection",
          "charIndex": 1792
        },
        {
          "level": 3,
          "title": "deleteSelfPremiumSubscription",
          "slug": "deleteselfpremiumsubscription",
          "normalizedTitle": "deleteselfpremiumsubscription",
          "charIndex": 1816
        },
        {
          "level": 3,
          "title": "deleteStageInstance",
          "slug": "deletestageinstance",
          "normalizedTitle": "deletestageinstance",
          "charIndex": 1849
        },
        {
          "level": 3,
          "title": "deleteUserNote",
          "slug": "deleteusernote",
          "normalizedTitle": "deleteusernote",
          "charIndex": 1872
        },
        {
          "level": 3,
          "title": "deleteWebhook",
          "slug": "deletewebhook",
          "normalizedTitle": "deletewebhook",
          "charIndex": 1890
        },
        {
          "level": 3,
          "title": "deleteWebhookMessage",
          "slug": "deletewebhookmessage",
          "normalizedTitle": "deletewebhookmessage",
          "charIndex": 1907
        },
        {
          "level": 3,
          "title": "disableSelfMFATOTP",
          "slug": "disableselfmfatotp",
          "normalizedTitle": "disableselfmfatotp",
          "charIndex": 1931
        },
        {
          "level": 3,
          "title": "disconnect",
          "slug": "disconnect",
          "normalizedTitle": "disconnect",
          "charIndex": 1953
        },
        {
          "level": 3,
          "title": "editAFK",
          "slug": "editafk",
          "normalizedTitle": "editafk",
          "charIndex": 1967
        },
        {
          "level": 3,
          "title": "editChannel",
          "slug": "editchannel",
          "normalizedTitle": "editchannel",
          "charIndex": 1978
        },
        {
          "level": 3,
          "title": "editChannelPermission",
          "slug": "editchannelpermission",
          "normalizedTitle": "editchannelpermission",
          "charIndex": 1993
        },
        {
          "level": 3,
          "title": "editChannelPosition",
          "slug": "editchannelposition",
          "normalizedTitle": "editchannelposition",
          "charIndex": 2018
        },
        {
          "level": 3,
          "title": "editCommand",
          "slug": "editcommand",
          "normalizedTitle": "editcommand",
          "charIndex": 2041
        },
        {
          "level": 3,
          "title": "editCommandPermissions",
          "slug": "editcommandpermissions",
          "normalizedTitle": "editcommandpermissions",
          "charIndex": 2056
        },
        {
          "level": 3,
          "title": "editGuild",
          "slug": "editguild",
          "normalizedTitle": "editguild",
          "charIndex": 2082
        },
        {
          "level": 3,
          "title": "editGuildCommand",
          "slug": "editguildcommand",
          "normalizedTitle": "editguildcommand",
          "charIndex": 2095
        },
        {
          "level": 3,
          "title": "editGuildDiscovery",
          "slug": "editguilddiscovery",
          "normalizedTitle": "editguilddiscovery",
          "charIndex": 2115
        },
        {
          "level": 3,
          "title": "editGuildEmoji",
          "slug": "editguildemoji",
          "normalizedTitle": "editguildemoji",
          "charIndex": 2137
        },
        {
          "level": 3,
          "title": "editGuildIntegration",
          "slug": "editguildintegration",
          "normalizedTitle": "editguildintegration",
          "charIndex": 2155
        },
        {
          "level": 3,
          "title": "editGuildMember",
          "slug": "editguildmember",
          "normalizedTitle": "editguildmember",
          "charIndex": 2179
        },
        {
          "level": 3,
          "title": "editGuildSticker",
          "slug": "editguildsticker",
          "normalizedTitle": "editguildsticker",
          "charIndex": 2198
        },
        {
          "level": 3,
          "title": "editGuildTemplate",
          "slug": "editguildtemplate",
          "normalizedTitle": "editguildtemplate",
          "charIndex": 2218
        },
        {
          "level": 3,
          "title": "editGuildVanity",
          "slug": "editguildvanity",
          "normalizedTitle": "editguildvanity",
          "charIndex": 2239
        },
        {
          "level": 3,
          "title": "editGuildVoiceState",
          "slug": "editguildvoicestate",
          "normalizedTitle": "editguildvoicestate",
          "charIndex": 2258
        },
        {
          "level": 3,
          "title": "editGuildWelcomeScreen",
          "slug": "editguildwelcomescreen",
          "normalizedTitle": "editguildwelcomescreen",
          "charIndex": 2281
        },
        {
          "level": 3,
          "title": "editGuildWidget",
          "slug": "editguildwidget",
          "normalizedTitle": "editguildwidget",
          "charIndex": 2307
        },
        {
          "level": 3,
          "title": "editMessage",
          "slug": "editmessage",
          "normalizedTitle": "editmessage",
          "charIndex": 2326
        },
        {
          "level": 3,
          "title": "editNickname",
          "slug": "editnickname",
          "normalizedTitle": "editnickname",
          "charIndex": 2341
        },
        {
          "level": 3,
          "title": "editRole",
          "slug": "editrole",
          "normalizedTitle": "editrole",
          "charIndex": 2357
        },
        {
          "level": 3,
          "title": "editRolePosition",
          "slug": "editroleposition",
          "normalizedTitle": "editroleposition",
          "charIndex": 2369
        },
        {
          "level": 3,
          "title": "editSelf",
          "slug": "editself",
          "normalizedTitle": "editself",
          "charIndex": 2389
        },
        {
          "level": 3,
          "title": "editSelfConnection",
          "slug": "editselfconnection",
          "normalizedTitle": "editselfconnection",
          "charIndex": 2401
        },
        {
          "level": 3,
          "title": "editSelfSettings",
          "slug": "editselfsettings",
          "normalizedTitle": "editselfsettings",
          "charIndex": 2423
        },
        {
          "level": 3,
          "title": "editStageInstance",
          "slug": "editstageinstance",
          "normalizedTitle": "editstageinstance",
          "charIndex": 2443
        },
        {
          "level": 3,
          "title": "editStatus",
          "slug": "editstatus",
          "normalizedTitle": "editstatus",
          "charIndex": 2464
        },
        {
          "level": 3,
          "title": "editUserNote",
          "slug": "editusernote",
          "normalizedTitle": "editusernote",
          "charIndex": 2478
        },
        {
          "level": 3,
          "title": "editWebhook",
          "slug": "editwebhook",
          "normalizedTitle": "editwebhook",
          "charIndex": 2494
        },
        {
          "level": 3,
          "title": "editWebhookMessage",
          "slug": "editwebhookmessage",
          "normalizedTitle": "editwebhookmessage",
          "charIndex": 2509
        },
        {
          "level": 3,
          "title": "emit",
          "slug": "emit",
          "normalizedTitle": "emit",
          "charIndex": 2531
        },
        {
          "level": 3,
          "title": "enableSelfMFATOTP",
          "slug": "enableselfmfatotp",
          "normalizedTitle": "enableselfmfatotp",
          "charIndex": 2539
        },
        {
          "level": 3,
          "title": "eventNames",
          "slug": "eventnames",
          "normalizedTitle": "eventnames",
          "charIndex": 2560
        },
        {
          "level": 3,
          "title": "executeSlackWebhook",
          "slug": "executeslackwebhook",
          "normalizedTitle": "executeslackwebhook",
          "charIndex": 2574
        },
        {
          "level": 3,
          "title": "executeWebhook",
          "slug": "executewebhook",
          "normalizedTitle": "executewebhook",
          "charIndex": 2597
        },
        {
          "level": 3,
          "title": "fetchPrefix",
          "slug": "fetchprefix",
          "normalizedTitle": "fetchprefix",
          "charIndex": 2615
        },
        {
          "level": 3,
          "title": "followChannel",
          "slug": "followchannel",
          "normalizedTitle": "followchannel",
          "charIndex": 2630
        },
        {
          "level": 3,
          "title": "getActiveGuildThreads",
          "slug": "getactiveguildthreads",
          "normalizedTitle": "getactiveguildthreads",
          "charIndex": 2647
        },
        {
          "level": 3,
          "title": "getActiveThreads",
          "slug": "getactivethreads",
          "normalizedTitle": "getactivethreads",
          "charIndex": 2672
        },
        {
          "level": 3,
          "title": "getArchivedThreads",
          "slug": "getarchivedthreads",
          "normalizedTitle": "getarchivedthreads",
          "charIndex": 2692
        },
        {
          "level": 3,
          "title": "getBotGateway",
          "slug": "getbotgateway",
          "normalizedTitle": "getbotgateway",
          "charIndex": 2714
        },
        {
          "level": 3,
          "title": "getChannel",
          "slug": "getchannel",
          "normalizedTitle": "getchannel",
          "charIndex": 2731
        },
        {
          "level": 3,
          "title": "getChannelInvites",
          "slug": "getchannelinvites",
          "normalizedTitle": "getchannelinvites",
          "charIndex": 2745
        },
        {
          "level": 3,
          "title": "getChannelWebhooks",
          "slug": "getchannelwebhooks",
          "normalizedTitle": "getchannelwebhooks",
          "charIndex": 2766
        },
        {
          "level": 3,
          "title": "getCommand",
          "slug": "getcommand",
          "normalizedTitle": "getcommand",
          "charIndex": 2788
        },
        {
          "level": 3,
          "title": "getCommandPermissions",
          "slug": "getcommandpermissions",
          "normalizedTitle": "getcommandpermissions",
          "charIndex": 2802
        },
        {
          "level": 3,
          "title": "getCommands",
          "slug": "getcommands",
          "normalizedTitle": "getcommands",
          "charIndex": 2827
        },
        {
          "level": 3,
          "title": "getDMChannel",
          "slug": "getdmchannel",
          "normalizedTitle": "getdmchannel",
          "charIndex": 2842
        },
        {
          "level": 3,
          "title": "getDiscoveryCategories",
          "slug": "getdiscoverycategories",
          "normalizedTitle": "getdiscoverycategories",
          "charIndex": 2858
        },
        {
          "level": 3,
          "title": "getEmojiGuild",
          "slug": "getemojiguild",
          "normalizedTitle": "getemojiguild",
          "charIndex": 2884
        },
        {
          "level": 3,
          "title": "getGateway",
          "slug": "getgateway",
          "normalizedTitle": "getgateway",
          "charIndex": 2901
        },
        {
          "level": 3,
          "title": "getGuildAuditLog",
          "slug": "getguildauditlog",
          "normalizedTitle": "getguildauditlog",
          "charIndex": 2915
        },
        {
          "level": 3,
          "title": "getGuildAuditLogs",
          "slug": "getguildauditlogs",
          "normalizedTitle": "getguildauditlogs",
          "charIndex": 2935
        },
        {
          "level": 3,
          "title": "getGuildBan",
          "slug": "getguildban",
          "normalizedTitle": "getguildban",
          "charIndex": 2956
        },
        {
          "level": 3,
          "title": "getGuildBans",
          "slug": "getguildbans",
          "normalizedTitle": "getguildbans",
          "charIndex": 2971
        },
        {
          "level": 3,
          "title": "getGuildCommand",
          "slug": "getguildcommand",
          "normalizedTitle": "getguildcommand",
          "charIndex": 2987
        },
        {
          "level": 3,
          "title": "getGuildCommandPermissions",
          "slug": "getguildcommandpermissions",
          "normalizedTitle": "getguildcommandpermissions",
          "charIndex": 3006
        },
        {
          "level": 3,
          "title": "getGuildCommands",
          "slug": "getguildcommands",
          "normalizedTitle": "getguildcommands",
          "charIndex": 3036
        },
        {
          "level": 3,
          "title": "getGuildDiscovery",
          "slug": "getguilddiscovery",
          "normalizedTitle": "getguilddiscovery",
          "charIndex": 3056
        },
        {
          "level": 3,
          "title": "getGuildEmbed",
          "slug": "getguildembed",
          "normalizedTitle": "getguildembed",
          "charIndex": 3077
        },
        {
          "level": 3,
          "title": "getGuildIntegrations",
          "slug": "getguildintegrations",
          "normalizedTitle": "getguildintegrations",
          "charIndex": 3094
        },
        {
          "level": 3,
          "title": "getGuildInvites",
          "slug": "getguildinvites",
          "normalizedTitle": "getguildinvites",
          "charIndex": 3118
        },
        {
          "level": 3,
          "title": "getGuildPreview",
          "slug": "getguildpreview",
          "normalizedTitle": "getguildpreview",
          "charIndex": 3137
        },
        {
          "level": 3,
          "title": "getGuildTemplate",
          "slug": "getguildtemplate",
          "normalizedTitle": "getguildtemplate",
          "charIndex": 3156
        },
        {
          "level": 3,
          "title": "getGuildTemplates",
          "slug": "getguildtemplates",
          "normalizedTitle": "getguildtemplates",
          "charIndex": 3176
        },
        {
          "level": 3,
          "title": "getGuildVanity",
          "slug": "getguildvanity",
          "normalizedTitle": "getguildvanity",
          "charIndex": 3197
        },
        {
          "level": 3,
          "title": "getGuildWebhooks",
          "slug": "getguildwebhooks",
          "normalizedTitle": "getguildwebhooks",
          "charIndex": 3215
        },
        {
          "level": 3,
          "title": "getGuildWelcomeScreen",
          "slug": "getguildwelcomescreen",
          "normalizedTitle": "getguildwelcomescreen",
          "charIndex": 3235
        },
        {
          "level": 3,
          "title": "getGuildWidget",
          "slug": "getguildwidget",
          "normalizedTitle": "getguildwidget",
          "charIndex": 3260
        },
        {
          "level": 3,
          "title": "getGuildWidgetSettings",
          "slug": "getguildwidgetsettings",
          "normalizedTitle": "getguildwidgetsettings",
          "charIndex": 3278
        },
        {
          "level": 3,
          "title": "getInvite",
          "slug": "getinvite",
          "normalizedTitle": "getinvite",
          "charIndex": 3304
        },
        {
          "level": 3,
          "title": "getJoinedPrivateArchivedThreads",
          "slug": "getjoinedprivatearchivedthreads",
          "normalizedTitle": "getjoinedprivatearchivedthreads",
          "charIndex": 3317
        },
        {
          "level": 3,
          "title": "getMaxListeners",
          "slug": "getmaxlisteners",
          "normalizedTitle": "getmaxlisteners",
          "charIndex": 3352
        },
        {
          "level": 3,
          "title": "getMessage",
          "slug": "getmessage",
          "normalizedTitle": "getmessage",
          "charIndex": 3371
        },
        {
          "level": 3,
          "title": "getMessageReaction",
          "slug": "getmessagereaction",
          "normalizedTitle": "getmessagereaction",
          "charIndex": 3385
        },
        {
          "level": 3,
          "title": "getMessages",
          "slug": "getmessages",
          "normalizedTitle": "getmessages",
          "charIndex": 3407
        },
        {
          "level": 3,
          "title": "getNitroStickerPacks",
          "slug": "getnitrostickerpacks",
          "normalizedTitle": "getnitrostickerpacks",
          "charIndex": 3422
        },
        {
          "level": 3,
          "title": "getOAuthApplication",
          "slug": "getoauthapplication",
          "normalizedTitle": "getoauthapplication",
          "charIndex": 3446
        },
        {
          "level": 3,
          "title": "getPins",
          "slug": "getpins",
          "normalizedTitle": "getpins",
          "charIndex": 3469
        },
        {
          "level": 3,
          "title": "getPruneCount",
          "slug": "getprunecount",
          "normalizedTitle": "getprunecount",
          "charIndex": 3480
        },
        {
          "level": 3,
          "title": "getRESTChannel",
          "slug": "getrestchannel",
          "normalizedTitle": "getrestchannel",
          "charIndex": 3497
        },
        {
          "level": 3,
          "title": "getRESTGuild",
          "slug": "getrestguild",
          "normalizedTitle": "getrestguild",
          "charIndex": 3515
        },
        {
          "level": 3,
          "title": "getRESTGuildChannels",
          "slug": "getrestguildchannels",
          "normalizedTitle": "getrestguildchannels",
          "charIndex": 3531
        },
        {
          "level": 3,
          "title": "getRESTGuildEmoji",
          "slug": "getrestguildemoji",
          "normalizedTitle": "getrestguildemoji",
          "charIndex": 3555
        },
        {
          "level": 3,
          "title": "getRESTGuildEmojis",
          "slug": "getrestguildemojis",
          "normalizedTitle": "getrestguildemojis",
          "charIndex": 3576
        },
        {
          "level": 3,
          "title": "getRESTGuildMember",
          "slug": "getrestguildmember",
          "normalizedTitle": "getrestguildmember",
          "charIndex": 3598
        },
        {
          "level": 3,
          "title": "getRESTGuildMembers",
          "slug": "getrestguildmembers",
          "normalizedTitle": "getrestguildmembers",
          "charIndex": 3620
        },
        {
          "level": 3,
          "title": "getRESTGuildRoles",
          "slug": "getrestguildroles",
          "normalizedTitle": "getrestguildroles",
          "charIndex": 3643
        },
        {
          "level": 3,
          "title": "getRESTGuildSticker",
          "slug": "getrestguildsticker",
          "normalizedTitle": "getrestguildsticker",
          "charIndex": 3664
        },
        {
          "level": 3,
          "title": "getRESTGuildStickers",
          "slug": "getrestguildstickers",
          "normalizedTitle": "getrestguildstickers",
          "charIndex": 3687
        },
        {
          "level": 3,
          "title": "getRESTGuilds",
          "slug": "getrestguilds",
          "normalizedTitle": "getrestguilds",
          "charIndex": 3711
        },
        {
          "level": 3,
          "title": "getRESTSticker",
          "slug": "getreststicker",
          "normalizedTitle": "getreststicker",
          "charIndex": 3728
        },
        {
          "level": 3,
          "title": "getRESTUser",
          "slug": "getrestuser",
          "normalizedTitle": "getrestuser",
          "charIndex": 3746
        },
        {
          "level": 3,
          "title": "getSelf",
          "slug": "getself",
          "normalizedTitle": "getself",
          "charIndex": 3761
        },
        {
          "level": 3,
          "title": "getSelfBilling",
          "slug": "getselfbilling",
          "normalizedTitle": "getselfbilling",
          "charIndex": 3772
        },
        {
          "level": 3,
          "title": "getSelfConnections",
          "slug": "getselfconnections",
          "normalizedTitle": "getselfconnections",
          "charIndex": 3790
        },
        {
          "level": 3,
          "title": "getSelfMFACodes",
          "slug": "getselfmfacodes",
          "normalizedTitle": "getselfmfacodes",
          "charIndex": 3812
        },
        {
          "level": 3,
          "title": "getSelfPayments",
          "slug": "getselfpayments",
          "normalizedTitle": "getselfpayments",
          "charIndex": 3831
        },
        {
          "level": 3,
          "title": "getSelfSettings",
          "slug": "getselfsettings",
          "normalizedTitle": "getselfsettings",
          "charIndex": 3850
        },
        {
          "level": 3,
          "title": "getStageInstance",
          "slug": "getstageinstance",
          "normalizedTitle": "getstageinstance",
          "charIndex": 3869
        },
        {
          "level": 3,
          "title": "getThreadMembers",
          "slug": "getthreadmembers",
          "normalizedTitle": "getthreadmembers",
          "charIndex": 3889
        },
        {
          "level": 3,
          "title": "getUserProfile",
          "slug": "getuserprofile",
          "normalizedTitle": "getuserprofile",
          "charIndex": 3909
        },
        {
          "level": 3,
          "title": "getVoiceRegions",
          "slug": "getvoiceregions",
          "normalizedTitle": "getvoiceregions",
          "charIndex": 3927
        },
        {
          "level": 3,
          "title": "getWebhook",
          "slug": "getwebhook",
          "normalizedTitle": "getwebhook",
          "charIndex": 3946
        },
        {
          "level": 3,
          "title": "getWebhookMessage",
          "slug": "getwebhookmessage",
          "normalizedTitle": "getwebhookmessage",
          "charIndex": 3960
        },
        {
          "level": 3,
          "title": "joinThread",
          "slug": "jointhread",
          "normalizedTitle": "jointhread",
          "charIndex": 3981
        },
        {
          "level": 3,
          "title": "joinVoiceChannel",
          "slug": "joinvoicechannel",
          "normalizedTitle": "joinvoicechannel",
          "charIndex": 3995
        },
        {
          "level": 3,
          "title": "kickGuildMember",
          "slug": "kickguildmember",
          "normalizedTitle": "kickguildmember",
          "charIndex": 4015
        },
        {
          "level": 3,
          "title": "leaveGuild",
          "slug": "leaveguild",
          "normalizedTitle": "leaveguild",
          "charIndex": 4034
        },
        {
          "level": 3,
          "title": "leaveThread",
          "slug": "leavethread",
          "normalizedTitle": "leavethread",
          "charIndex": 4048
        },
        {
          "level": 3,
          "title": "leaveVoiceChannel",
          "slug": "leavevoicechannel",
          "normalizedTitle": "leavevoicechannel",
          "charIndex": 4063
        },
        {
          "level": 3,
          "title": "listenerCount",
          "slug": "listenercount",
          "normalizedTitle": "listenercount",
          "charIndex": 4084
        },
        {
          "level": 3,
          "title": "listeners",
          "slug": "listeners",
          "normalizedTitle": "listeners",
          "charIndex": 4101
        },
        {
          "level": 3,
          "title": "off",
          "slug": "off",
          "normalizedTitle": "off",
          "charIndex": 4114
        },
        {
          "level": 3,
          "title": "on",
          "slug": "on",
          "normalizedTitle": "on",
          "charIndex": 120
        },
        {
          "level": 3,
          "title": "once",
          "slug": "once",
          "normalizedTitle": "once",
          "charIndex": 4127
        },
        {
          "level": 3,
          "title": "pinMessage",
          "slug": "pinmessage",
          "normalizedTitle": "pinmessage",
          "charIndex": 4135
        },
        {
          "level": 3,
          "title": "prependListener",
          "slug": "prependlistener",
          "normalizedTitle": "prependlistener",
          "charIndex": 4149
        },
        {
          "level": 3,
          "title": "prependOnceListener",
          "slug": "prependoncelistener",
          "normalizedTitle": "prependoncelistener",
          "charIndex": 4168
        },
        {
          "level": 3,
          "title": "pruneMembers",
          "slug": "prunemembers",
          "normalizedTitle": "prunemembers",
          "charIndex": 4191
        },
        {
          "level": 3,
          "title": "purgeChannel",
          "slug": "purgechannel",
          "normalizedTitle": "purgechannel",
          "charIndex": 4207
        },
        {
          "level": 3,
          "title": "rawListeners",
          "slug": "rawlisteners",
          "normalizedTitle": "rawlisteners",
          "charIndex": 4223
        },
        {
          "level": 3,
          "title": "removeAllListeners",
          "slug": "removealllisteners",
          "normalizedTitle": "removealllisteners",
          "charIndex": 4239
        },
        {
          "level": 3,
          "title": "removeGroupRecipient",
          "slug": "removegrouprecipient",
          "normalizedTitle": "removegrouprecipient",
          "charIndex": 4261
        },
        {
          "level": 3,
          "title": "removeGuildMemberRole",
          "slug": "removeguildmemberrole",
          "normalizedTitle": "removeguildmemberrole",
          "charIndex": 4285
        },
        {
          "level": 3,
          "title": "removeListener",
          "slug": "removelistener",
          "normalizedTitle": "removelistener",
          "charIndex": 4310
        },
        {
          "level": 3,
          "title": "removeMessageReaction",
          "slug": "removemessagereaction",
          "normalizedTitle": "removemessagereaction",
          "charIndex": 4328
        },
        {
          "level": 3,
          "title": "removeMessageReactionEmoji",
          "slug": "removemessagereactionemoji",
          "normalizedTitle": "removemessagereactionemoji",
          "charIndex": 4353
        },
        {
          "level": 3,
          "title": "removeMessageReactions",
          "slug": "removemessagereactions",
          "normalizedTitle": "removemessagereactions",
          "charIndex": 4383
        },
        {
          "level": 3,
          "title": "removeRelationship",
          "slug": "removerelationship",
          "normalizedTitle": "removerelationship",
          "charIndex": 4409
        },
        {
          "level": 3,
          "title": "searchChannelMessages",
          "slug": "searchchannelmessages",
          "normalizedTitle": "searchchannelmessages",
          "charIndex": 4431
        },
        {
          "level": 3,
          "title": "searchGuildMembers",
          "slug": "searchguildmembers",
          "normalizedTitle": "searchguildmembers",
          "charIndex": 4456
        },
        {
          "level": 3,
          "title": "searchGuildMessages",
          "slug": "searchguildmessages",
          "normalizedTitle": "searchguildmessages",
          "charIndex": 4478
        },
        {
          "level": 3,
          "title": "sendChannelTyping",
          "slug": "sendchanneltyping",
          "normalizedTitle": "sendchanneltyping",
          "charIndex": 4501
        },
        {
          "level": 3,
          "title": "setMaxListeners",
          "slug": "setmaxlisteners",
          "normalizedTitle": "setmaxlisteners",
          "charIndex": 4522
        },
        {
          "level": 3,
          "title": "syncGuildIntegration",
          "slug": "syncguildintegration",
          "normalizedTitle": "syncguildintegration",
          "charIndex": 4541
        },
        {
          "level": 3,
          "title": "syncGuildTemplate",
          "slug": "syncguildtemplate",
          "normalizedTitle": "syncguildtemplate",
          "charIndex": 4565
        },
        {
          "level": 3,
          "title": "toString",
          "slug": "tostring",
          "normalizedTitle": "tostring",
          "charIndex": 4586
        },
        {
          "level": 3,
          "title": "unbanGuildMember",
          "slug": "unbanguildmember",
          "normalizedTitle": "unbanguildmember",
          "charIndex": 4598
        },
        {
          "level": 3,
          "title": "unpinMessage",
          "slug": "unpinmessage",
          "normalizedTitle": "unpinmessage",
          "charIndex": 4618
        },
        {
          "level": 3,
          "title": "validateDiscoverySearchTerm",
          "slug": "validatediscoverysearchterm",
          "normalizedTitle": "validatediscoverysearchterm",
          "charIndex": 4634
        },
        {
          "level": 3,
          "title": "getEventListeners",
          "slug": "geteventlisteners",
          "normalizedTitle": "geteventlisteners",
          "charIndex": 4665
        },
        {
          "level": 3,
          "title": "listenerCount",
          "slug": "listenercount-2",
          "normalizedTitle": "listenercount",
          "charIndex": 4084
        },
        {
          "level": 3,
          "title": "on",
          "slug": "on-2",
          "normalizedTitle": "on",
          "charIndex": 120
        },
        {
          "level": 3,
          "title": "once",
          "slug": "once-2",
          "normalizedTitle": "once",
          "charIndex": 4127
        },
        {
          "level": 3,
          "title": "setMaxListeners",
          "slug": "setmaxlisteners-2",
          "normalizedTitle": "setmaxlisteners",
          "charIndex": 4522
        }
      ],
      "headersStr": "Hierarchy Table of contents Constructors Properties Methods Constructors constructor Properties application baseDirectory bot channelGuildMap defaultPrefix gatewayURL groupChannels guildShardMap guilds handler ignoreBots lastConnect lastReconnectDelay logger mentionPrefix notes options owners presence privateChannelMap privateChannels ready reconnectAttempts relationships requestHandler shards startTime testMode threadGuildMap unavailableGuilds uptime user userGuildSettings userSettings users voiceConnections captureRejectionSymbol captureRejections defaultMaxListeners errorMonitor Methods acceptInvite addGroupRecipient addGuildDiscoverySubcategory addGuildMemberRole addListener addMessageReaction addRelationship addSelfPremiumSubscription banGuildMember bulkEditCommandPermissions bulkEditCommands bulkEditGuildCommands closeVoiceConnection connect createChannel createChannelInvite createChannelWebhook createCommand createGroupChannel createGuild createGuildCommand createGuildEmoji createGuildFromTemplate createGuildSticker createGuildTemplate createInteractionResponse createMessage createRole createStageInstance createThreadWithMessage createThreadWithoutMessage crosspostMessage deleteChannel deleteChannelPermission deleteCommand deleteGuild deleteGuildCommand deleteGuildDiscoverySubcategory deleteGuildEmoji deleteGuildIntegration deleteGuildSticker deleteGuildTemplate deleteInvite deleteMessage deleteMessages deleteRole deleteSelfConnection deleteSelfPremiumSubscription deleteStageInstance deleteUserNote deleteWebhook deleteWebhookMessage disableSelfMFATOTP disconnect editAFK editChannel editChannelPermission editChannelPosition editCommand editCommandPermissions editGuild editGuildCommand editGuildDiscovery editGuildEmoji editGuildIntegration editGuildMember editGuildSticker editGuildTemplate editGuildVanity editGuildVoiceState editGuildWelcomeScreen editGuildWidget editMessage editNickname editRole editRolePosition editSelf editSelfConnection editSelfSettings editStageInstance editStatus editUserNote editWebhook editWebhookMessage emit enableSelfMFATOTP eventNames executeSlackWebhook executeWebhook fetchPrefix followChannel getActiveGuildThreads getActiveThreads getArchivedThreads getBotGateway getChannel getChannelInvites getChannelWebhooks getCommand getCommandPermissions getCommands getDMChannel getDiscoveryCategories getEmojiGuild getGateway getGuildAuditLog getGuildAuditLogs getGuildBan getGuildBans getGuildCommand getGuildCommandPermissions getGuildCommands getGuildDiscovery getGuildEmbed getGuildIntegrations getGuildInvites getGuildPreview getGuildTemplate getGuildTemplates getGuildVanity getGuildWebhooks getGuildWelcomeScreen getGuildWidget getGuildWidgetSettings getInvite getJoinedPrivateArchivedThreads getMaxListeners getMessage getMessageReaction getMessages getNitroStickerPacks getOAuthApplication getPins getPruneCount getRESTChannel getRESTGuild getRESTGuildChannels getRESTGuildEmoji getRESTGuildEmojis getRESTGuildMember getRESTGuildMembers getRESTGuildRoles getRESTGuildSticker getRESTGuildStickers getRESTGuilds getRESTSticker getRESTUser getSelf getSelfBilling getSelfConnections getSelfMFACodes getSelfPayments getSelfSettings getStageInstance getThreadMembers getUserProfile getVoiceRegions getWebhook getWebhookMessage joinThread joinVoiceChannel kickGuildMember leaveGuild leaveThread leaveVoiceChannel listenerCount listeners off on once pinMessage prependListener prependOnceListener pruneMembers purgeChannel rawListeners removeAllListeners removeGroupRecipient removeGuildMemberRole removeListener removeMessageReaction removeMessageReactionEmoji removeMessageReactions removeRelationship searchChannelMessages searchGuildMembers searchGuildMessages sendChannelTyping setMaxListeners syncGuildIntegration syncGuildTemplate toString unbanGuildMember unpinMessage validateDiscoverySearchTerm getEventListeners listenerCount on once setMaxListeners",
      "content": "@cofo/framework / Exports / CofoClient\n\n\n# Class: CofoClient\n\n\n# Hierarchy\n\n * Client\n   \n   ↳ CofoClient\n\n\n# Table of contents\n\n\n# Constructors\n\n * constructor\n\n\n# Properties\n\n * application\n * baseDirectory\n * bot\n * channelGuildMap\n * defaultPrefix\n * gatewayURL\n * groupChannels\n * guildShardMap\n * guilds\n * handler\n * ignoreBots\n * lastConnect\n * lastReconnectDelay\n * logger\n * mentionPrefix\n * notes\n * options\n * owners\n * presence\n * privateChannelMap\n * privateChannels\n * ready\n * reconnectAttempts\n * relationships\n * requestHandler\n * shards\n * startTime\n * testMode\n * threadGuildMap\n * unavailableGuilds\n * uptime\n * user\n * userGuildSettings\n * userSettings\n * users\n * voiceConnections\n * captureRejectionSymbol\n * captureRejections\n * defaultMaxListeners\n * errorMonitor\n\n\n# Methods\n\n * acceptInvite\n * addGroupRecipient\n * addGuildDiscoverySubcategory\n * addGuildMemberRole\n * addListener\n * addMessageReaction\n * addRelationship\n * addSelfPremiumSubscription\n * banGuildMember\n * bulkEditCommandPermissions\n * bulkEditCommands\n * bulkEditGuildCommands\n * closeVoiceConnection\n * connect\n * createChannel\n * createChannelInvite\n * createChannelWebhook\n * createCommand\n * createGroupChannel\n * createGuild\n * createGuildCommand\n * createGuildEmoji\n * createGuildFromTemplate\n * createGuildSticker\n * createGuildTemplate\n * createInteractionResponse\n * createMessage\n * createRole\n * createStageInstance\n * createThreadWithMessage\n * createThreadWithoutMessage\n * crosspostMessage\n * deleteChannel\n * deleteChannelPermission\n * deleteCommand\n * deleteGuild\n * deleteGuildCommand\n * deleteGuildDiscoverySubcategory\n * deleteGuildEmoji\n * deleteGuildIntegration\n * deleteGuildSticker\n * deleteGuildTemplate\n * deleteInvite\n * deleteMessage\n * deleteMessages\n * deleteRole\n * deleteSelfConnection\n * deleteSelfPremiumSubscription\n * deleteStageInstance\n * deleteUserNote\n * deleteWebhook\n * deleteWebhookMessage\n * disableSelfMFATOTP\n * disconnect\n * editAFK\n * editChannel\n * editChannelPermission\n * editChannelPosition\n * editCommand\n * editCommandPermissions\n * editGuild\n * editGuildCommand\n * editGuildDiscovery\n * editGuildEmoji\n * editGuildIntegration\n * editGuildMember\n * editGuildSticker\n * editGuildTemplate\n * editGuildVanity\n * editGuildVoiceState\n * editGuildWelcomeScreen\n * editGuildWidget\n * editMessage\n * editNickname\n * editRole\n * editRolePosition\n * editSelf\n * editSelfConnection\n * editSelfSettings\n * editStageInstance\n * editStatus\n * editUserNote\n * editWebhook\n * editWebhookMessage\n * emit\n * enableSelfMFATOTP\n * eventNames\n * executeSlackWebhook\n * executeWebhook\n * fetchPrefix\n * followChannel\n * getActiveGuildThreads\n * getActiveThreads\n * getArchivedThreads\n * getBotGateway\n * getChannel\n * getChannelInvites\n * getChannelWebhooks\n * getCommand\n * getCommandPermissions\n * getCommands\n * getDMChannel\n * getDiscoveryCategories\n * getEmojiGuild\n * getGateway\n * getGuildAuditLog\n * getGuildAuditLogs\n * getGuildBan\n * getGuildBans\n * getGuildCommand\n * getGuildCommandPermissions\n * getGuildCommands\n * getGuildDiscovery\n * getGuildEmbed\n * getGuildIntegrations\n * getGuildInvites\n * getGuildPreview\n * getGuildTemplate\n * getGuildTemplates\n * getGuildVanity\n * getGuildWebhooks\n * getGuildWelcomeScreen\n * getGuildWidget\n * getGuildWidgetSettings\n * getInvite\n * getJoinedPrivateArchivedThreads\n * getMaxListeners\n * getMessage\n * getMessageReaction\n * getMessages\n * getNitroStickerPacks\n * getOAuthApplication\n * getPins\n * getPruneCount\n * getRESTChannel\n * getRESTGuild\n * getRESTGuildChannels\n * getRESTGuildEmoji\n * getRESTGuildEmojis\n * getRESTGuildMember\n * getRESTGuildMembers\n * getRESTGuildRoles\n * getRESTGuildSticker\n * getRESTGuildStickers\n * getRESTGuilds\n * getRESTSticker\n * getRESTUser\n * getSelf\n * getSelfBilling\n * getSelfConnections\n * getSelfMFACodes\n * getSelfPayments\n * getSelfSettings\n * getStageInstance\n * getThreadMembers\n * getUserProfile\n * getVoiceRegions\n * getWebhook\n * getWebhookMessage\n * joinThread\n * joinVoiceChannel\n * kickGuildMember\n * leaveGuild\n * leaveThread\n * leaveVoiceChannel\n * listenerCount\n * listeners\n * off\n * on\n * once\n * pinMessage\n * prependListener\n * prependOnceListener\n * pruneMembers\n * purgeChannel\n * rawListeners\n * removeAllListeners\n * removeGroupRecipient\n * removeGuildMemberRole\n * removeListener\n * removeMessageReaction\n * removeMessageReactionEmoji\n * removeMessageReactions\n * removeRelationship\n * searchChannelMessages\n * searchGuildMembers\n * searchGuildMessages\n * sendChannelTyping\n * setMaxListeners\n * syncGuildIntegration\n * syncGuildTemplate\n * toString\n * unbanGuildMember\n * unpinMessage\n * validateDiscoverySearchTerm\n * getEventListeners\n * listenerCount\n * on\n * once\n * setMaxListeners\n\n\n# Constructors\n\n\n# constructor\n\n• new CofoClient(token, frameworkOptions, options?)\n\nCreate a new Bot\n\n# Parameters\n\nNAME               TYPE\ntoken              string\nframeworkOptions   frameworkOptions\noptions?           ClientOptions\n\n# Overrides\n\nEris.Client.constructor\n\n# Defined in\n\nsrc/CofoClient.ts:22\n\n\n# Properties\n\n\n# application\n\n• Optional application: Object\n\n# Type declaration\n\nNAME    TYPE\nflags   number\nid      string\n\n# Inherited from\n\nEris.Client.application\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2074\n\n----------------------------------------\n\n\n# baseDirectory\n\n• baseDirectory: string\n\n# Defined in\n\nsrc/CofoClient.ts:13\n\n----------------------------------------\n\n\n# bot\n\n• bot: boolean\n\n# Inherited from\n\nEris.Client.bot\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2075\n\n----------------------------------------\n\n\n# channelGuildMap\n\n• channelGuildMap: Object\n\n# Index signature\n\n▪ [s: string]: string\n\n# Inherited from\n\nEris.Client.channelGuildMap\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2076\n\n----------------------------------------\n\n\n# defaultPrefix\n\n• defaultPrefix: string\n\n# Defined in\n\nsrc/CofoClient.ts:10\n\n----------------------------------------\n\n\n# gatewayURL\n\n• Optional gatewayURL: string\n\n# Inherited from\n\nEris.Client.gatewayURL\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2077\n\n----------------------------------------\n\n\n# groupChannels\n\n• groupChannels: Collection<GroupChannel>\n\n# Inherited from\n\nEris.Client.groupChannels\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2078\n\n----------------------------------------\n\n\n# guildShardMap\n\n• guildShardMap: Object\n\n# Index signature\n\n▪ [s: string]: number\n\n# Inherited from\n\nEris.Client.guildShardMap\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2080\n\n----------------------------------------\n\n\n# guilds\n\n• guilds: Collection<Guild>\n\n# Inherited from\n\nEris.Client.guilds\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2079\n\n----------------------------------------\n\n\n# handler\n\n• handler: CofoHandler\n\n# Defined in\n\nsrc/CofoClient.ts:9\n\n----------------------------------------\n\n\n# ignoreBots\n\n• ignoreBots: boolean\n\n# Defined in\n\nsrc/CofoClient.ts:12\n\n----------------------------------------\n\n\n# lastConnect\n\n• lastConnect: number\n\n# Inherited from\n\nEris.Client.lastConnect\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2081\n\n----------------------------------------\n\n\n# lastReconnectDelay\n\n• lastReconnectDelay: number\n\n# Inherited from\n\nEris.Client.lastReconnectDelay\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2082\n\n----------------------------------------\n\n\n# logger\n\n• logger: Logger\n\n# Defined in\n\nsrc/CofoClient.ts:8\n\n----------------------------------------\n\n\n# mentionPrefix\n\n• mentionPrefix: boolean\n\n# Defined in\n\nsrc/CofoClient.ts:11\n\n----------------------------------------\n\n\n# notes\n\n• notes: Object\n\n# Index signature\n\n▪ [s: string]: string\n\n# Inherited from\n\nEris.Client.notes\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2083\n\n----------------------------------------\n\n\n# options\n\n• options: ClientOptions\n\n# Inherited from\n\nEris.Client.options\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2084\n\n----------------------------------------\n\n\n# owners\n\n• owners: any[]\n\n# Defined in\n\nsrc/CofoClient.ts:14\n\n----------------------------------------\n\n\n# presence\n\n• presence: ClientPresence\n\n# Inherited from\n\nEris.Client.presence\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2085\n\n----------------------------------------\n\n\n# privateChannelMap\n\n• privateChannelMap: Object\n\n# Index signature\n\n▪ [s: string]: string\n\n# Inherited from\n\nEris.Client.privateChannelMap\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2086\n\n----------------------------------------\n\n\n# privateChannels\n\n• privateChannels: Collection<PrivateChannel>\n\n# Inherited from\n\nEris.Client.privateChannels\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2087\n\n----------------------------------------\n\n\n# ready\n\n• ready: boolean\n\n# Inherited from\n\nEris.Client.ready\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2088\n\n----------------------------------------\n\n\n# reconnectAttempts\n\n• reconnectAttempts: number\n\n# Inherited from\n\nEris.Client.reconnectAttempts\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2089\n\n----------------------------------------\n\n\n# relationships\n\n• relationships: Collection<Relationship>\n\n# Inherited from\n\nEris.Client.relationships\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2090\n\n----------------------------------------\n\n\n# requestHandler\n\n• requestHandler: RequestHandler\n\n# Inherited from\n\nEris.Client.requestHandler\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2091\n\n----------------------------------------\n\n\n# shards\n\n• shards: ShardManager\n\n# Inherited from\n\nEris.Client.shards\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2092\n\n----------------------------------------\n\n\n# startTime\n\n• startTime: number\n\n# Inherited from\n\nEris.Client.startTime\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2093\n\n----------------------------------------\n\n\n# testMode\n\n• testMode: undefined | { enabled: boolean ; guildID: string }\n\n# Defined in\n\nsrc/CofoClient.ts:15\n\n----------------------------------------\n\n\n# threadGuildMap\n\n• threadGuildMap: Object\n\n# Index signature\n\n▪ [s: string]: string\n\n# Inherited from\n\nEris.Client.threadGuildMap\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2094\n\n----------------------------------------\n\n\n# unavailableGuilds\n\n• unavailableGuilds: Collection<UnavailableGuild>\n\n# Inherited from\n\nEris.Client.unavailableGuilds\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2095\n\n----------------------------------------\n\n\n# uptime\n\n• uptime: number\n\n# Inherited from\n\nEris.Client.uptime\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2096\n\n----------------------------------------\n\n\n# user\n\n• user: ExtendedUser\n\n# Inherited from\n\nEris.Client.user\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2097\n\n----------------------------------------\n\n\n# userGuildSettings\n\n• userGuildSettings: Object\n\n# Index signature\n\n▪ [s: string]: GuildSettings\n\n# Inherited from\n\nEris.Client.userGuildSettings\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2098\n\n----------------------------------------\n\n\n# userSettings\n\n• userSettings: UserSettings\n\n# Inherited from\n\nEris.Client.userSettings\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2100\n\n----------------------------------------\n\n\n# users\n\n• users: Collection<User>\n\n# Inherited from\n\nEris.Client.users\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2099\n\n----------------------------------------\n\n\n# voiceConnections\n\n• voiceConnections: VoiceConnectionManager<VoiceConnection>\n\n# Inherited from\n\nEris.Client.voiceConnections\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2101\n\n----------------------------------------\n\n\n# captureRejectionSymbol\n\n▪ Static Readonly captureRejectionSymbol: typeof captureRejectionSymbol\n\n# Inherited from\n\nEris.Client.captureRejectionSymbol\n\n# Defined in\n\nnode_modules/@types/node/events.d.ts:301\n\n----------------------------------------\n\n\n# captureRejections\n\n▪ Static captureRejections: boolean\n\nSets or gets the default captureRejection value for all emitters.\n\n# Inherited from\n\nEris.Client.captureRejections\n\n# Defined in\n\nnode_modules/@types/node/events.d.ts:306\n\n----------------------------------------\n\n\n# defaultMaxListeners\n\n▪ Static defaultMaxListeners: number\n\n# Inherited from\n\nEris.Client.defaultMaxListeners\n\n# Defined in\n\nnode_modules/@types/node/events.d.ts:307\n\n----------------------------------------\n\n\n# errorMonitor\n\n▪ Static Readonly errorMonitor: typeof errorMonitor\n\nThis symbol shall be used to install a listener for only monitoring 'error' events. Listeners installed using this symbol are called before the regular 'error' listeners are called.\n\nInstalling a listener using this symbol does not change the behavior once an 'error' event is emitted, therefore the process will still crash if no regular 'error' listener is installed.\n\n# Inherited from\n\nEris.Client.errorMonitor\n\n# Defined in\n\nnode_modules/@types/node/events.d.ts:300\n\n\n# Methods\n\n\n# acceptInvite\n\n▸ acceptInvite(inviteID): Promise<Invite<\"withoutCount\", InviteChannel>>\n\n# Parameters\n\nNAME       TYPE\ninviteID   string\n\n# Returns\n\nPromise<Invite<\"withoutCount\", InviteChannel>>\n\n# Inherited from\n\nEris.Client.acceptInvite\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2103\n\n----------------------------------------\n\n\n# addGroupRecipient\n\n▸ addGroupRecipient(groupID, userID): Promise<void>\n\n# Parameters\n\nNAME      TYPE\ngroupID   string\nuserID    string\n\n# Returns\n\nPromise<void>\n\n# Inherited from\n\nEris.Client.addGroupRecipient\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2104\n\n----------------------------------------\n\n\n# addGuildDiscoverySubcategory\n\n▸ addGuildDiscoverySubcategory(guildID, categoryID, reason?): Promise<DiscoverySubcategoryResponse>\n\n# Parameters\n\nNAME         TYPE\nguildID      string\ncategoryID   string\nreason?      string\n\n# Returns\n\nPromise<DiscoverySubcategoryResponse>\n\n# Inherited from\n\nEris.Client.addGuildDiscoverySubcategory\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2105\n\n----------------------------------------\n\n\n# addGuildMemberRole\n\n▸ addGuildMemberRole(guildID, memberID, roleID, reason?): Promise<void>\n\n# Parameters\n\nNAME       TYPE\nguildID    string\nmemberID   string\nroleID     string\nreason?    string\n\n# Returns\n\nPromise<void>\n\n# Inherited from\n\nEris.Client.addGuildMemberRole\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2106\n\n----------------------------------------\n\n\n# addListener\n\n▸ addListener(eventName, listener): CofoClient\n\nAlias for emitter.on(eventName, listener).\n\nsince v0.1.26\n\n# Parameters\n\nNAME        TYPE\neventName   string | symbol\nlistener    (...args: any[]) => void\n\n# Returns\n\nCofoClient\n\n# Inherited from\n\nEris.Client.addListener\n\n# Defined in\n\nnode_modules/@types/node/events.d.ts:327\n\n----------------------------------------\n\n\n# addMessageReaction\n\n▸ addMessageReaction(channelID, messageID, reaction): Promise<void>\n\ndeprecated\n\n# Parameters\n\nNAME        TYPE\nchannelID   string\nmessageID   string\nreaction    string\n\n# Returns\n\nPromise<void>\n\n# Inherited from\n\nEris.Client.addMessageReaction\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2107\n\n▸ addMessageReaction(channelID, messageID, reaction, userID): Promise<void>\n\ndeprecated\n\n# Parameters\n\nNAME        TYPE\nchannelID   string\nmessageID   string\nreaction    string\nuserID      string\n\n# Returns\n\nPromise<void>\n\n# Inherited from\n\nEris.Client.addMessageReaction\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2109\n\n----------------------------------------\n\n\n# addRelationship\n\n▸ addRelationship(userID, block?): Promise<void>\n\n# Parameters\n\nNAME     TYPE\nuserID   string\nblock?   boolean\n\n# Returns\n\nPromise<void>\n\n# Inherited from\n\nEris.Client.addRelationship\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2110\n\n----------------------------------------\n\n\n# addSelfPremiumSubscription\n\n▸ addSelfPremiumSubscription(token, plan): Promise<void>\n\n# Parameters\n\nNAME    TYPE\ntoken   string\nplan    string\n\n# Returns\n\nPromise<void>\n\n# Inherited from\n\nEris.Client.addSelfPremiumSubscription\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2111\n\n----------------------------------------\n\n\n# banGuildMember\n\n▸ banGuildMember(guildID, userID, deleteMessageDays?, reason?): Promise<void>\n\n# Parameters\n\nNAME                 TYPE\nguildID              string\nuserID               string\ndeleteMessageDays?   number\nreason?              string\n\n# Returns\n\nPromise<void>\n\n# Inherited from\n\nEris.Client.banGuildMember\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2112\n\n----------------------------------------\n\n\n# bulkEditCommandPermissions\n\n▸ bulkEditCommandPermissions(guildID, permissions): Promise<GuildApplicationCommandPermissions[]>\n\n# Parameters\n\nNAME          TYPE\nguildID       string\npermissions   { id: string ; permissions: ApplicationCommandPermissions[]\n              }[]\n\n# Returns\n\nPromise<GuildApplicationCommandPermissions[]>\n\n# Inherited from\n\nEris.Client.bulkEditCommandPermissions\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2113\n\n----------------------------------------\n\n\n# bulkEditCommands\n\n▸ bulkEditCommands(commands): Promise<ApplicationCommand<2 | 1 | 3>[]>\n\n# Parameters\n\nNAME       TYPE\ncommands   ApplicationCommandStructure[]\n\n# Returns\n\nPromise<ApplicationCommand<2 | 1 | 3>[]>\n\n# Inherited from\n\nEris.Client.bulkEditCommands\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2114\n\n----------------------------------------\n\n\n# bulkEditGuildCommands\n\n▸ bulkEditGuildCommands(guildID, commands): Promise<ApplicationCommand<2 | 1 | 3>[]>\n\n# Parameters\n\nNAME       TYPE\nguildID    string\ncommands   ApplicationCommandStructure[]\n\n# Returns\n\nPromise<ApplicationCommand<2 | 1 | 3>[]>\n\n# Inherited from\n\nEris.Client.bulkEditGuildCommands\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2115\n\n----------------------------------------\n\n\n# closeVoiceConnection\n\n▸ closeVoiceConnection(guildID): void\n\n# Parameters\n\nNAME      TYPE\nguildID   string\n\n# Returns\n\nvoid\n\n# Inherited from\n\nEris.Client.closeVoiceConnection\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2116\n\n----------------------------------------\n\n\n# connect\n\n▸ connect(): any\n\n# Returns\n\nany\n\n# Overrides\n\nEris.Client.connect\n\n# Defined in\n\nsrc/CofoClient.ts:38\n\n----------------------------------------\n\n\n# createChannel\n\n▸ createChannel(guildID, name): Promise<TextChannel>\n\ndeprecated\n\n# Parameters\n\nNAME      TYPE\nguildID   string\nname      string\n\n# Returns\n\nPromise<TextChannel>\n\n# Inherited from\n\nEris.Client.createChannel\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2118\n\n▸ createChannel(guildID, name, type, options?): Promise<TextChannel>\n\ndeprecated\n\n# Parameters\n\nNAME       TYPE\nguildID    string\nname       string\ntype       0\noptions?   CreateChannelOptions\n\n# Returns\n\nPromise<TextChannel>\n\n# Inherited from\n\nEris.Client.createChannel\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2119\n\n▸ createChannel(guildID, name, type, options?): Promise<VoiceChannel>\n\ndeprecated\n\n# Parameters\n\nNAME       TYPE\nguildID    string\nname       string\ntype       2\noptions?   CreateChannelOptions\n\n# Returns\n\nPromise<VoiceChannel>\n\n# Inherited from\n\nEris.Client.createChannel\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2125\n\n▸ createChannel(guildID, name, type, options?): Promise<CategoryChannel>\n\ndeprecated\n\n# Parameters\n\nNAME       TYPE\nguildID    string\nname       string\ntype       4\noptions?   CreateChannelOptions\n\n# Returns\n\nPromise<CategoryChannel>\n\n# Inherited from\n\nEris.Client.createChannel\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2131\n\n▸ createChannel(guildID, name, type, options?): Promise<NewsChannel>\n\ndeprecated\n\n# Parameters\n\nNAME       TYPE\nguildID    string\nname       string\ntype       5\noptions?   CreateChannelOptions\n\n# Returns\n\nPromise<NewsChannel>\n\n# Inherited from\n\nEris.Client.createChannel\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2137\n\n▸ createChannel(guildID, name, type, options?): Promise<StoreChannel>\n\ndeprecated\n\n# Parameters\n\nNAME       TYPE\nguildID    string\nname       string\ntype       6\noptions?   CreateChannelOptions\n\n# Returns\n\nPromise<StoreChannel>\n\n# Inherited from\n\nEris.Client.createChannel\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2143\n\n▸ createChannel(guildID, name, type, options?): Promise<StageChannel>\n\ndeprecated\n\n# Parameters\n\nNAME       TYPE\nguildID    string\nname       string\ntype       13\noptions?   CreateChannelOptions\n\n# Returns\n\nPromise<StageChannel>\n\n# Inherited from\n\nEris.Client.createChannel\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2149\n\n▸ createChannel(guildID, name, type?, options?): Promise<unknown>\n\ndeprecated\n\n# Parameters\n\nNAME       TYPE\nguildID    string\nname       string\ntype?      number\noptions?   CreateChannelOptions\n\n# Returns\n\nPromise<unknown>\n\n# Inherited from\n\nEris.Client.createChannel\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2155\n\n▸ createChannel(guildID, name, type, reason?, options?): Promise<TextChannel>\n\ndeprecated\n\n# Parameters\n\nNAME       TYPE\nguildID    string\nname       string\ntype       0\nreason?    string\noptions?   string | CreateChannelOptions\n\n# Returns\n\nPromise<TextChannel>\n\n# Inherited from\n\nEris.Client.createChannel\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2162\n\n▸ createChannel(guildID, name, type, reason?, options?): Promise<VoiceChannel>\n\ndeprecated\n\n# Parameters\n\nNAME       TYPE\nguildID    string\nname       string\ntype       2\nreason?    string\noptions?   string | CreateChannelOptions\n\n# Returns\n\nPromise<VoiceChannel>\n\n# Inherited from\n\nEris.Client.createChannel\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2170\n\n▸ createChannel(guildID, name, type, reason?, options?): Promise<CategoryChannel>\n\ndeprecated\n\n# Parameters\n\nNAME       TYPE\nguildID    string\nname       string\ntype       4\nreason?    string\noptions?   string | CreateChannelOptions\n\n# Returns\n\nPromise<CategoryChannel>\n\n# Inherited from\n\nEris.Client.createChannel\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2178\n\n▸ createChannel(guildID, name, type, reason?, options?): Promise<NewsChannel>\n\ndeprecated\n\n# Parameters\n\nNAME       TYPE\nguildID    string\nname       string\ntype       5\nreason?    string\noptions?   string | CreateChannelOptions\n\n# Returns\n\nPromise<NewsChannel>\n\n# Inherited from\n\nEris.Client.createChannel\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2186\n\n▸ createChannel(guildID, name, type, reason?, options?): Promise<StoreChannel>\n\ndeprecated\n\n# Parameters\n\nNAME       TYPE\nguildID    string\nname       string\ntype       6\nreason?    string\noptions?   string | CreateChannelOptions\n\n# Returns\n\nPromise<StoreChannel>\n\n# Inherited from\n\nEris.Client.createChannel\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2194\n\n▸ createChannel(guildID, name, type, reason?, options?): Promise<StageChannel>\n\ndeprecated\n\n# Parameters\n\nNAME       TYPE\nguildID    string\nname       string\ntype       13\nreason?    string\noptions?   string | CreateChannelOptions\n\n# Returns\n\nPromise<StageChannel>\n\n# Inherited from\n\nEris.Client.createChannel\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2202\n\n▸ createChannel(guildID, name, type?, reason?, options?): Promise<unknown>\n\ndeprecated\n\n# Parameters\n\nNAME       TYPE\nguildID    string\nname       string\ntype?      number\nreason?    string\noptions?   string | CreateChannelOptions\n\n# Returns\n\nPromise<unknown>\n\n# Inherited from\n\nEris.Client.createChannel\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2210\n\n----------------------------------------\n\n\n# createChannelInvite\n\n▸ createChannelInvite(channelID, options?, reason?): Promise<Invite<\"withoutCount\", InviteChannel>>\n\n# Parameters\n\nNAME        TYPE\nchannelID   string\noptions?    CreateChannelInviteOptions\nreason?     string\n\n# Returns\n\nPromise<Invite<\"withoutCount\", InviteChannel>>\n\n# Inherited from\n\nEris.Client.createChannelInvite\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2217\n\n----------------------------------------\n\n\n# createChannelWebhook\n\n▸ createChannelWebhook(channelID, options, reason?): Promise<Webhook>\n\n# Parameters\n\nNAME              TYPE\nchannelID         string\noptions           Object\noptions.avatar?   null | string\noptions.name      string\nreason?           string\n\n# Returns\n\nPromise<Webhook>\n\n# Inherited from\n\nEris.Client.createChannelWebhook\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2222\n\n----------------------------------------\n\n\n# createCommand\n\n▸ createCommand(command): Promise<ApplicationCommand<2 | 1 | 3>>\n\n# Parameters\n\nNAME      TYPE\ncommand   ApplicationCommandStructure\n\n# Returns\n\nPromise<ApplicationCommand<2 | 1 | 3>>\n\n# Inherited from\n\nEris.Client.createCommand\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2227\n\n----------------------------------------\n\n\n# createGroupChannel\n\n▸ createGroupChannel(userIDs): Promise<GroupChannel>\n\n# Parameters\n\nNAME      TYPE\nuserIDs   string[]\n\n# Returns\n\nPromise<GroupChannel>\n\n# Inherited from\n\nEris.Client.createGroupChannel\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2228\n\n----------------------------------------\n\n\n# createGuild\n\n▸ createGuild(name, options?): Promise<Guild>\n\n# Parameters\n\nNAME       TYPE\nname       string\noptions?   CreateGuildOptions\n\n# Returns\n\nPromise<Guild>\n\n# Inherited from\n\nEris.Client.createGuild\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2229\n\n----------------------------------------\n\n\n# createGuildCommand\n\n▸ createGuildCommand(guildID, command): Promise<ApplicationCommand<2 | 1 | 3>>\n\n# Parameters\n\nNAME      TYPE\nguildID   string\ncommand   ApplicationCommandStructure\n\n# Returns\n\nPromise<ApplicationCommand<2 | 1 | 3>>\n\n# Inherited from\n\nEris.Client.createGuildCommand\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2230\n\n----------------------------------------\n\n\n# createGuildEmoji\n\n▸ createGuildEmoji(guildID, options, reason?): Promise<Emoji>\n\n# Parameters\n\nNAME      TYPE\nguildID   string\noptions   EmojiOptions\nreason?   string\n\n# Returns\n\nPromise<Emoji>\n\n# Inherited from\n\nEris.Client.createGuildEmoji\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2231\n\n----------------------------------------\n\n\n# createGuildFromTemplate\n\n▸ createGuildFromTemplate(code, name, icon?): Promise<Guild>\n\n# Parameters\n\nNAME    TYPE\ncode    string\nname    string\nicon?   string\n\n# Returns\n\nPromise<Guild>\n\n# Inherited from\n\nEris.Client.createGuildFromTemplate\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2232\n\n----------------------------------------\n\n\n# createGuildSticker\n\n▸ createGuildSticker(guildID, options, reason?): Promise<Sticker>\n\n# Parameters\n\nNAME      TYPE\nguildID   string\noptions   CreateStickerOptions\nreason?   string\n\n# Returns\n\nPromise<Sticker>\n\n# Inherited from\n\nEris.Client.createGuildSticker\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2233\n\n----------------------------------------\n\n\n# createGuildTemplate\n\n▸ createGuildTemplate(guildID, name, description?): Promise<GuildTemplate>\n\n# Parameters\n\nNAME           TYPE\nguildID        string\nname           string\ndescription?   null | string\n\n# Returns\n\nPromise<GuildTemplate>\n\n# Inherited from\n\nEris.Client.createGuildTemplate\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2234\n\n----------------------------------------\n\n\n# createInteractionResponse\n\n▸ createInteractionResponse(interactionID, interactionToken, options, file?): Promise<void>\n\n# Parameters\n\nNAME               TYPE\ninteractionID      string\ninteractionToken   string\noptions            InteractionOptions\nfile?              FileContent | FileContent[]\n\n# Returns\n\nPromise<void>\n\n# Inherited from\n\nEris.Client.createInteractionResponse\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2235\n\n----------------------------------------\n\n\n# createMessage\n\n▸ createMessage(channelID, content, file?): Promise<Message<TextableChannel>>\n\n# Parameters\n\nNAME        TYPE\nchannelID   string\ncontent     MessageContent\nfile?       FileContent | FileContent[]\n\n# Returns\n\nPromise<Message<TextableChannel>>\n\n# Inherited from\n\nEris.Client.createMessage\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2236\n\n----------------------------------------\n\n\n# createRole\n\n▸ createRole(guildID, options?, reason?): Promise<Role>\n\n# Parameters\n\nNAME       TYPE\nguildID    string\noptions?   RoleOptions | Role\nreason?    string\n\n# Returns\n\nPromise<Role>\n\n# Inherited from\n\nEris.Client.createRole\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2237\n\n----------------------------------------\n\n\n# createStageInstance\n\n▸ createStageInstance(channelID, options): Promise<StageInstance>\n\n# Parameters\n\nNAME        TYPE\nchannelID   string\noptions     StageInstanceOptions\n\n# Returns\n\nPromise<StageInstance>\n\n# Inherited from\n\nEris.Client.createStageInstance\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2238\n\n----------------------------------------\n\n\n# createThreadWithMessage\n\n▸ createThreadWithMessage(channelID, messageID, options): Promise<NewsThreadChannel | PublicThreadChannel>\n\n# Parameters\n\nNAME        TYPE\nchannelID   string\nmessageID   string\noptions     CreateThreadOptions\n\n# Returns\n\nPromise<NewsThreadChannel | PublicThreadChannel>\n\n# Inherited from\n\nEris.Client.createThreadWithMessage\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2239\n\n----------------------------------------\n\n\n# createThreadWithoutMessage\n\n▸ createThreadWithoutMessage(channelID, options): Promise<PrivateThreadChannel>\n\n# Parameters\n\nNAME        TYPE\nchannelID   string\noptions     CreateThreadWithoutMessageOptions<10 | 12 | 11>\n\n# Returns\n\nPromise<PrivateThreadChannel>\n\n# Inherited from\n\nEris.Client.createThreadWithoutMessage\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2240\n\n----------------------------------------\n\n\n# crosspostMessage\n\n▸ crosspostMessage(channelID, messageID): Promise<Message<TextableChannel>>\n\n# Parameters\n\nNAME        TYPE\nchannelID   string\nmessageID   string\n\n# Returns\n\nPromise<Message<TextableChannel>>\n\n# Inherited from\n\nEris.Client.crosspostMessage\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2241\n\n----------------------------------------\n\n\n# deleteChannel\n\n▸ deleteChannel(channelID, reason?): Promise<void>\n\n# Parameters\n\nNAME        TYPE\nchannelID   string\nreason?     string\n\n# Returns\n\nPromise<void>\n\n# Inherited from\n\nEris.Client.deleteChannel\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2242\n\n----------------------------------------\n\n\n# deleteChannelPermission\n\n▸ deleteChannelPermission(channelID, overwriteID, reason?): Promise<void>\n\n# Parameters\n\nNAME          TYPE\nchannelID     string\noverwriteID   string\nreason?       string\n\n# Returns\n\nPromise<void>\n\n# Inherited from\n\nEris.Client.deleteChannelPermission\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2243\n\n----------------------------------------\n\n\n# deleteCommand\n\n▸ deleteCommand(commandID): Promise<void>\n\n# Parameters\n\nNAME        TYPE\ncommandID   string\n\n# Returns\n\nPromise<void>\n\n# Inherited from\n\nEris.Client.deleteCommand\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2244\n\n----------------------------------------\n\n\n# deleteGuild\n\n▸ deleteGuild(guildID): Promise<void>\n\n# Parameters\n\nNAME      TYPE\nguildID   string\n\n# Returns\n\nPromise<void>\n\n# Inherited from\n\nEris.Client.deleteGuild\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2245\n\n----------------------------------------\n\n\n# deleteGuildCommand\n\n▸ deleteGuildCommand(guildID, commandID): Promise<void>\n\n# Parameters\n\nNAME        TYPE\nguildID     string\ncommandID   string\n\n# Returns\n\nPromise<void>\n\n# Inherited from\n\nEris.Client.deleteGuildCommand\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2246\n\n----------------------------------------\n\n\n# deleteGuildDiscoverySubcategory\n\n▸ deleteGuildDiscoverySubcategory(guildID, categoryID, reason?): Promise<void>\n\n# Parameters\n\nNAME         TYPE\nguildID      string\ncategoryID   string\nreason?      string\n\n# Returns\n\nPromise<void>\n\n# Inherited from\n\nEris.Client.deleteGuildDiscoverySubcategory\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2247\n\n----------------------------------------\n\n\n# deleteGuildEmoji\n\n▸ deleteGuildEmoji(guildID, emojiID, reason?): Promise<void>\n\n# Parameters\n\nNAME      TYPE\nguildID   string\nemojiID   string\nreason?   string\n\n# Returns\n\nPromise<void>\n\n# Inherited from\n\nEris.Client.deleteGuildEmoji\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2248\n\n----------------------------------------\n\n\n# deleteGuildIntegration\n\n▸ deleteGuildIntegration(guildID, integrationID): Promise<void>\n\n# Parameters\n\nNAME            TYPE\nguildID         string\nintegrationID   string\n\n# Returns\n\nPromise<void>\n\n# Inherited from\n\nEris.Client.deleteGuildIntegration\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2249\n\n----------------------------------------\n\n\n# deleteGuildSticker\n\n▸ deleteGuildSticker(guildID, stickerID, reason?): Promise<void>\n\n# Parameters\n\nNAME        TYPE\nguildID     string\nstickerID   string\nreason?     string\n\n# Returns\n\nPromise<void>\n\n# Inherited from\n\nEris.Client.deleteGuildSticker\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2250\n\n----------------------------------------\n\n\n# deleteGuildTemplate\n\n▸ deleteGuildTemplate(guildID, code): Promise<GuildTemplate>\n\n# Parameters\n\nNAME      TYPE\nguildID   string\ncode      string\n\n# Returns\n\nPromise<GuildTemplate>\n\n# Inherited from\n\nEris.Client.deleteGuildTemplate\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2251\n\n----------------------------------------\n\n\n# deleteInvite\n\n▸ deleteInvite(inviteID, reason?): Promise<void>\n\n# Parameters\n\nNAME       TYPE\ninviteID   string\nreason?    string\n\n# Returns\n\nPromise<void>\n\n# Inherited from\n\nEris.Client.deleteInvite\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2252\n\n----------------------------------------\n\n\n# deleteMessage\n\n▸ deleteMessage(channelID, messageID, reason?): Promise<void>\n\n# Parameters\n\nNAME        TYPE\nchannelID   string\nmessageID   string\nreason?     string\n\n# Returns\n\nPromise<void>\n\n# Inherited from\n\nEris.Client.deleteMessage\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2253\n\n----------------------------------------\n\n\n# deleteMessages\n\n▸ deleteMessages(channelID, messageIDs, reason?): Promise<void>\n\n# Parameters\n\nNAME         TYPE\nchannelID    string\nmessageIDs   string[]\nreason?      string\n\n# Returns\n\nPromise<void>\n\n# Inherited from\n\nEris.Client.deleteMessages\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2254\n\n----------------------------------------\n\n\n# deleteRole\n\n▸ deleteRole(guildID, roleID, reason?): Promise<void>\n\n# Parameters\n\nNAME      TYPE\nguildID   string\nroleID    string\nreason?   string\n\n# Returns\n\nPromise<void>\n\n# Inherited from\n\nEris.Client.deleteRole\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2255\n\n----------------------------------------\n\n\n# deleteSelfConnection\n\n▸ deleteSelfConnection(platform, id): Promise<void>\n\n# Parameters\n\nNAME       TYPE\nplatform   string\nid         string\n\n# Returns\n\nPromise<void>\n\n# Inherited from\n\nEris.Client.deleteSelfConnection\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2256\n\n----------------------------------------\n\n\n# deleteSelfPremiumSubscription\n\n▸ deleteSelfPremiumSubscription(): Promise<void>\n\n# Returns\n\nPromise<void>\n\n# Inherited from\n\nEris.Client.deleteSelfPremiumSubscription\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2257\n\n----------------------------------------\n\n\n# deleteStageInstance\n\n▸ deleteStageInstance(channelID): Promise<void>\n\n# Parameters\n\nNAME        TYPE\nchannelID   string\n\n# Returns\n\nPromise<void>\n\n# Inherited from\n\nEris.Client.deleteStageInstance\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2258\n\n----------------------------------------\n\n\n# deleteUserNote\n\n▸ deleteUserNote(userID): Promise<void>\n\n# Parameters\n\nNAME     TYPE\nuserID   string\n\n# Returns\n\nPromise<void>\n\n# Inherited from\n\nEris.Client.deleteUserNote\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2259\n\n----------------------------------------\n\n\n# deleteWebhook\n\n▸ deleteWebhook(webhookID, token?, reason?): Promise<void>\n\n# Parameters\n\nNAME        TYPE\nwebhookID   string\ntoken?      string\nreason?     string\n\n# Returns\n\nPromise<void>\n\n# Inherited from\n\nEris.Client.deleteWebhook\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2260\n\n----------------------------------------\n\n\n# deleteWebhookMessage\n\n▸ deleteWebhookMessage(webhookID, token, messageID): Promise<void>\n\n# Parameters\n\nNAME        TYPE\nwebhookID   string\ntoken       string\nmessageID   string\n\n# Returns\n\nPromise<void>\n\n# Inherited from\n\nEris.Client.deleteWebhookMessage\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2261\n\n----------------------------------------\n\n\n# disableSelfMFATOTP\n\n▸ disableSelfMFATOTP(code): Promise<{ token: string }>\n\n# Parameters\n\nNAME   TYPE\ncode   string\n\n# Returns\n\nPromise<{ token: string }>\n\n# Inherited from\n\nEris.Client.disableSelfMFATOTP\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2262\n\n----------------------------------------\n\n\n# disconnect\n\n▸ disconnect(options): void\n\n# Parameters\n\nNAME                 TYPE\noptions              Object\noptions.reconnect?   boolean | \"auto\"\n\n# Returns\n\nvoid\n\n# Inherited from\n\nEris.Client.disconnect\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2263\n\n----------------------------------------\n\n\n# editAFK\n\n▸ editAFK(afk): void\n\n# Parameters\n\nNAME   TYPE\nafk    boolean\n\n# Returns\n\nvoid\n\n# Inherited from\n\nEris.Client.editAFK\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2264\n\n----------------------------------------\n\n\n# editChannel\n\n▸ editChannel(channelID, options, reason?): Promise<GroupChannel | AnyGuildChannel>\n\n# Parameters\n\nNAME        TYPE\nchannelID   string\noptions     EditChannelOptions\nreason?     string\n\n# Returns\n\nPromise<GroupChannel | AnyGuildChannel>\n\n# Inherited from\n\nEris.Client.editChannel\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2265\n\n----------------------------------------\n\n\n# editChannelPermission\n\n▸ editChannelPermission(channelID, overwriteID, allow, deny, type, reason?): Promise<void>\n\n# Parameters\n\nNAME          TYPE\nchannelID     string\noverwriteID   string\nallow         number | bigint\ndeny          number | bigint\ntype          PermissionType\nreason?       string\n\n# Returns\n\nPromise<void>\n\n# Inherited from\n\nEris.Client.editChannelPermission\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2270\n\n----------------------------------------\n\n\n# editChannelPosition\n\n▸ editChannelPosition(channelID, position, options?): Promise<void>\n\n# Parameters\n\nNAME        TYPE\nchannelID   string\nposition    number\noptions?    EditChannelPositionOptions\n\n# Returns\n\nPromise<void>\n\n# Inherited from\n\nEris.Client.editChannelPosition\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2278\n\n----------------------------------------\n\n\n# editCommand\n\n▸ editCommand(commandID, command): Promise<ApplicationCommand<2 | 1 | 3>>\n\n# Parameters\n\nNAME        TYPE\ncommandID   string\ncommand     ApplicationCommandStructure\n\n# Returns\n\nPromise<ApplicationCommand<2 | 1 | 3>>\n\n# Inherited from\n\nEris.Client.editCommand\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2279\n\n----------------------------------------\n\n\n# editCommandPermissions\n\n▸ editCommandPermissions(guildID, commandID, permissions): Promise<GuildApplicationCommandPermissions>\n\n# Parameters\n\nNAME          TYPE\nguildID       string\ncommandID     string\npermissions   ApplicationCommandPermissions[]\n\n# Returns\n\nPromise<GuildApplicationCommandPermissions>\n\n# Inherited from\n\nEris.Client.editCommandPermissions\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2280\n\n----------------------------------------\n\n\n# editGuild\n\n▸ editGuild(guildID, options, reason?): Promise<Guild>\n\n# Parameters\n\nNAME      TYPE\nguildID   string\noptions   GuildOptions\nreason?   string\n\n# Returns\n\nPromise<Guild>\n\n# Inherited from\n\nEris.Client.editGuild\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2281\n\n----------------------------------------\n\n\n# editGuildCommand\n\n▸ editGuildCommand(guildID, commandID, command): Promise<ApplicationCommand<2 | 1 | 3>>\n\n# Parameters\n\nNAME        TYPE\nguildID     string\ncommandID   string\ncommand     ApplicationCommandStructure\n\n# Returns\n\nPromise<ApplicationCommand<2 | 1 | 3>>\n\n# Inherited from\n\nEris.Client.editGuildCommand\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2282\n\n----------------------------------------\n\n\n# editGuildDiscovery\n\n▸ editGuildDiscovery(guildID, options?): Promise<DiscoveryMetadata>\n\n# Parameters\n\nNAME       TYPE\nguildID    string\noptions?   DiscoveryOptions\n\n# Returns\n\nPromise<DiscoveryMetadata>\n\n# Inherited from\n\nEris.Client.editGuildDiscovery\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2283\n\n----------------------------------------\n\n\n# editGuildEmoji\n\n▸ editGuildEmoji(guildID, emojiID, options, reason?): Promise<Emoji>\n\n# Parameters\n\nNAME             TYPE\nguildID          string\nemojiID          string\noptions          Object\noptions.name?    string\noptions.roles?   string[]\nreason?          string\n\n# Returns\n\nPromise<Emoji>\n\n# Inherited from\n\nEris.Client.editGuildEmoji\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2284\n\n----------------------------------------\n\n\n# editGuildIntegration\n\n▸ editGuildIntegration(guildID, integrationID, options): Promise<void>\n\n# Parameters\n\nNAME            TYPE\nguildID         string\nintegrationID   string\noptions         IntegrationOptions\n\n# Returns\n\nPromise<void>\n\n# Inherited from\n\nEris.Client.editGuildIntegration\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2290\n\n----------------------------------------\n\n\n# editGuildMember\n\n▸ editGuildMember(guildID, memberID, options, reason?): Promise<Member>\n\n# Parameters\n\nNAME       TYPE\nguildID    string\nmemberID   string\noptions    MemberOptions\nreason?    string\n\n# Returns\n\nPromise<Member>\n\n# Inherited from\n\nEris.Client.editGuildMember\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2291\n\n----------------------------------------\n\n\n# editGuildSticker\n\n▸ editGuildSticker(guildID, stickerID, options?, reason?): Promise<Sticker>\n\n# Parameters\n\nNAME        TYPE\nguildID     string\nstickerID   string\noptions?    EditStickerOptions\nreason?     string\n\n# Returns\n\nPromise<Sticker>\n\n# Inherited from\n\nEris.Client.editGuildSticker\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2292\n\n----------------------------------------\n\n\n# editGuildTemplate\n\n▸ editGuildTemplate(guildID, code, options): Promise<GuildTemplate>\n\n# Parameters\n\nNAME      TYPE\nguildID   string\ncode      string\noptions   GuildTemplateOptions\n\n# Returns\n\nPromise<GuildTemplate>\n\n# Inherited from\n\nEris.Client.editGuildTemplate\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2293\n\n----------------------------------------\n\n\n# editGuildVanity\n\n▸ editGuildVanity(guildID, code): Promise<GuildVanity>\n\n# Parameters\n\nNAME      TYPE\nguildID   string\ncode      null | string\n\n# Returns\n\nPromise<GuildVanity>\n\n# Inherited from\n\nEris.Client.editGuildVanity\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2294\n\n----------------------------------------\n\n\n# editGuildVoiceState\n\n▸ editGuildVoiceState(guildID, options, userID?): Promise<void>\n\n# Parameters\n\nNAME      TYPE\nguildID   string\noptions   VoiceStateOptions\nuserID?   string\n\n# Returns\n\nPromise<void>\n\n# Inherited from\n\nEris.Client.editGuildVoiceState\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2295\n\n----------------------------------------\n\n\n# editGuildWelcomeScreen\n\n▸ editGuildWelcomeScreen(guildID, options): Promise<WelcomeScreen>\n\n# Parameters\n\nNAME      TYPE\nguildID   string\noptions   WelcomeScreenOptions\n\n# Returns\n\nPromise<WelcomeScreen>\n\n# Inherited from\n\nEris.Client.editGuildWelcomeScreen\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2296\n\n----------------------------------------\n\n\n# editGuildWidget\n\n▸ editGuildWidget(guildID, options): Promise<Widget>\n\n# Parameters\n\nNAME      TYPE\nguildID   string\noptions   Widget\n\n# Returns\n\nPromise<Widget>\n\n# Inherited from\n\nEris.Client.editGuildWidget\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2297\n\n----------------------------------------\n\n\n# editMessage\n\n▸ editMessage(channelID, messageID, content): Promise<Message<TextableChannel>>\n\n# Parameters\n\nNAME        TYPE\nchannelID   string\nmessageID   string\ncontent     MessageContentEdit\n\n# Returns\n\nPromise<Message<TextableChannel>>\n\n# Inherited from\n\nEris.Client.editMessage\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2298\n\n----------------------------------------\n\n\n# editNickname\n\n▸ editNickname(guildID, nick, reason?): Promise<void>\n\ndeprecated\n\n# Parameters\n\nNAME      TYPE\nguildID   string\nnick      string\nreason?   string\n\n# Returns\n\nPromise<void>\n\n# Inherited from\n\nEris.Client.editNickname\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2300\n\n----------------------------------------\n\n\n# editRole\n\n▸ editRole(guildID, roleID, options, reason?): Promise<Role>\n\n# Parameters\n\nNAME      TYPE\nguildID   string\nroleID    string\noptions   RoleOptions\nreason?   string\n\n# Returns\n\nPromise<Role>\n\n# Inherited from\n\nEris.Client.editRole\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2301\n\n----------------------------------------\n\n\n# editRolePosition\n\n▸ editRolePosition(guildID, roleID, position): Promise<void>\n\n# Parameters\n\nNAME       TYPE\nguildID    string\nroleID     string\nposition   number\n\n# Returns\n\nPromise<void>\n\n# Inherited from\n\nEris.Client.editRolePosition\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2302\n\n----------------------------------------\n\n\n# editSelf\n\n▸ editSelf(options): Promise<ExtendedUser>\n\n# Parameters\n\nNAME                TYPE\noptions             Object\noptions.avatar?     string\noptions.username?   string\n\n# Returns\n\nPromise<ExtendedUser>\n\n# Inherited from\n\nEris.Client.editSelf\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2303\n\n----------------------------------------\n\n\n# editSelfConnection\n\n▸ editSelfConnection(platform, id, data): Promise<Connection>\n\n# Parameters\n\nNAME              TYPE\nplatform          string\nid                string\ndata              Object\ndata.friendSync   boolean\ndata.visibility   number\n\n# Returns\n\nPromise<Connection>\n\n# Inherited from\n\nEris.Client.editSelfConnection\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2304\n\n----------------------------------------\n\n\n# editSelfSettings\n\n▸ editSelfSettings(data): Promise<UserSettings>\n\n# Parameters\n\nNAME   TYPE\ndata   UserSettings\n\n# Returns\n\nPromise<UserSettings>\n\n# Inherited from\n\nEris.Client.editSelfSettings\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2309\n\n----------------------------------------\n\n\n# editStageInstance\n\n▸ editStageInstance(channelID, options): Promise<StageInstance>\n\n# Parameters\n\nNAME        TYPE\nchannelID   string\noptions     StageInstanceOptions\n\n# Returns\n\nPromise<StageInstance>\n\n# Inherited from\n\nEris.Client.editStageInstance\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2310\n\n----------------------------------------\n\n\n# editStatus\n\n▸ editStatus(status, activities?): void\n\n# Parameters\n\nNAME          TYPE\nstatus        Status\nactivities?   ActivityPartial<BotActivityType> |\n              ActivityPartial<BotActivityType>[]\n\n# Returns\n\nvoid\n\n# Inherited from\n\nEris.Client.editStatus\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2311\n\n▸ editStatus(activities?): void\n\n# Parameters\n\nNAME          TYPE\nactivities?   ActivityPartial<BotActivityType> |\n              ActivityPartial<BotActivityType>[]\n\n# Returns\n\nvoid\n\n# Inherited from\n\nEris.Client.editStatus\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2312\n\n----------------------------------------\n\n\n# editUserNote\n\n▸ editUserNote(userID, note): Promise<void>\n\n# Parameters\n\nNAME     TYPE\nuserID   string\nnote     string\n\n# Returns\n\nPromise<void>\n\n# Inherited from\n\nEris.Client.editUserNote\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2313\n\n----------------------------------------\n\n\n# editWebhook\n\n▸ editWebhook(webhookID, options, token?, reason?): Promise<Webhook>\n\n# Parameters\n\nNAME        TYPE\nwebhookID   string\noptions     WebhookOptions\ntoken?      string\nreason?     string\n\n# Returns\n\nPromise<Webhook>\n\n# Inherited from\n\nEris.Client.editWebhook\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2314\n\n----------------------------------------\n\n\n# editWebhookMessage\n\n▸ editWebhookMessage(webhookID, token, messageID, options): Promise<Message<GuildTextableChannel>>\n\n# Parameters\n\nNAME        TYPE\nwebhookID   string\ntoken       string\nmessageID   string\noptions     MessageWebhookContent\n\n# Returns\n\nPromise<Message<GuildTextableChannel>>\n\n# Inherited from\n\nEris.Client.editWebhookMessage\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2320\n\n----------------------------------------\n\n\n# emit\n\n▸ emit<K>(event, ...args): boolean\n\n# Type parameters\n\nNAME   TYPE\nK      extends keyof ClientEvents\n\n# Parameters\n\nNAME      TYPE\nevent     K\n...args   ClientEvents[K]\n\n# Returns\n\nboolean\n\n# Inherited from\n\nEris.Client.emit\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2326\n\n▸ emit(event, ...args): boolean\n\n# Parameters\n\nNAME      TYPE\nevent     string\n...args   any[]\n\n# Returns\n\nboolean\n\n# Inherited from\n\nEris.Client.emit\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2327\n\n----------------------------------------\n\n\n# enableSelfMFATOTP\n\n▸ enableSelfMFATOTP(secret, code): Promise<{ backup_codes: { code: string ; consumed: boolean }[] ; token: string }>\n\n# Parameters\n\nNAME     TYPE\nsecret   string\ncode     string\n\n# Returns\n\nPromise<{ backup_codes: { code: string ; consumed: boolean }[] ; token: string }>\n\n# Inherited from\n\nEris.Client.enableSelfMFATOTP\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2328\n\n----------------------------------------\n\n\n# eventNames\n\n▸ eventNames(): (string | symbol)[]\n\nReturns an array listing the events for which the emitter has registered listeners. The values in the array are strings or Symbols.\n\nconst EventEmitter = require('events');\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => {});\nmyEE.on('bar', () => {});\n\nconst sym = Symbol('symbol');\nmyEE.on(sym, () => {});\n\nconsole.log(myEE.eventNames());\n// Prints: [ 'foo', 'bar', Symbol(symbol) ]\n\n\nsince v6.0.0\n\n# Returns\n\n(string | symbol)[]\n\n# Inherited from\n\nEris.Client.eventNames\n\n# Defined in\n\nnode_modules/@types/node/events.d.ts:642\n\n----------------------------------------\n\n\n# executeSlackWebhook\n\n▸ executeSlackWebhook(webhookID, token, options): Promise<void>\n\n# Parameters\n\nNAME        TYPE\nwebhookID   string\ntoken       string\noptions     Record<string, unknown> & { auth?: boolean ; threadID?:\n            string }\n\n# Returns\n\nPromise<void>\n\n# Inherited from\n\nEris.Client.executeSlackWebhook\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2332\n\n▸ executeSlackWebhook(webhookID, token, options): Promise<Message<GuildTextableChannel>>\n\n# Parameters\n\nNAME        TYPE\nwebhookID   string\ntoken       string\noptions     Record<string, unknown> & { auth?: boolean ; threadID?:\n            string ; wait: true }\n\n# Returns\n\nPromise<Message<GuildTextableChannel>>\n\n# Inherited from\n\nEris.Client.executeSlackWebhook\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2333\n\n----------------------------------------\n\n\n# executeWebhook\n\n▸ executeWebhook(webhookID, token, options): Promise<Message<GuildTextableChannel>>\n\n# Parameters\n\nNAME        TYPE\nwebhookID   string\ntoken       string\noptions     WebhookPayload & { wait: true }\n\n# Returns\n\nPromise<Message<GuildTextableChannel>>\n\n# Inherited from\n\nEris.Client.executeWebhook\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2334\n\n▸ executeWebhook(webhookID, token, options): Promise<void>\n\n# Parameters\n\nNAME        TYPE\nwebhookID   string\ntoken       string\noptions     WebhookPayload\n\n# Returns\n\nPromise<void>\n\n# Inherited from\n\nEris.Client.executeWebhook\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2335\n\n----------------------------------------\n\n\n# fetchPrefix\n\n▸ fetchPrefix(message): undefined | string\n\n# Parameters\n\nNAME      TYPE\nmessage   Message<TextableChannel>\n\n# Returns\n\nundefined | string\n\n# Defined in\n\nsrc/CofoClient.ts:35\n\n----------------------------------------\n\n\n# followChannel\n\n▸ followChannel(channelID, webhookChannelID): Promise<ChannelFollow>\n\n# Parameters\n\nNAME               TYPE\nchannelID          string\nwebhookChannelID   string\n\n# Returns\n\nPromise<ChannelFollow>\n\n# Inherited from\n\nEris.Client.followChannel\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2336\n\n----------------------------------------\n\n\n# getActiveGuildThreads\n\n▸ getActiveGuildThreads(guildID): Promise<ListedGuildThreads<AnyThreadChannel>>\n\n# Parameters\n\nNAME      TYPE\nguildID   string\n\n# Returns\n\nPromise<ListedGuildThreads<AnyThreadChannel>>\n\n# Inherited from\n\nEris.Client.getActiveGuildThreads\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2337\n\n----------------------------------------\n\n\n# getActiveThreads\n\n▸ getActiveThreads(channelID): Promise<ListedChannelThreads<AnyThreadChannel>>\n\ndeprecated\n\n# Parameters\n\nNAME        TYPE\nchannelID   string\n\n# Returns\n\nPromise<ListedChannelThreads<AnyThreadChannel>>\n\n# Inherited from\n\nEris.Client.getActiveThreads\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2339\n\n----------------------------------------\n\n\n# getArchivedThreads\n\n▸ getArchivedThreads(channelID, type, options?): Promise<ListedChannelThreads<PrivateThreadChannel>>\n\n# Parameters\n\nNAME        TYPE\nchannelID   string\ntype        \"private\"\noptions?    GetArchivedThreadsOptions\n\n# Returns\n\nPromise<ListedChannelThreads<PrivateThreadChannel>>\n\n# Inherited from\n\nEris.Client.getArchivedThreads\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2340\n\n▸ getArchivedThreads(channelID, type, options?): Promise<ListedChannelThreads<PublicThreadChannel>>\n\n# Parameters\n\nNAME        TYPE\nchannelID   string\ntype        \"public\"\noptions?    GetArchivedThreadsOptions\n\n# Returns\n\nPromise<ListedChannelThreads<PublicThreadChannel>>\n\n# Inherited from\n\nEris.Client.getArchivedThreads\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2341\n\n----------------------------------------\n\n\n# getBotGateway\n\n▸ getBotGateway(): Promise<{ session_start_limit: { max_concurrency: number ; remaining: number ; reset_after: number ; total: number } ; shards: number ; url: string }>\n\n# Returns\n\nPromise<{ session_start_limit: { max_concurrency: number ; remaining: number ; reset_after: number ; total: number } ; shards: number ; url: string }>\n\n# Inherited from\n\nEris.Client.getBotGateway\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2342\n\n----------------------------------------\n\n\n# getChannel\n\n▸ getChannel(channelID): AnyChannel\n\n# Parameters\n\nNAME        TYPE\nchannelID   string\n\n# Returns\n\nAnyChannel\n\n# Inherited from\n\nEris.Client.getChannel\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2343\n\n----------------------------------------\n\n\n# getChannelInvites\n\n▸ getChannelInvites(channelID): Promise<Invite<\"withMetadata\", InviteChannel>[]>\n\n# Parameters\n\nNAME        TYPE\nchannelID   string\n\n# Returns\n\nPromise<Invite<\"withMetadata\", InviteChannel>[]>\n\n# Inherited from\n\nEris.Client.getChannelInvites\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2344\n\n----------------------------------------\n\n\n# getChannelWebhooks\n\n▸ getChannelWebhooks(channelID): Promise<Webhook[]>\n\n# Parameters\n\nNAME        TYPE\nchannelID   string\n\n# Returns\n\nPromise<Webhook[]>\n\n# Inherited from\n\nEris.Client.getChannelWebhooks\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2345\n\n----------------------------------------\n\n\n# getCommand\n\n▸ getCommand(commandID): Promise<ApplicationCommand<2 | 1 | 3>>\n\n# Parameters\n\nNAME        TYPE\ncommandID   string\n\n# Returns\n\nPromise<ApplicationCommand<2 | 1 | 3>>\n\n# Inherited from\n\nEris.Client.getCommand\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2346\n\n----------------------------------------\n\n\n# getCommandPermissions\n\n▸ getCommandPermissions(guildID, commandID): Promise<GuildApplicationCommandPermissions>\n\n# Parameters\n\nNAME        TYPE\nguildID     string\ncommandID   string\n\n# Returns\n\nPromise<GuildApplicationCommandPermissions>\n\n# Inherited from\n\nEris.Client.getCommandPermissions\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2347\n\n----------------------------------------\n\n\n# getCommands\n\n▸ getCommands(): Promise<ApplicationCommand<2 | 1 | 3>[]>\n\n# Returns\n\nPromise<ApplicationCommand<2 | 1 | 3>[]>\n\n# Inherited from\n\nEris.Client.getCommands\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2348\n\n----------------------------------------\n\n\n# getDMChannel\n\n▸ getDMChannel(userID): Promise<PrivateChannel>\n\n# Parameters\n\nNAME     TYPE\nuserID   string\n\n# Returns\n\nPromise<PrivateChannel>\n\n# Inherited from\n\nEris.Client.getDMChannel\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2350\n\n----------------------------------------\n\n\n# getDiscoveryCategories\n\n▸ getDiscoveryCategories(): Promise<DiscoveryCategory[]>\n\n# Returns\n\nPromise<DiscoveryCategory[]>\n\n# Inherited from\n\nEris.Client.getDiscoveryCategories\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2349\n\n----------------------------------------\n\n\n# getEmojiGuild\n\n▸ getEmojiGuild(emojiID): Promise<Guild>\n\n# Parameters\n\nNAME      TYPE\nemojiID   string\n\n# Returns\n\nPromise<Guild>\n\n# Inherited from\n\nEris.Client.getEmojiGuild\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2351\n\n----------------------------------------\n\n\n# getGateway\n\n▸ getGateway(): Promise<{ url: string }>\n\n# Returns\n\nPromise<{ url: string }>\n\n# Inherited from\n\nEris.Client.getGateway\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2352\n\n----------------------------------------\n\n\n# getGuildAuditLog\n\n▸ getGuildAuditLog(guildID, options?): Promise<GuildAuditLog>\n\n# Parameters\n\nNAME       TYPE\nguildID    string\noptions?   GetGuildAuditLogOptions\n\n# Returns\n\nPromise<GuildAuditLog>\n\n# Inherited from\n\nEris.Client.getGuildAuditLog\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2353\n\n----------------------------------------\n\n\n# getGuildAuditLogs\n\n▸ getGuildAuditLogs(guildID, limit?, before?, actionType?, userID?): Promise<GuildAuditLog>\n\ndeprecated\n\n# Parameters\n\nNAME          TYPE\nguildID       string\nlimit?        number\nbefore?       string\nactionType?   number\nuserID?       string\n\n# Returns\n\nPromise<GuildAuditLog>\n\n# Inherited from\n\nEris.Client.getGuildAuditLogs\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2355\n\n----------------------------------------\n\n\n# getGuildBan\n\n▸ getGuildBan(guildID, userID): Promise<{ reason?: string ; user: User }>\n\n# Parameters\n\nNAME      TYPE\nguildID   string\nuserID    string\n\n# Returns\n\nPromise<{ reason?: string ; user: User }>\n\n# Inherited from\n\nEris.Client.getGuildBan\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2356\n\n----------------------------------------\n\n\n# getGuildBans\n\n▸ getGuildBans(guildID): Promise<{ reason?: string ; user: User }[]>\n\n# Parameters\n\nNAME      TYPE\nguildID   string\n\n# Returns\n\nPromise<{ reason?: string ; user: User }[]>\n\n# Inherited from\n\nEris.Client.getGuildBans\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2357\n\n----------------------------------------\n\n\n# getGuildCommand\n\n▸ getGuildCommand(guildID, commandID): Promise<ApplicationCommand<2 | 1 | 3>>\n\n# Parameters\n\nNAME        TYPE\nguildID     string\ncommandID   string\n\n# Returns\n\nPromise<ApplicationCommand<2 | 1 | 3>>\n\n# Inherited from\n\nEris.Client.getGuildCommand\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2358\n\n----------------------------------------\n\n\n# getGuildCommandPermissions\n\n▸ getGuildCommandPermissions(guildID): Promise<GuildApplicationCommandPermissions[]>\n\n# Parameters\n\nNAME      TYPE\nguildID   string\n\n# Returns\n\nPromise<GuildApplicationCommandPermissions[]>\n\n# Inherited from\n\nEris.Client.getGuildCommandPermissions\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2359\n\n----------------------------------------\n\n\n# getGuildCommands\n\n▸ getGuildCommands(guildID): Promise<ApplicationCommand<2 | 1 | 3>[]>\n\n# Parameters\n\nNAME      TYPE\nguildID   string\n\n# Returns\n\nPromise<ApplicationCommand<2 | 1 | 3>[]>\n\n# Inherited from\n\nEris.Client.getGuildCommands\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2360\n\n----------------------------------------\n\n\n# getGuildDiscovery\n\n▸ getGuildDiscovery(guildID): Promise<DiscoveryMetadata>\n\n# Parameters\n\nNAME      TYPE\nguildID   string\n\n# Returns\n\nPromise<DiscoveryMetadata>\n\n# Inherited from\n\nEris.Client.getGuildDiscovery\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2361\n\n----------------------------------------\n\n\n# getGuildEmbed\n\n▸ getGuildEmbed(guildID): Promise<Widget>\n\ndeprecated\n\n# Parameters\n\nNAME      TYPE\nguildID   string\n\n# Returns\n\nPromise<Widget>\n\n# Inherited from\n\nEris.Client.getGuildEmbed\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2363\n\n----------------------------------------\n\n\n# getGuildIntegrations\n\n▸ getGuildIntegrations(guildID): Promise<GuildIntegration[]>\n\n# Parameters\n\nNAME      TYPE\nguildID   string\n\n# Returns\n\nPromise<GuildIntegration[]>\n\n# Inherited from\n\nEris.Client.getGuildIntegrations\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2364\n\n----------------------------------------\n\n\n# getGuildInvites\n\n▸ getGuildInvites(guildID): Promise<Invite<\"withMetadata\", InviteChannel>[]>\n\n# Parameters\n\nNAME      TYPE\nguildID   string\n\n# Returns\n\nPromise<Invite<\"withMetadata\", InviteChannel>[]>\n\n# Inherited from\n\nEris.Client.getGuildInvites\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2365\n\n----------------------------------------\n\n\n# getGuildPreview\n\n▸ getGuildPreview(guildID): Promise<GuildPreview>\n\n# Parameters\n\nNAME      TYPE\nguildID   string\n\n# Returns\n\nPromise<GuildPreview>\n\n# Inherited from\n\nEris.Client.getGuildPreview\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2366\n\n----------------------------------------\n\n\n# getGuildTemplate\n\n▸ getGuildTemplate(code): Promise<GuildTemplate>\n\n# Parameters\n\nNAME   TYPE\ncode   string\n\n# Returns\n\nPromise<GuildTemplate>\n\n# Inherited from\n\nEris.Client.getGuildTemplate\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2367\n\n----------------------------------------\n\n\n# getGuildTemplates\n\n▸ getGuildTemplates(guildID): Promise<GuildTemplate[]>\n\n# Parameters\n\nNAME      TYPE\nguildID   string\n\n# Returns\n\nPromise<GuildTemplate[]>\n\n# Inherited from\n\nEris.Client.getGuildTemplates\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2368\n\n----------------------------------------\n\n\n# getGuildVanity\n\n▸ getGuildVanity(guildID): Promise<GuildVanity>\n\n# Parameters\n\nNAME      TYPE\nguildID   string\n\n# Returns\n\nPromise<GuildVanity>\n\n# Inherited from\n\nEris.Client.getGuildVanity\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2369\n\n----------------------------------------\n\n\n# getGuildWebhooks\n\n▸ getGuildWebhooks(guildID): Promise<Webhook[]>\n\n# Parameters\n\nNAME      TYPE\nguildID   string\n\n# Returns\n\nPromise<Webhook[]>\n\n# Inherited from\n\nEris.Client.getGuildWebhooks\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2370\n\n----------------------------------------\n\n\n# getGuildWelcomeScreen\n\n▸ getGuildWelcomeScreen(guildID): Promise<WelcomeScreen>\n\n# Parameters\n\nNAME      TYPE\nguildID   string\n\n# Returns\n\nPromise<WelcomeScreen>\n\n# Inherited from\n\nEris.Client.getGuildWelcomeScreen\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2371\n\n----------------------------------------\n\n\n# getGuildWidget\n\n▸ getGuildWidget(guildID): Promise<WidgetData>\n\n# Parameters\n\nNAME      TYPE\nguildID   string\n\n# Returns\n\nPromise<WidgetData>\n\n# Inherited from\n\nEris.Client.getGuildWidget\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2372\n\n----------------------------------------\n\n\n# getGuildWidgetSettings\n\n▸ getGuildWidgetSettings(guildID): Promise<Widget>\n\n# Parameters\n\nNAME      TYPE\nguildID   string\n\n# Returns\n\nPromise<Widget>\n\n# Inherited from\n\nEris.Client.getGuildWidgetSettings\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2373\n\n----------------------------------------\n\n\n# getInvite\n\n▸ getInvite(inviteID, withCounts?): Promise<Invite<\"withoutCount\", InviteChannel>>\n\n# Parameters\n\nNAME          TYPE\ninviteID      string\nwithCounts?   false\n\n# Returns\n\nPromise<Invite<\"withoutCount\", InviteChannel>>\n\n# Inherited from\n\nEris.Client.getInvite\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2374\n\n▸ getInvite(inviteID, withCounts): Promise<Invite<\"withCount\", InviteChannel>>\n\n# Parameters\n\nNAME         TYPE\ninviteID     string\nwithCounts   true\n\n# Returns\n\nPromise<Invite<\"withCount\", InviteChannel>>\n\n# Inherited from\n\nEris.Client.getInvite\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2375\n\n----------------------------------------\n\n\n# getJoinedPrivateArchivedThreads\n\n▸ getJoinedPrivateArchivedThreads(channelID, options?): Promise<ListedChannelThreads<PrivateThreadChannel>>\n\n# Parameters\n\nNAME        TYPE\nchannelID   string\noptions?    GetArchivedThreadsOptions\n\n# Returns\n\nPromise<ListedChannelThreads<PrivateThreadChannel>>\n\n# Inherited from\n\nEris.Client.getJoinedPrivateArchivedThreads\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2376\n\n----------------------------------------\n\n\n# getMaxListeners\n\n▸ getMaxListeners(): number\n\nReturns the current max listener value for the EventEmitter which is either set by emitter.setMaxListeners(n) or defaults to defaultMaxListeners.\n\nsince v1.0.0\n\n# Returns\n\nnumber\n\n# Inherited from\n\nEris.Client.getMaxListeners\n\n# Defined in\n\nnode_modules/@types/node/events.d.ts:499\n\n----------------------------------------\n\n\n# getMessage\n\n▸ getMessage(channelID, messageID): Promise<Message<TextableChannel>>\n\n# Parameters\n\nNAME        TYPE\nchannelID   string\nmessageID   string\n\n# Returns\n\nPromise<Message<TextableChannel>>\n\n# Inherited from\n\nEris.Client.getMessage\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2377\n\n----------------------------------------\n\n\n# getMessageReaction\n\n▸ getMessageReaction(channelID, messageID, reaction, options?): Promise<User[]>\n\ndeprecated\n\n# Parameters\n\nNAME        TYPE\nchannelID   string\nmessageID   string\nreaction    string\noptions?    GetMessageReactionOptions\n\n# Returns\n\nPromise<User[]>\n\n# Inherited from\n\nEris.Client.getMessageReaction\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2378\n\n▸ getMessageReaction(channelID, messageID, reaction, limit?, before?, after?): Promise<User[]>\n\ndeprecated\n\n# Parameters\n\nNAME        TYPE\nchannelID   string\nmessageID   string\nreaction    string\nlimit?      number\nbefore?     string\nafter?      string\n\n# Returns\n\nPromise<User[]>\n\n# Inherited from\n\nEris.Client.getMessageReaction\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2380\n\n----------------------------------------\n\n\n# getMessages\n\n▸ getMessages(channelID, options?): Promise<Message<TextableChannel>[]>\n\ndeprecated\n\n# Parameters\n\nNAME        TYPE\nchannelID   string\noptions?    GetMessagesOptions\n\n# Returns\n\nPromise<Message<TextableChannel>[]>\n\n# Inherited from\n\nEris.Client.getMessages\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2381\n\n▸ getMessages(channelID, limit?, before?, after?, around?): Promise<Message<TextableChannel>[]>\n\ndeprecated\n\n# Parameters\n\nNAME        TYPE\nchannelID   string\nlimit?      number\nbefore?     string\nafter?      string\naround?     string\n\n# Returns\n\nPromise<Message<TextableChannel>[]>\n\n# Inherited from\n\nEris.Client.getMessages\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2383\n\n----------------------------------------\n\n\n# getNitroStickerPacks\n\n▸ getNitroStickerPacks(): Promise<{ sticker_packs: StickerPack[] }>\n\n# Returns\n\nPromise<{ sticker_packs: StickerPack[] }>\n\n# Inherited from\n\nEris.Client.getNitroStickerPacks\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2384\n\n----------------------------------------\n\n\n# getOAuthApplication\n\n▸ getOAuthApplication(appID?): Promise<OAuthApplicationInfo>\n\n# Parameters\n\nNAME     TYPE\nappID?   string\n\n# Returns\n\nPromise<OAuthApplicationInfo>\n\n# Inherited from\n\nEris.Client.getOAuthApplication\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2385\n\n----------------------------------------\n\n\n# getPins\n\n▸ getPins(channelID): Promise<Message<TextableChannel>[]>\n\n# Parameters\n\nNAME        TYPE\nchannelID   string\n\n# Returns\n\nPromise<Message<TextableChannel>[]>\n\n# Inherited from\n\nEris.Client.getPins\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2386\n\n----------------------------------------\n\n\n# getPruneCount\n\n▸ getPruneCount(guildID, options?): Promise<number>\n\n# Parameters\n\nNAME       TYPE\nguildID    string\noptions?   GetPruneOptions\n\n# Returns\n\nPromise<number>\n\n# Inherited from\n\nEris.Client.getPruneCount\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2387\n\n----------------------------------------\n\n\n# getRESTChannel\n\n▸ getRESTChannel(channelID): Promise<AnyChannel>\n\n# Parameters\n\nNAME        TYPE\nchannelID   string\n\n# Returns\n\nPromise<AnyChannel>\n\n# Inherited from\n\nEris.Client.getRESTChannel\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2388\n\n----------------------------------------\n\n\n# getRESTGuild\n\n▸ getRESTGuild(guildID, withCounts?): Promise<Guild>\n\n# Parameters\n\nNAME          TYPE\nguildID       string\nwithCounts?   boolean\n\n# Returns\n\nPromise<Guild>\n\n# Inherited from\n\nEris.Client.getRESTGuild\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2389\n\n----------------------------------------\n\n\n# getRESTGuildChannels\n\n▸ getRESTGuildChannels(guildID): Promise<AnyGuildChannel[]>\n\n# Parameters\n\nNAME      TYPE\nguildID   string\n\n# Returns\n\nPromise<AnyGuildChannel[]>\n\n# Inherited from\n\nEris.Client.getRESTGuildChannels\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2390\n\n----------------------------------------\n\n\n# getRESTGuildEmoji\n\n▸ getRESTGuildEmoji(guildID, emojiID): Promise<Emoji>\n\n# Parameters\n\nNAME      TYPE\nguildID   string\nemojiID   string\n\n# Returns\n\nPromise<Emoji>\n\n# Inherited from\n\nEris.Client.getRESTGuildEmoji\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2391\n\n----------------------------------------\n\n\n# getRESTGuildEmojis\n\n▸ getRESTGuildEmojis(guildID): Promise<Emoji[]>\n\n# Parameters\n\nNAME      TYPE\nguildID   string\n\n# Returns\n\nPromise<Emoji[]>\n\n# Inherited from\n\nEris.Client.getRESTGuildEmojis\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2392\n\n----------------------------------------\n\n\n# getRESTGuildMember\n\n▸ getRESTGuildMember(guildID, memberID): Promise<Member>\n\n# Parameters\n\nNAME       TYPE\nguildID    string\nmemberID   string\n\n# Returns\n\nPromise<Member>\n\n# Inherited from\n\nEris.Client.getRESTGuildMember\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2393\n\n----------------------------------------\n\n\n# getRESTGuildMembers\n\n▸ getRESTGuildMembers(guildID, options?): Promise<Member[]>\n\ndeprecated\n\n# Parameters\n\nNAME       TYPE\nguildID    string\noptions?   GetRESTGuildMembersOptions\n\n# Returns\n\nPromise<Member[]>\n\n# Inherited from\n\nEris.Client.getRESTGuildMembers\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2394\n\n▸ getRESTGuildMembers(guildID, limit?, after?): Promise<Member[]>\n\ndeprecated\n\n# Parameters\n\nNAME      TYPE\nguildID   string\nlimit?    number\nafter?    string\n\n# Returns\n\nPromise<Member[]>\n\n# Inherited from\n\nEris.Client.getRESTGuildMembers\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2396\n\n----------------------------------------\n\n\n# getRESTGuildRoles\n\n▸ getRESTGuildRoles(guildID): Promise<Role[]>\n\n# Parameters\n\nNAME      TYPE\nguildID   string\n\n# Returns\n\nPromise<Role[]>\n\n# Inherited from\n\nEris.Client.getRESTGuildRoles\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2397\n\n----------------------------------------\n\n\n# getRESTGuildSticker\n\n▸ getRESTGuildSticker(guildID, stickerID): Promise<Sticker>\n\n# Parameters\n\nNAME        TYPE\nguildID     string\nstickerID   string\n\n# Returns\n\nPromise<Sticker>\n\n# Inherited from\n\nEris.Client.getRESTGuildSticker\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2401\n\n----------------------------------------\n\n\n# getRESTGuildStickers\n\n▸ getRESTGuildStickers(guildID): Promise<Sticker[]>\n\n# Parameters\n\nNAME      TYPE\nguildID   string\n\n# Returns\n\nPromise<Sticker[]>\n\n# Inherited from\n\nEris.Client.getRESTGuildStickers\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2402\n\n----------------------------------------\n\n\n# getRESTGuilds\n\n▸ getRESTGuilds(options?): Promise<Guild[]>\n\ndeprecated\n\n# Parameters\n\nNAME       TYPE\noptions?   GetRESTGuildsOptions\n\n# Returns\n\nPromise<Guild[]>\n\n# Inherited from\n\nEris.Client.getRESTGuilds\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2398\n\n▸ getRESTGuilds(limit?, before?, after?): Promise<Guild[]>\n\ndeprecated\n\n# Parameters\n\nNAME      TYPE\nlimit?    number\nbefore?   string\nafter?    string\n\n# Returns\n\nPromise<Guild[]>\n\n# Inherited from\n\nEris.Client.getRESTGuilds\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2400\n\n----------------------------------------\n\n\n# getRESTSticker\n\n▸ getRESTSticker(stickerID): Promise<Sticker>\n\n# Parameters\n\nNAME        TYPE\nstickerID   string\n\n# Returns\n\nPromise<Sticker>\n\n# Inherited from\n\nEris.Client.getRESTSticker\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2403\n\n----------------------------------------\n\n\n# getRESTUser\n\n▸ getRESTUser(userID): Promise<User>\n\n# Parameters\n\nNAME     TYPE\nuserID   string\n\n# Returns\n\nPromise<User>\n\n# Inherited from\n\nEris.Client.getRESTUser\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2404\n\n----------------------------------------\n\n\n# getSelf\n\n▸ getSelf(): Promise<ExtendedUser>\n\n# Returns\n\nPromise<ExtendedUser>\n\n# Inherited from\n\nEris.Client.getSelf\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2405\n\n----------------------------------------\n\n\n# getSelfBilling\n\n▸ getSelfBilling(): Promise<{ payment_gateway?: string ; payment_source?: { brand: string ; expires_month: number ; expires_year: number ; invalid: boolean ; last_4: number ; type: string } ; premium_subscription?: { canceled_at?: string ; created_at: string ; current_period_end?: string ; current_period_start?: string ; ended_at?: string ; plan: string ; status: number } }>\n\n# Returns\n\nPromise<{ payment_gateway?: string ; payment_source?: { brand: string ; expires_month: number ; expires_year: number ; invalid: boolean ; last_4: number ; type: string } ; premium_subscription?: { canceled_at?: string ; created_at: string ; current_period_end?: string ; current_period_start?: string ; ended_at?: string ; plan: string ; status: number } }>\n\n# Inherited from\n\nEris.Client.getSelfBilling\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2406\n\n----------------------------------------\n\n\n# getSelfConnections\n\n▸ getSelfConnections(): Promise<Connection[]>\n\n# Returns\n\nPromise<Connection[]>\n\n# Inherited from\n\nEris.Client.getSelfConnections\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2426\n\n----------------------------------------\n\n\n# getSelfMFACodes\n\n▸ getSelfMFACodes(password, regenerate?): Promise<{ backup_codes: { code: string ; consumed: boolean }[] }>\n\n# Parameters\n\nNAME          TYPE\npassword      string\nregenerate?   boolean\n\n# Returns\n\nPromise<{ backup_codes: { code: string ; consumed: boolean }[] }>\n\n# Inherited from\n\nEris.Client.getSelfMFACodes\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2427\n\n----------------------------------------\n\n\n# getSelfPayments\n\n▸ getSelfPayments(): Promise<{ amount: number ; amount_refunded: number ; created_at: string ; currency: string ; description: string ; status: number }[]>\n\n# Returns\n\nPromise<{ amount: number ; amount_refunded: number ; created_at: string ; currency: string ; description: string ; status: number }[]>\n\n# Inherited from\n\nEris.Client.getSelfPayments\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2431\n\n----------------------------------------\n\n\n# getSelfSettings\n\n▸ getSelfSettings(): Promise<UserSettings>\n\n# Returns\n\nPromise<UserSettings>\n\n# Inherited from\n\nEris.Client.getSelfSettings\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2439\n\n----------------------------------------\n\n\n# getStageInstance\n\n▸ getStageInstance(channelID): Promise<StageInstance>\n\n# Parameters\n\nNAME        TYPE\nchannelID   string\n\n# Returns\n\nPromise<StageInstance>\n\n# Inherited from\n\nEris.Client.getStageInstance\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2440\n\n----------------------------------------\n\n\n# getThreadMembers\n\n▸ getThreadMembers(channelID): Promise<ThreadMember[]>\n\n# Parameters\n\nNAME        TYPE\nchannelID   string\n\n# Returns\n\nPromise<ThreadMember[]>\n\n# Inherited from\n\nEris.Client.getThreadMembers\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2441\n\n----------------------------------------\n\n\n# getUserProfile\n\n▸ getUserProfile(userID): Promise<UserProfile>\n\n# Parameters\n\nNAME     TYPE\nuserID   string\n\n# Returns\n\nPromise<UserProfile>\n\n# Inherited from\n\nEris.Client.getUserProfile\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2442\n\n----------------------------------------\n\n\n# getVoiceRegions\n\n▸ getVoiceRegions(guildID?): Promise<VoiceRegion[]>\n\n# Parameters\n\nNAME       TYPE\nguildID?   string\n\n# Returns\n\nPromise<VoiceRegion[]>\n\n# Inherited from\n\nEris.Client.getVoiceRegions\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2443\n\n----------------------------------------\n\n\n# getWebhook\n\n▸ getWebhook(webhookID, token?): Promise<Webhook>\n\n# Parameters\n\nNAME        TYPE\nwebhookID   string\ntoken?      string\n\n# Returns\n\nPromise<Webhook>\n\n# Inherited from\n\nEris.Client.getWebhook\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2444\n\n----------------------------------------\n\n\n# getWebhookMessage\n\n▸ getWebhookMessage(webhookID, token, messageID): Promise<Message<GuildTextableChannel>>\n\n# Parameters\n\nNAME        TYPE\nwebhookID   string\ntoken       string\nmessageID   string\n\n# Returns\n\nPromise<Message<GuildTextableChannel>>\n\n# Inherited from\n\nEris.Client.getWebhookMessage\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2445\n\n----------------------------------------\n\n\n# joinThread\n\n▸ joinThread(channelID, userID?): Promise<void>\n\n# Parameters\n\nNAME        TYPE\nchannelID   string\nuserID?     string\n\n# Returns\n\nPromise<void>\n\n# Inherited from\n\nEris.Client.joinThread\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2446\n\n----------------------------------------\n\n\n# joinVoiceChannel\n\n▸ joinVoiceChannel(channelID, options?): Promise<VoiceConnection>\n\n# Parameters\n\nNAME        TYPE\nchannelID   string\noptions?    JoinVoiceChannelOptions\n\n# Returns\n\nPromise<VoiceConnection>\n\n# Inherited from\n\nEris.Client.joinVoiceChannel\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2447\n\n----------------------------------------\n\n\n# kickGuildMember\n\n▸ kickGuildMember(guildID, userID, reason?): Promise<void>\n\n# Parameters\n\nNAME      TYPE\nguildID   string\nuserID    string\nreason?   string\n\n# Returns\n\nPromise<void>\n\n# Inherited from\n\nEris.Client.kickGuildMember\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2448\n\n----------------------------------------\n\n\n# leaveGuild\n\n▸ leaveGuild(guildID): Promise<void>\n\n# Parameters\n\nNAME      TYPE\nguildID   string\n\n# Returns\n\nPromise<void>\n\n# Inherited from\n\nEris.Client.leaveGuild\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2449\n\n----------------------------------------\n\n\n# leaveThread\n\n▸ leaveThread(channelID, userID?): Promise<void>\n\n# Parameters\n\nNAME        TYPE\nchannelID   string\nuserID?     string\n\n# Returns\n\nPromise<void>\n\n# Inherited from\n\nEris.Client.leaveThread\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2450\n\n----------------------------------------\n\n\n# leaveVoiceChannel\n\n▸ leaveVoiceChannel(channelID): void\n\n# Parameters\n\nNAME        TYPE\nchannelID   string\n\n# Returns\n\nvoid\n\n# Inherited from\n\nEris.Client.leaveVoiceChannel\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2451\n\n----------------------------------------\n\n\n# listenerCount\n\n▸ listenerCount(eventName): number\n\nReturns the number of listeners listening to the event named eventName.\n\nsince v3.2.0\n\n# Parameters\n\nNAME        TYPE              DESCRIPTION\neventName   string | symbol   The name of the event being listened for\n\n# Returns\n\nnumber\n\n# Inherited from\n\nEris.Client.listenerCount\n\n# Defined in\n\nnode_modules/@types/node/events.d.ts:589\n\n----------------------------------------\n\n\n# listeners\n\n▸ listeners(eventName): Function[]\n\nReturns a copy of the array of listeners for the event named eventName.\n\nserver.on('connection', (stream) => {\n  console.log('someone connected!');\n});\nconsole.log(util.inspect(server.listeners('connection')));\n// Prints: [ [Function] ]\n\n\nsince v0.1.26\n\n# Parameters\n\nNAME        TYPE\neventName   string | symbol\n\n# Returns\n\nFunction[]\n\n# Inherited from\n\nEris.Client.listeners\n\n# Defined in\n\nnode_modules/@types/node/events.d.ts:512\n\n----------------------------------------\n\n\n# off\n\n▸ off<K>(event, listener): CofoClient\n\n# Type parameters\n\nNAME   TYPE\nK      extends keyof ClientEvents\n\n# Parameters\n\nNAME       TYPE\nevent      K\nlistener   (...args: ClientEvents[K]) => void\n\n# Returns\n\nCofoClient\n\n# Inherited from\n\nEris.Client.off\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2452\n\n▸ off(event, listener): CofoClient\n\n# Parameters\n\nNAME       TYPE\nevent      string\nlistener   (...args: any[]) => void\n\n# Returns\n\nCofoClient\n\n# Inherited from\n\nEris.Client.off\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2453\n\n----------------------------------------\n\n\n# on\n\n▸ on<K>(event, listener): CofoClient\n\n# Type parameters\n\nNAME   TYPE\nK      extends keyof ClientEvents\n\n# Parameters\n\nNAME       TYPE\nevent      K\nlistener   (...args: ClientEvents[K]) => void\n\n# Returns\n\nCofoClient\n\n# Inherited from\n\nEris.Client.on\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2483\n\n▸ on(event, listener): CofoClient\n\n# Parameters\n\nNAME       TYPE\nevent      string\nlistener   (...args: any[]) => void\n\n# Returns\n\nCofoClient\n\n# Inherited from\n\nEris.Client.on\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2484\n\n----------------------------------------\n\n\n# once\n\n▸ once<K>(event, listener): CofoClient\n\n# Type parameters\n\nNAME   TYPE\nK      extends keyof ClientEvents\n\n# Parameters\n\nNAME       TYPE\nevent      K\nlistener   (...args: ClientEvents[K]) => void\n\n# Returns\n\nCofoClient\n\n# Inherited from\n\nEris.Client.once\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2454\n\n▸ once(event, listener): CofoClient\n\n# Parameters\n\nNAME       TYPE\nevent      string\nlistener   (...args: any[]) => void\n\n# Returns\n\nCofoClient\n\n# Inherited from\n\nEris.Client.once\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2455\n\n----------------------------------------\n\n\n# pinMessage\n\n▸ pinMessage(channelID, messageID): Promise<void>\n\n# Parameters\n\nNAME        TYPE\nchannelID   string\nmessageID   string\n\n# Returns\n\nPromise<void>\n\n# Inherited from\n\nEris.Client.pinMessage\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2456\n\n----------------------------------------\n\n\n# prependListener\n\n▸ prependListener(eventName, listener): CofoClient\n\nAdds the listener function to the beginning of the listeners array for the event named eventName. No checks are made to see if the listener has already been added. Multiple calls passing the same combination of eventNameand listener will result in the listener being added, and called, multiple times.\n\nserver.prependListener('connection', (stream) => {\n  console.log('someone connected!');\n});\n\n\nReturns a reference to the EventEmitter, so that calls can be chained.\n\nsince v6.0.0\n\n# Parameters\n\nNAME        TYPE                       DESCRIPTION\neventName   string | symbol            The name of the event.\nlistener    (...args: any[]) => void   The callback function\n\n# Returns\n\nCofoClient\n\n# Inherited from\n\nEris.Client.prependListener\n\n# Defined in\n\nnode_modules/@types/node/events.d.ts:607\n\n----------------------------------------\n\n\n# prependOnceListener\n\n▸ prependOnceListener(eventName, listener): CofoClient\n\nAdds a one-timelistener function for the event named eventName to the_beginning_ of the listeners array. The next time eventName is triggered, this listener is removed, and then invoked.\n\nserver.prependOnceListener('connection', (stream) => {\n  console.log('Ah, we have our first user!');\n});\n\n\nReturns a reference to the EventEmitter, so that calls can be chained.\n\nsince v6.0.0\n\n# Parameters\n\nNAME        TYPE                       DESCRIPTION\neventName   string | symbol            The name of the event.\nlistener    (...args: any[]) => void   The callback function\n\n# Returns\n\nCofoClient\n\n# Inherited from\n\nEris.Client.prependOnceListener\n\n# Defined in\n\nnode_modules/@types/node/events.d.ts:623\n\n----------------------------------------\n\n\n# pruneMembers\n\n▸ pruneMembers(guildID, options?): Promise<number>\n\n# Parameters\n\nNAME       TYPE\nguildID    string\noptions?   PruneMemberOptions\n\n# Returns\n\nPromise<number>\n\n# Inherited from\n\nEris.Client.pruneMembers\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2457\n\n----------------------------------------\n\n\n# purgeChannel\n\n▸ purgeChannel(channelID, options): Promise<number>\n\ndeprecated\n\n# Parameters\n\nNAME        TYPE\nchannelID   string\noptions     PurgeChannelOptions\n\n# Returns\n\nPromise<number>\n\n# Inherited from\n\nEris.Client.purgeChannel\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2458\n\n▸ purgeChannel(channelID, limit?, filter?, before?, after?, reason?): Promise<number>\n\ndeprecated\n\n# Parameters\n\nNAME        TYPE\nchannelID   string\nlimit?      number\nfilter?     (m: Message<GuildTextableChannel>) => boolean\nbefore?     string\nafter?      string\nreason?     string\n\n# Returns\n\nPromise<number>\n\n# Inherited from\n\nEris.Client.purgeChannel\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2460\n\n----------------------------------------\n\n\n# rawListeners\n\n▸ rawListeners(eventName): Function[]\n\nReturns a copy of the array of listeners for the event named eventName, including any wrappers (such as those created by .once()).\n\nconst emitter = new EventEmitter();\nemitter.once('log', () => console.log('log once'));\n\n// Returns a new Array with a function `onceWrapper` which has a property\n// `listener` which contains the original listener bound above\nconst listeners = emitter.rawListeners('log');\nconst logFnWrapper = listeners[0];\n\n// Logs \"log once\" to the console and does not unbind the `once` event\nlogFnWrapper.listener();\n\n// Logs \"log once\" to the console and removes the listener\nlogFnWrapper();\n\nemitter.on('log', () => console.log('log persistently'));\n// Will return a new Array with a single function bound by `.on()` above\nconst newListeners = emitter.rawListeners('log');\n\n// Logs \"log persistently\" twice\nnewListeners[0]();\nemitter.emit('log');\n\n\nsince v9.4.0\n\n# Parameters\n\nNAME        TYPE\neventName   string | symbol\n\n# Returns\n\nFunction[]\n\n# Inherited from\n\nEris.Client.rawListeners\n\n# Defined in\n\nnode_modules/@types/node/events.d.ts:542\n\n----------------------------------------\n\n\n# removeAllListeners\n\n▸ removeAllListeners(event?): CofoClient\n\nRemoves all listeners, or those of the specified eventName.\n\nIt is bad practice to remove listeners added elsewhere in the code, particularly when the EventEmitter instance was created by some other component or module (e.g. sockets or file streams).\n\nReturns a reference to the EventEmitter, so that calls can be chained.\n\nsince v0.1.26\n\n# Parameters\n\nNAME     TYPE\nevent?   string | symbol\n\n# Returns\n\nCofoClient\n\n# Inherited from\n\nEris.Client.removeAllListeners\n\n# Defined in\n\nnode_modules/@types/node/events.d.ts:483\n\n----------------------------------------\n\n\n# removeGroupRecipient\n\n▸ removeGroupRecipient(groupID, userID): Promise<void>\n\n# Parameters\n\nNAME      TYPE\ngroupID   string\nuserID    string\n\n# Returns\n\nPromise<void>\n\n# Inherited from\n\nEris.Client.removeGroupRecipient\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2468\n\n----------------------------------------\n\n\n# removeGuildMemberRole\n\n▸ removeGuildMemberRole(guildID, memberID, roleID, reason?): Promise<void>\n\n# Parameters\n\nNAME       TYPE\nguildID    string\nmemberID   string\nroleID     string\nreason?    string\n\n# Returns\n\nPromise<void>\n\n# Inherited from\n\nEris.Client.removeGuildMemberRole\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2469\n\n----------------------------------------\n\n\n# removeListener\n\n▸ removeListener(eventName, listener): CofoClient\n\nRemoves the specified listener from the listener array for the event namedeventName.\n\nconst callback = (stream) => {\n  console.log('someone connected!');\n};\nserver.on('connection', callback);\n// ...\nserver.removeListener('connection', callback);\n\n\nremoveListener() will remove, at most, one instance of a listener from the listener array. If any single listener has been added multiple times to the listener array for the specified eventName, then removeListener() must be called multiple times to remove each instance.\n\nOnce an event is emitted, all listeners attached to it at the time of emitting are called in order. This implies that anyremoveListener() or removeAllListeners() calls after emitting and_before_ the last listener finishes execution will not remove them fromemit() in progress. Subsequent events behave as expected.\n\nconst myEmitter = new MyEmitter();\n\nconst callbackA = () => {\n  console.log('A');\n  myEmitter.removeListener('event', callbackB);\n};\n\nconst callbackB = () => {\n  console.log('B');\n};\n\nmyEmitter.on('event', callbackA);\n\nmyEmitter.on('event', callbackB);\n\n// callbackA removes listener callbackB but it will still be called.\n// Internal listener array at time of emit [callbackA, callbackB]\nmyEmitter.emit('event');\n// Prints:\n//   A\n//   B\n\n// callbackB is now removed.\n// Internal listener array [callbackA]\nmyEmitter.emit('event');\n// Prints:\n//   A\n\n\nBecause listeners are managed using an internal array, calling this will change the position indices of any listener registered after the listener being removed. This will not impact the order in which listeners are called, but it means that any copies of the listener array as returned by the emitter.listeners() method will need to be recreated.\n\nWhen a single function has been added as a handler multiple times for a single event (as in the example below), removeListener() will remove the most recently added instance. In the example the once('ping')listener is removed:\n\nconst ee = new EventEmitter();\n\nfunction pong() {\n  console.log('pong');\n}\n\nee.on('ping', pong);\nee.once('ping', pong);\nee.removeListener('ping', pong);\n\nee.emit('ping');\nee.emit('ping');\n\n\nReturns a reference to the EventEmitter, so that calls can be chained.\n\nsince v0.1.26\n\n# Parameters\n\nNAME        TYPE\neventName   string | symbol\nlistener    (...args: any[]) => void\n\n# Returns\n\nCofoClient\n\n# Inherited from\n\nEris.Client.removeListener\n\n# Defined in\n\nnode_modules/@types/node/events.d.ts:467\n\n----------------------------------------\n\n\n# removeMessageReaction\n\n▸ removeMessageReaction(channelID, messageID, reaction, userID?): Promise<void>\n\n# Parameters\n\nNAME        TYPE\nchannelID   string\nmessageID   string\nreaction    string\nuserID?     string\n\n# Returns\n\nPromise<void>\n\n# Inherited from\n\nEris.Client.removeMessageReaction\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2470\n\n----------------------------------------\n\n\n# removeMessageReactionEmoji\n\n▸ removeMessageReactionEmoji(channelID, messageID, reaction): Promise<void>\n\n# Parameters\n\nNAME        TYPE\nchannelID   string\nmessageID   string\nreaction    string\n\n# Returns\n\nPromise<void>\n\n# Inherited from\n\nEris.Client.removeMessageReactionEmoji\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2471\n\n----------------------------------------\n\n\n# removeMessageReactions\n\n▸ removeMessageReactions(channelID, messageID): Promise<void>\n\n# Parameters\n\nNAME        TYPE\nchannelID   string\nmessageID   string\n\n# Returns\n\nPromise<void>\n\n# Inherited from\n\nEris.Client.removeMessageReactions\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2472\n\n----------------------------------------\n\n\n# removeRelationship\n\n▸ removeRelationship(userID): Promise<void>\n\n# Parameters\n\nNAME     TYPE\nuserID   string\n\n# Returns\n\nPromise<void>\n\n# Inherited from\n\nEris.Client.removeRelationship\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2473\n\n----------------------------------------\n\n\n# searchChannelMessages\n\n▸ searchChannelMessages(channelID, query): Promise<SearchResults>\n\n# Parameters\n\nNAME        TYPE\nchannelID   string\nquery       SearchOptions\n\n# Returns\n\nPromise<SearchResults>\n\n# Inherited from\n\nEris.Client.searchChannelMessages\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2474\n\n----------------------------------------\n\n\n# searchGuildMembers\n\n▸ searchGuildMembers(guildID, query, limit?): Promise<Member[]>\n\n# Parameters\n\nNAME      TYPE\nguildID   string\nquery     string\nlimit?    number\n\n# Returns\n\nPromise<Member[]>\n\n# Inherited from\n\nEris.Client.searchGuildMembers\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2475\n\n----------------------------------------\n\n\n# searchGuildMessages\n\n▸ searchGuildMessages(guildID, query): Promise<SearchResults>\n\n# Parameters\n\nNAME      TYPE\nguildID   string\nquery     SearchOptions\n\n# Returns\n\nPromise<SearchResults>\n\n# Inherited from\n\nEris.Client.searchGuildMessages\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2476\n\n----------------------------------------\n\n\n# sendChannelTyping\n\n▸ sendChannelTyping(channelID): Promise<void>\n\n# Parameters\n\nNAME        TYPE\nchannelID   string\n\n# Returns\n\nPromise<void>\n\n# Inherited from\n\nEris.Client.sendChannelTyping\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2477\n\n----------------------------------------\n\n\n# setMaxListeners\n\n▸ setMaxListeners(n): CofoClient\n\nBy default EventEmitters will print a warning if more than 10 listeners are added for a particular event. This is a useful default that helps finding memory leaks. The emitter.setMaxListeners() method allows the limit to be modified for this specific EventEmitter instance. The value can be set toInfinity (or 0) to indicate an unlimited number of listeners.\n\nReturns a reference to the EventEmitter, so that calls can be chained.\n\nsince v0.3.5\n\n# Parameters\n\nNAME   TYPE\nn      number\n\n# Returns\n\nCofoClient\n\n# Inherited from\n\nEris.Client.setMaxListeners\n\n# Defined in\n\nnode_modules/@types/node/events.d.ts:493\n\n----------------------------------------\n\n\n# syncGuildIntegration\n\n▸ syncGuildIntegration(guildID, integrationID): Promise<void>\n\n# Parameters\n\nNAME            TYPE\nguildID         string\nintegrationID   string\n\n# Returns\n\nPromise<void>\n\n# Inherited from\n\nEris.Client.syncGuildIntegration\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2478\n\n----------------------------------------\n\n\n# syncGuildTemplate\n\n▸ syncGuildTemplate(guildID, code): Promise<GuildTemplate>\n\n# Parameters\n\nNAME      TYPE\nguildID   string\ncode      string\n\n# Returns\n\nPromise<GuildTemplate>\n\n# Inherited from\n\nEris.Client.syncGuildTemplate\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2479\n\n----------------------------------------\n\n\n# toString\n\n▸ toString(): string\n\n# Returns\n\nstring\n\n# Inherited from\n\nEris.Client.toString\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2485\n\n----------------------------------------\n\n\n# unbanGuildMember\n\n▸ unbanGuildMember(guildID, userID, reason?): Promise<void>\n\n# Parameters\n\nNAME      TYPE\nguildID   string\nuserID    string\nreason?   string\n\n# Returns\n\nPromise<void>\n\n# Inherited from\n\nEris.Client.unbanGuildMember\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2480\n\n----------------------------------------\n\n\n# unpinMessage\n\n▸ unpinMessage(channelID, messageID): Promise<void>\n\n# Parameters\n\nNAME        TYPE\nchannelID   string\nmessageID   string\n\n# Returns\n\nPromise<void>\n\n# Inherited from\n\nEris.Client.unpinMessage\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2481\n\n----------------------------------------\n\n\n# validateDiscoverySearchTerm\n\n▸ validateDiscoverySearchTerm(term): Promise<{ valid: boolean }>\n\n# Parameters\n\nNAME   TYPE\nterm   string\n\n# Returns\n\nPromise<{ valid: boolean }>\n\n# Inherited from\n\nEris.Client.validateDiscoverySearchTerm\n\n# Defined in\n\nnode_modules/eris/index.d.ts:2482\n\n----------------------------------------\n\n\n# getEventListeners\n\n▸ Static getEventListeners(emitter, name): Function[]\n\nReturns a copy of the array of listeners for the event named eventName.\n\nFor EventEmitters this behaves exactly the same as calling .listeners on the emitter.\n\nFor EventTargets this is the only way to get the event listeners for the event target. This is useful for debugging and diagnostic purposes.\n\nconst { getEventListeners, EventEmitter } = require('events');\n\n{\n  const ee = new EventEmitter();\n  const listener = () => console.log('Events are fun');\n  ee.on('foo', listener);\n  getEventListeners(ee, 'foo'); // [listener]\n}\n{\n  const et = new EventTarget();\n  const listener = () => console.log('Events are fun');\n  et.addEventListener('foo', listener);\n  getEventListeners(et, 'foo'); // [listener]\n}\n\n\nsince v15.2.0, v14.17.0\n\n# Parameters\n\nNAME      TYPE\nemitter   DOMEventTarget | EventEmitter\nname      string | symbol\n\n# Returns\n\nFunction[]\n\n# Inherited from\n\nEris.Client.getEventListeners\n\n# Defined in\n\nnode_modules/@types/node/events.d.ts:270\n\n----------------------------------------\n\n\n# listenerCount\n\n▸ Static listenerCount(emitter, eventName): number\n\nA class method that returns the number of listeners for the given eventNameregistered on the given emitter.\n\nconst { EventEmitter, listenerCount } = require('events');\nconst myEmitter = new EventEmitter();\nmyEmitter.on('event', () => {});\nmyEmitter.on('event', () => {});\nconsole.log(listenerCount(myEmitter, 'event'));\n// Prints: 2\n\n\nsince v0.9.12\n\ndeprecated Since v3.2.0 - Use listenerCount instead.\n\n# Parameters\n\nNAME        TYPE              DESCRIPTION\nemitter     EventEmitter      The emitter to query\neventName   string | symbol   The event name\n\n# Returns\n\nnumber\n\n# Inherited from\n\nEris.Client.listenerCount\n\n# Defined in\n\nnode_modules/@types/node/events.d.ts:242\n\n----------------------------------------\n\n\n# on\n\n▸ Static on(emitter, eventName, options?): AsyncIterableIterator<any>\n\nconst { on, EventEmitter } = require('events');\n\n(async () => {\n  const ee = new EventEmitter();\n\n  // Emit later on\n  process.nextTick(() => {\n    ee.emit('foo', 'bar');\n    ee.emit('foo', 42);\n  });\n\n  for await (const event of on(ee, 'foo')) {\n    // The execution of this inner block is synchronous and it\n    // processes one event at a time (even with await). Do not use\n    // if concurrent execution is required.\n    console.log(event); // prints ['bar'] [42]\n  }\n  // Unreachable here\n})();\n\n\nReturns an AsyncIterator that iterates eventName events. It will throw if the EventEmitter emits 'error'. It removes all listeners when exiting the loop. The value returned by each iteration is an array composed of the emitted event arguments.\n\nAn AbortSignal can be used to cancel waiting on events:\n\nconst { on, EventEmitter } = require('events');\nconst ac = new AbortController();\n\n(async () => {\n  const ee = new EventEmitter();\n\n  // Emit later on\n  process.nextTick(() => {\n    ee.emit('foo', 'bar');\n    ee.emit('foo', 42);\n  });\n\n  for await (const event of on(ee, 'foo', { signal: ac.signal })) {\n    // The execution of this inner block is synchronous and it\n    // processes one event at a time (even with await). Do not use\n    // if concurrent execution is required.\n    console.log(event); // prints ['bar'] [42]\n  }\n  // Unreachable here\n})();\n\nprocess.nextTick(() => ac.abort());\n\n\nsince v13.6.0, v12.16.0\n\n# Parameters\n\nNAME        TYPE                        DESCRIPTION\nemitter     EventEmitter                -\neventName   string                      The name of the event being listened for\noptions?    StaticEventEmitterOptions   -\n\n# Returns\n\nAsyncIterableIterator<any>\n\nthat iterates eventName events emitted by the emitter\n\n# Inherited from\n\nEris.Client.on\n\n# Defined in\n\nnode_modules/@types/node/events.d.ts:221\n\n----------------------------------------\n\n\n# once\n\n▸ Static once(emitter, eventName, options?): Promise<any[]>\n\nCreates a Promise that is fulfilled when the EventEmitter emits the given event or that is rejected if the EventEmitter emits 'error' while waiting. The Promise will resolve with an array of all the arguments emitted to the given event.\n\nThis method is intentionally generic and works with the web platform EventTarget interface, which has no special'error' event semantics and does not listen to the 'error' event.\n\nconst { once, EventEmitter } = require('events');\n\nasync function run() {\n  const ee = new EventEmitter();\n\n  process.nextTick(() => {\n    ee.emit('myevent', 42);\n  });\n\n  const [value] = await once(ee, 'myevent');\n  console.log(value);\n\n  const err = new Error('kaboom');\n  process.nextTick(() => {\n    ee.emit('error', err);\n  });\n\n  try {\n    await once(ee, 'myevent');\n  } catch (err) {\n    console.log('error happened', err);\n  }\n}\n\nrun();\n\n\nThe special handling of the 'error' event is only used when events.once()is used to wait for another event. If events.once() is used to wait for the 'error' event itself, then it is treated as any other kind of event without special handling:\n\nconst { EventEmitter, once } = require('events');\n\nconst ee = new EventEmitter();\n\nonce(ee, 'error')\n  .then(([err]) => console.log('ok', err.message))\n  .catch((err) => console.log('error', err.message));\n\nee.emit('error', new Error('boom'));\n\n// Prints: ok boom\n\n\nAn AbortSignal can be used to cancel waiting for the event:\n\nconst { EventEmitter, once } = require('events');\n\nconst ee = new EventEmitter();\nconst ac = new AbortController();\n\nasync function foo(emitter, event, signal) {\n  try {\n    await once(emitter, event, { signal });\n    console.log('event emitted!');\n  } catch (error) {\n    if (error.name === 'AbortError') {\n      console.error('Waiting for the event was canceled!');\n    } else {\n      console.error('There was an error', error.message);\n    }\n  }\n}\n\nfoo(ee, 'foo', ac.signal);\nac.abort(); // Abort waiting for the event\nee.emit('foo'); // Prints: Waiting for the event was canceled!\n\n\nsince v11.13.0, v10.16.0\n\n# Parameters\n\nNAME        TYPE\nemitter     NodeEventTarget\neventName   string | symbol\noptions?    StaticEventEmitterOptions\n\n# Returns\n\nPromise<any[]>\n\n# Inherited from\n\nEris.Client.once\n\n# Defined in\n\nnode_modules/@types/node/events.d.ts:157\n\n▸ Static once(emitter, eventName, options?): Promise<any[]>\n\n# Parameters\n\nNAME        TYPE\nemitter     DOMEventTarget\neventName   string\noptions?    StaticEventEmitterOptions\n\n# Returns\n\nPromise<any[]>\n\n# Inherited from\n\nEris.Client.once\n\n# Defined in\n\nnode_modules/@types/node/events.d.ts:162\n\n----------------------------------------\n\n\n# setMaxListeners\n\n▸ Static setMaxListeners(n?, ...eventTargets): void\n\nBy default EventEmitters will print a warning if more than 10 listeners are added for a particular event. This is a useful default that helps finding memory leaks. The EventEmitter.setMaxListeners() method allows the default limit to be modified (if eventTargets is empty) or modify the limit specified in every EventTarget | EventEmitter passed as arguments. The value can be set toInfinity (or 0) to indicate an unlimited number of listeners.\n\nEventEmitter.setMaxListeners(20);\n// Equivalent to\nEventEmitter.defaultMaxListeners = 20;\n\nconst eventTarget = new EventTarget();\n// Only way to increase limit for `EventTarget` instances\n// as these doesn't expose its own `setMaxListeners` method\nEventEmitter.setMaxListeners(20, eventTarget);\n\n\nsince v15.3.0, v14.17.0\n\n# Parameters\n\nNAME              TYPE\nn?                number\n...eventTargets   (DOMEventTarget | EventEmitter)[]\n\n# Returns\n\nvoid\n\n# Inherited from\n\nEris.Client.setMaxListeners\n\n# Defined in\n\nnode_modules/@types/node/events.d.ts:290",
      "normalizedContent": "@cofo/framework / exports / cofoclient\n\n\n# class: cofoclient\n\n\n# hierarchy\n\n * client\n   \n   ↳ cofoclient\n\n\n# table of contents\n\n\n# constructors\n\n * constructor\n\n\n# properties\n\n * application\n * basedirectory\n * bot\n * channelguildmap\n * defaultprefix\n * gatewayurl\n * groupchannels\n * guildshardmap\n * guilds\n * handler\n * ignorebots\n * lastconnect\n * lastreconnectdelay\n * logger\n * mentionprefix\n * notes\n * options\n * owners\n * presence\n * privatechannelmap\n * privatechannels\n * ready\n * reconnectattempts\n * relationships\n * requesthandler\n * shards\n * starttime\n * testmode\n * threadguildmap\n * unavailableguilds\n * uptime\n * user\n * userguildsettings\n * usersettings\n * users\n * voiceconnections\n * capturerejectionsymbol\n * capturerejections\n * defaultmaxlisteners\n * errormonitor\n\n\n# methods\n\n * acceptinvite\n * addgrouprecipient\n * addguilddiscoverysubcategory\n * addguildmemberrole\n * addlistener\n * addmessagereaction\n * addrelationship\n * addselfpremiumsubscription\n * banguildmember\n * bulkeditcommandpermissions\n * bulkeditcommands\n * bulkeditguildcommands\n * closevoiceconnection\n * connect\n * createchannel\n * createchannelinvite\n * createchannelwebhook\n * createcommand\n * creategroupchannel\n * createguild\n * createguildcommand\n * createguildemoji\n * createguildfromtemplate\n * createguildsticker\n * createguildtemplate\n * createinteractionresponse\n * createmessage\n * createrole\n * createstageinstance\n * createthreadwithmessage\n * createthreadwithoutmessage\n * crosspostmessage\n * deletechannel\n * deletechannelpermission\n * deletecommand\n * deleteguild\n * deleteguildcommand\n * deleteguilddiscoverysubcategory\n * deleteguildemoji\n * deleteguildintegration\n * deleteguildsticker\n * deleteguildtemplate\n * deleteinvite\n * deletemessage\n * deletemessages\n * deleterole\n * deleteselfconnection\n * deleteselfpremiumsubscription\n * deletestageinstance\n * deleteusernote\n * deletewebhook\n * deletewebhookmessage\n * disableselfmfatotp\n * disconnect\n * editafk\n * editchannel\n * editchannelpermission\n * editchannelposition\n * editcommand\n * editcommandpermissions\n * editguild\n * editguildcommand\n * editguilddiscovery\n * editguildemoji\n * editguildintegration\n * editguildmember\n * editguildsticker\n * editguildtemplate\n * editguildvanity\n * editguildvoicestate\n * editguildwelcomescreen\n * editguildwidget\n * editmessage\n * editnickname\n * editrole\n * editroleposition\n * editself\n * editselfconnection\n * editselfsettings\n * editstageinstance\n * editstatus\n * editusernote\n * editwebhook\n * editwebhookmessage\n * emit\n * enableselfmfatotp\n * eventnames\n * executeslackwebhook\n * executewebhook\n * fetchprefix\n * followchannel\n * getactiveguildthreads\n * getactivethreads\n * getarchivedthreads\n * getbotgateway\n * getchannel\n * getchannelinvites\n * getchannelwebhooks\n * getcommand\n * getcommandpermissions\n * getcommands\n * getdmchannel\n * getdiscoverycategories\n * getemojiguild\n * getgateway\n * getguildauditlog\n * getguildauditlogs\n * getguildban\n * getguildbans\n * getguildcommand\n * getguildcommandpermissions\n * getguildcommands\n * getguilddiscovery\n * getguildembed\n * getguildintegrations\n * getguildinvites\n * getguildpreview\n * getguildtemplate\n * getguildtemplates\n * getguildvanity\n * getguildwebhooks\n * getguildwelcomescreen\n * getguildwidget\n * getguildwidgetsettings\n * getinvite\n * getjoinedprivatearchivedthreads\n * getmaxlisteners\n * getmessage\n * getmessagereaction\n * getmessages\n * getnitrostickerpacks\n * getoauthapplication\n * getpins\n * getprunecount\n * getrestchannel\n * getrestguild\n * getrestguildchannels\n * getrestguildemoji\n * getrestguildemojis\n * getrestguildmember\n * getrestguildmembers\n * getrestguildroles\n * getrestguildsticker\n * getrestguildstickers\n * getrestguilds\n * getreststicker\n * getrestuser\n * getself\n * getselfbilling\n * getselfconnections\n * getselfmfacodes\n * getselfpayments\n * getselfsettings\n * getstageinstance\n * getthreadmembers\n * getuserprofile\n * getvoiceregions\n * getwebhook\n * getwebhookmessage\n * jointhread\n * joinvoicechannel\n * kickguildmember\n * leaveguild\n * leavethread\n * leavevoicechannel\n * listenercount\n * listeners\n * off\n * on\n * once\n * pinmessage\n * prependlistener\n * prependoncelistener\n * prunemembers\n * purgechannel\n * rawlisteners\n * removealllisteners\n * removegrouprecipient\n * removeguildmemberrole\n * removelistener\n * removemessagereaction\n * removemessagereactionemoji\n * removemessagereactions\n * removerelationship\n * searchchannelmessages\n * searchguildmembers\n * searchguildmessages\n * sendchanneltyping\n * setmaxlisteners\n * syncguildintegration\n * syncguildtemplate\n * tostring\n * unbanguildmember\n * unpinmessage\n * validatediscoverysearchterm\n * geteventlisteners\n * listenercount\n * on\n * once\n * setmaxlisteners\n\n\n# constructors\n\n\n# constructor\n\n• new cofoclient(token, frameworkoptions, options?)\n\ncreate a new bot\n\n# parameters\n\nname               type\ntoken              string\nframeworkoptions   frameworkoptions\noptions?           clientoptions\n\n# overrides\n\neris.client.constructor\n\n# defined in\n\nsrc/cofoclient.ts:22\n\n\n# properties\n\n\n# application\n\n• optional application: object\n\n# type declaration\n\nname    type\nflags   number\nid      string\n\n# inherited from\n\neris.client.application\n\n# defined in\n\nnode_modules/eris/index.d.ts:2074\n\n----------------------------------------\n\n\n# basedirectory\n\n• basedirectory: string\n\n# defined in\n\nsrc/cofoclient.ts:13\n\n----------------------------------------\n\n\n# bot\n\n• bot: boolean\n\n# inherited from\n\neris.client.bot\n\n# defined in\n\nnode_modules/eris/index.d.ts:2075\n\n----------------------------------------\n\n\n# channelguildmap\n\n• channelguildmap: object\n\n# index signature\n\n▪ [s: string]: string\n\n# inherited from\n\neris.client.channelguildmap\n\n# defined in\n\nnode_modules/eris/index.d.ts:2076\n\n----------------------------------------\n\n\n# defaultprefix\n\n• defaultprefix: string\n\n# defined in\n\nsrc/cofoclient.ts:10\n\n----------------------------------------\n\n\n# gatewayurl\n\n• optional gatewayurl: string\n\n# inherited from\n\neris.client.gatewayurl\n\n# defined in\n\nnode_modules/eris/index.d.ts:2077\n\n----------------------------------------\n\n\n# groupchannels\n\n• groupchannels: collection<groupchannel>\n\n# inherited from\n\neris.client.groupchannels\n\n# defined in\n\nnode_modules/eris/index.d.ts:2078\n\n----------------------------------------\n\n\n# guildshardmap\n\n• guildshardmap: object\n\n# index signature\n\n▪ [s: string]: number\n\n# inherited from\n\neris.client.guildshardmap\n\n# defined in\n\nnode_modules/eris/index.d.ts:2080\n\n----------------------------------------\n\n\n# guilds\n\n• guilds: collection<guild>\n\n# inherited from\n\neris.client.guilds\n\n# defined in\n\nnode_modules/eris/index.d.ts:2079\n\n----------------------------------------\n\n\n# handler\n\n• handler: cofohandler\n\n# defined in\n\nsrc/cofoclient.ts:9\n\n----------------------------------------\n\n\n# ignorebots\n\n• ignorebots: boolean\n\n# defined in\n\nsrc/cofoclient.ts:12\n\n----------------------------------------\n\n\n# lastconnect\n\n• lastconnect: number\n\n# inherited from\n\neris.client.lastconnect\n\n# defined in\n\nnode_modules/eris/index.d.ts:2081\n\n----------------------------------------\n\n\n# lastreconnectdelay\n\n• lastreconnectdelay: number\n\n# inherited from\n\neris.client.lastreconnectdelay\n\n# defined in\n\nnode_modules/eris/index.d.ts:2082\n\n----------------------------------------\n\n\n# logger\n\n• logger: logger\n\n# defined in\n\nsrc/cofoclient.ts:8\n\n----------------------------------------\n\n\n# mentionprefix\n\n• mentionprefix: boolean\n\n# defined in\n\nsrc/cofoclient.ts:11\n\n----------------------------------------\n\n\n# notes\n\n• notes: object\n\n# index signature\n\n▪ [s: string]: string\n\n# inherited from\n\neris.client.notes\n\n# defined in\n\nnode_modules/eris/index.d.ts:2083\n\n----------------------------------------\n\n\n# options\n\n• options: clientoptions\n\n# inherited from\n\neris.client.options\n\n# defined in\n\nnode_modules/eris/index.d.ts:2084\n\n----------------------------------------\n\n\n# owners\n\n• owners: any[]\n\n# defined in\n\nsrc/cofoclient.ts:14\n\n----------------------------------------\n\n\n# presence\n\n• presence: clientpresence\n\n# inherited from\n\neris.client.presence\n\n# defined in\n\nnode_modules/eris/index.d.ts:2085\n\n----------------------------------------\n\n\n# privatechannelmap\n\n• privatechannelmap: object\n\n# index signature\n\n▪ [s: string]: string\n\n# inherited from\n\neris.client.privatechannelmap\n\n# defined in\n\nnode_modules/eris/index.d.ts:2086\n\n----------------------------------------\n\n\n# privatechannels\n\n• privatechannels: collection<privatechannel>\n\n# inherited from\n\neris.client.privatechannels\n\n# defined in\n\nnode_modules/eris/index.d.ts:2087\n\n----------------------------------------\n\n\n# ready\n\n• ready: boolean\n\n# inherited from\n\neris.client.ready\n\n# defined in\n\nnode_modules/eris/index.d.ts:2088\n\n----------------------------------------\n\n\n# reconnectattempts\n\n• reconnectattempts: number\n\n# inherited from\n\neris.client.reconnectattempts\n\n# defined in\n\nnode_modules/eris/index.d.ts:2089\n\n----------------------------------------\n\n\n# relationships\n\n• relationships: collection<relationship>\n\n# inherited from\n\neris.client.relationships\n\n# defined in\n\nnode_modules/eris/index.d.ts:2090\n\n----------------------------------------\n\n\n# requesthandler\n\n• requesthandler: requesthandler\n\n# inherited from\n\neris.client.requesthandler\n\n# defined in\n\nnode_modules/eris/index.d.ts:2091\n\n----------------------------------------\n\n\n# shards\n\n• shards: shardmanager\n\n# inherited from\n\neris.client.shards\n\n# defined in\n\nnode_modules/eris/index.d.ts:2092\n\n----------------------------------------\n\n\n# starttime\n\n• starttime: number\n\n# inherited from\n\neris.client.starttime\n\n# defined in\n\nnode_modules/eris/index.d.ts:2093\n\n----------------------------------------\n\n\n# testmode\n\n• testmode: undefined | { enabled: boolean ; guildid: string }\n\n# defined in\n\nsrc/cofoclient.ts:15\n\n----------------------------------------\n\n\n# threadguildmap\n\n• threadguildmap: object\n\n# index signature\n\n▪ [s: string]: string\n\n# inherited from\n\neris.client.threadguildmap\n\n# defined in\n\nnode_modules/eris/index.d.ts:2094\n\n----------------------------------------\n\n\n# unavailableguilds\n\n• unavailableguilds: collection<unavailableguild>\n\n# inherited from\n\neris.client.unavailableguilds\n\n# defined in\n\nnode_modules/eris/index.d.ts:2095\n\n----------------------------------------\n\n\n# uptime\n\n• uptime: number\n\n# inherited from\n\neris.client.uptime\n\n# defined in\n\nnode_modules/eris/index.d.ts:2096\n\n----------------------------------------\n\n\n# user\n\n• user: extendeduser\n\n# inherited from\n\neris.client.user\n\n# defined in\n\nnode_modules/eris/index.d.ts:2097\n\n----------------------------------------\n\n\n# userguildsettings\n\n• userguildsettings: object\n\n# index signature\n\n▪ [s: string]: guildsettings\n\n# inherited from\n\neris.client.userguildsettings\n\n# defined in\n\nnode_modules/eris/index.d.ts:2098\n\n----------------------------------------\n\n\n# usersettings\n\n• usersettings: usersettings\n\n# inherited from\n\neris.client.usersettings\n\n# defined in\n\nnode_modules/eris/index.d.ts:2100\n\n----------------------------------------\n\n\n# users\n\n• users: collection<user>\n\n# inherited from\n\neris.client.users\n\n# defined in\n\nnode_modules/eris/index.d.ts:2099\n\n----------------------------------------\n\n\n# voiceconnections\n\n• voiceconnections: voiceconnectionmanager<voiceconnection>\n\n# inherited from\n\neris.client.voiceconnections\n\n# defined in\n\nnode_modules/eris/index.d.ts:2101\n\n----------------------------------------\n\n\n# capturerejectionsymbol\n\n▪ static readonly capturerejectionsymbol: typeof capturerejectionsymbol\n\n# inherited from\n\neris.client.capturerejectionsymbol\n\n# defined in\n\nnode_modules/@types/node/events.d.ts:301\n\n----------------------------------------\n\n\n# capturerejections\n\n▪ static capturerejections: boolean\n\nsets or gets the default capturerejection value for all emitters.\n\n# inherited from\n\neris.client.capturerejections\n\n# defined in\n\nnode_modules/@types/node/events.d.ts:306\n\n----------------------------------------\n\n\n# defaultmaxlisteners\n\n▪ static defaultmaxlisteners: number\n\n# inherited from\n\neris.client.defaultmaxlisteners\n\n# defined in\n\nnode_modules/@types/node/events.d.ts:307\n\n----------------------------------------\n\n\n# errormonitor\n\n▪ static readonly errormonitor: typeof errormonitor\n\nthis symbol shall be used to install a listener for only monitoring 'error' events. listeners installed using this symbol are called before the regular 'error' listeners are called.\n\ninstalling a listener using this symbol does not change the behavior once an 'error' event is emitted, therefore the process will still crash if no regular 'error' listener is installed.\n\n# inherited from\n\neris.client.errormonitor\n\n# defined in\n\nnode_modules/@types/node/events.d.ts:300\n\n\n# methods\n\n\n# acceptinvite\n\n▸ acceptinvite(inviteid): promise<invite<\"withoutcount\", invitechannel>>\n\n# parameters\n\nname       type\ninviteid   string\n\n# returns\n\npromise<invite<\"withoutcount\", invitechannel>>\n\n# inherited from\n\neris.client.acceptinvite\n\n# defined in\n\nnode_modules/eris/index.d.ts:2103\n\n----------------------------------------\n\n\n# addgrouprecipient\n\n▸ addgrouprecipient(groupid, userid): promise<void>\n\n# parameters\n\nname      type\ngroupid   string\nuserid    string\n\n# returns\n\npromise<void>\n\n# inherited from\n\neris.client.addgrouprecipient\n\n# defined in\n\nnode_modules/eris/index.d.ts:2104\n\n----------------------------------------\n\n\n# addguilddiscoverysubcategory\n\n▸ addguilddiscoverysubcategory(guildid, categoryid, reason?): promise<discoverysubcategoryresponse>\n\n# parameters\n\nname         type\nguildid      string\ncategoryid   string\nreason?      string\n\n# returns\n\npromise<discoverysubcategoryresponse>\n\n# inherited from\n\neris.client.addguilddiscoverysubcategory\n\n# defined in\n\nnode_modules/eris/index.d.ts:2105\n\n----------------------------------------\n\n\n# addguildmemberrole\n\n▸ addguildmemberrole(guildid, memberid, roleid, reason?): promise<void>\n\n# parameters\n\nname       type\nguildid    string\nmemberid   string\nroleid     string\nreason?    string\n\n# returns\n\npromise<void>\n\n# inherited from\n\neris.client.addguildmemberrole\n\n# defined in\n\nnode_modules/eris/index.d.ts:2106\n\n----------------------------------------\n\n\n# addlistener\n\n▸ addlistener(eventname, listener): cofoclient\n\nalias for emitter.on(eventname, listener).\n\nsince v0.1.26\n\n# parameters\n\nname        type\neventname   string | symbol\nlistener    (...args: any[]) => void\n\n# returns\n\ncofoclient\n\n# inherited from\n\neris.client.addlistener\n\n# defined in\n\nnode_modules/@types/node/events.d.ts:327\n\n----------------------------------------\n\n\n# addmessagereaction\n\n▸ addmessagereaction(channelid, messageid, reaction): promise<void>\n\ndeprecated\n\n# parameters\n\nname        type\nchannelid   string\nmessageid   string\nreaction    string\n\n# returns\n\npromise<void>\n\n# inherited from\n\neris.client.addmessagereaction\n\n# defined in\n\nnode_modules/eris/index.d.ts:2107\n\n▸ addmessagereaction(channelid, messageid, reaction, userid): promise<void>\n\ndeprecated\n\n# parameters\n\nname        type\nchannelid   string\nmessageid   string\nreaction    string\nuserid      string\n\n# returns\n\npromise<void>\n\n# inherited from\n\neris.client.addmessagereaction\n\n# defined in\n\nnode_modules/eris/index.d.ts:2109\n\n----------------------------------------\n\n\n# addrelationship\n\n▸ addrelationship(userid, block?): promise<void>\n\n# parameters\n\nname     type\nuserid   string\nblock?   boolean\n\n# returns\n\npromise<void>\n\n# inherited from\n\neris.client.addrelationship\n\n# defined in\n\nnode_modules/eris/index.d.ts:2110\n\n----------------------------------------\n\n\n# addselfpremiumsubscription\n\n▸ addselfpremiumsubscription(token, plan): promise<void>\n\n# parameters\n\nname    type\ntoken   string\nplan    string\n\n# returns\n\npromise<void>\n\n# inherited from\n\neris.client.addselfpremiumsubscription\n\n# defined in\n\nnode_modules/eris/index.d.ts:2111\n\n----------------------------------------\n\n\n# banguildmember\n\n▸ banguildmember(guildid, userid, deletemessagedays?, reason?): promise<void>\n\n# parameters\n\nname                 type\nguildid              string\nuserid               string\ndeletemessagedays?   number\nreason?              string\n\n# returns\n\npromise<void>\n\n# inherited from\n\neris.client.banguildmember\n\n# defined in\n\nnode_modules/eris/index.d.ts:2112\n\n----------------------------------------\n\n\n# bulkeditcommandpermissions\n\n▸ bulkeditcommandpermissions(guildid, permissions): promise<guildapplicationcommandpermissions[]>\n\n# parameters\n\nname          type\nguildid       string\npermissions   { id: string ; permissions: applicationcommandpermissions[]\n              }[]\n\n# returns\n\npromise<guildapplicationcommandpermissions[]>\n\n# inherited from\n\neris.client.bulkeditcommandpermissions\n\n# defined in\n\nnode_modules/eris/index.d.ts:2113\n\n----------------------------------------\n\n\n# bulkeditcommands\n\n▸ bulkeditcommands(commands): promise<applicationcommand<2 | 1 | 3>[]>\n\n# parameters\n\nname       type\ncommands   applicationcommandstructure[]\n\n# returns\n\npromise<applicationcommand<2 | 1 | 3>[]>\n\n# inherited from\n\neris.client.bulkeditcommands\n\n# defined in\n\nnode_modules/eris/index.d.ts:2114\n\n----------------------------------------\n\n\n# bulkeditguildcommands\n\n▸ bulkeditguildcommands(guildid, commands): promise<applicationcommand<2 | 1 | 3>[]>\n\n# parameters\n\nname       type\nguildid    string\ncommands   applicationcommandstructure[]\n\n# returns\n\npromise<applicationcommand<2 | 1 | 3>[]>\n\n# inherited from\n\neris.client.bulkeditguildcommands\n\n# defined in\n\nnode_modules/eris/index.d.ts:2115\n\n----------------------------------------\n\n\n# closevoiceconnection\n\n▸ closevoiceconnection(guildid): void\n\n# parameters\n\nname      type\nguildid   string\n\n# returns\n\nvoid\n\n# inherited from\n\neris.client.closevoiceconnection\n\n# defined in\n\nnode_modules/eris/index.d.ts:2116\n\n----------------------------------------\n\n\n# connect\n\n▸ connect(): any\n\n# returns\n\nany\n\n# overrides\n\neris.client.connect\n\n# defined in\n\nsrc/cofoclient.ts:38\n\n----------------------------------------\n\n\n# createchannel\n\n▸ createchannel(guildid, name): promise<textchannel>\n\ndeprecated\n\n# parameters\n\nname      type\nguildid   string\nname      string\n\n# returns\n\npromise<textchannel>\n\n# inherited from\n\neris.client.createchannel\n\n# defined in\n\nnode_modules/eris/index.d.ts:2118\n\n▸ createchannel(guildid, name, type, options?): promise<textchannel>\n\ndeprecated\n\n# parameters\n\nname       type\nguildid    string\nname       string\ntype       0\noptions?   createchanneloptions\n\n# returns\n\npromise<textchannel>\n\n# inherited from\n\neris.client.createchannel\n\n# defined in\n\nnode_modules/eris/index.d.ts:2119\n\n▸ createchannel(guildid, name, type, options?): promise<voicechannel>\n\ndeprecated\n\n# parameters\n\nname       type\nguildid    string\nname       string\ntype       2\noptions?   createchanneloptions\n\n# returns\n\npromise<voicechannel>\n\n# inherited from\n\neris.client.createchannel\n\n# defined in\n\nnode_modules/eris/index.d.ts:2125\n\n▸ createchannel(guildid, name, type, options?): promise<categorychannel>\n\ndeprecated\n\n# parameters\n\nname       type\nguildid    string\nname       string\ntype       4\noptions?   createchanneloptions\n\n# returns\n\npromise<categorychannel>\n\n# inherited from\n\neris.client.createchannel\n\n# defined in\n\nnode_modules/eris/index.d.ts:2131\n\n▸ createchannel(guildid, name, type, options?): promise<newschannel>\n\ndeprecated\n\n# parameters\n\nname       type\nguildid    string\nname       string\ntype       5\noptions?   createchanneloptions\n\n# returns\n\npromise<newschannel>\n\n# inherited from\n\neris.client.createchannel\n\n# defined in\n\nnode_modules/eris/index.d.ts:2137\n\n▸ createchannel(guildid, name, type, options?): promise<storechannel>\n\ndeprecated\n\n# parameters\n\nname       type\nguildid    string\nname       string\ntype       6\noptions?   createchanneloptions\n\n# returns\n\npromise<storechannel>\n\n# inherited from\n\neris.client.createchannel\n\n# defined in\n\nnode_modules/eris/index.d.ts:2143\n\n▸ createchannel(guildid, name, type, options?): promise<stagechannel>\n\ndeprecated\n\n# parameters\n\nname       type\nguildid    string\nname       string\ntype       13\noptions?   createchanneloptions\n\n# returns\n\npromise<stagechannel>\n\n# inherited from\n\neris.client.createchannel\n\n# defined in\n\nnode_modules/eris/index.d.ts:2149\n\n▸ createchannel(guildid, name, type?, options?): promise<unknown>\n\ndeprecated\n\n# parameters\n\nname       type\nguildid    string\nname       string\ntype?      number\noptions?   createchanneloptions\n\n# returns\n\npromise<unknown>\n\n# inherited from\n\neris.client.createchannel\n\n# defined in\n\nnode_modules/eris/index.d.ts:2155\n\n▸ createchannel(guildid, name, type, reason?, options?): promise<textchannel>\n\ndeprecated\n\n# parameters\n\nname       type\nguildid    string\nname       string\ntype       0\nreason?    string\noptions?   string | createchanneloptions\n\n# returns\n\npromise<textchannel>\n\n# inherited from\n\neris.client.createchannel\n\n# defined in\n\nnode_modules/eris/index.d.ts:2162\n\n▸ createchannel(guildid, name, type, reason?, options?): promise<voicechannel>\n\ndeprecated\n\n# parameters\n\nname       type\nguildid    string\nname       string\ntype       2\nreason?    string\noptions?   string | createchanneloptions\n\n# returns\n\npromise<voicechannel>\n\n# inherited from\n\neris.client.createchannel\n\n# defined in\n\nnode_modules/eris/index.d.ts:2170\n\n▸ createchannel(guildid, name, type, reason?, options?): promise<categorychannel>\n\ndeprecated\n\n# parameters\n\nname       type\nguildid    string\nname       string\ntype       4\nreason?    string\noptions?   string | createchanneloptions\n\n# returns\n\npromise<categorychannel>\n\n# inherited from\n\neris.client.createchannel\n\n# defined in\n\nnode_modules/eris/index.d.ts:2178\n\n▸ createchannel(guildid, name, type, reason?, options?): promise<newschannel>\n\ndeprecated\n\n# parameters\n\nname       type\nguildid    string\nname       string\ntype       5\nreason?    string\noptions?   string | createchanneloptions\n\n# returns\n\npromise<newschannel>\n\n# inherited from\n\neris.client.createchannel\n\n# defined in\n\nnode_modules/eris/index.d.ts:2186\n\n▸ createchannel(guildid, name, type, reason?, options?): promise<storechannel>\n\ndeprecated\n\n# parameters\n\nname       type\nguildid    string\nname       string\ntype       6\nreason?    string\noptions?   string | createchanneloptions\n\n# returns\n\npromise<storechannel>\n\n# inherited from\n\neris.client.createchannel\n\n# defined in\n\nnode_modules/eris/index.d.ts:2194\n\n▸ createchannel(guildid, name, type, reason?, options?): promise<stagechannel>\n\ndeprecated\n\n# parameters\n\nname       type\nguildid    string\nname       string\ntype       13\nreason?    string\noptions?   string | createchanneloptions\n\n# returns\n\npromise<stagechannel>\n\n# inherited from\n\neris.client.createchannel\n\n# defined in\n\nnode_modules/eris/index.d.ts:2202\n\n▸ createchannel(guildid, name, type?, reason?, options?): promise<unknown>\n\ndeprecated\n\n# parameters\n\nname       type\nguildid    string\nname       string\ntype?      number\nreason?    string\noptions?   string | createchanneloptions\n\n# returns\n\npromise<unknown>\n\n# inherited from\n\neris.client.createchannel\n\n# defined in\n\nnode_modules/eris/index.d.ts:2210\n\n----------------------------------------\n\n\n# createchannelinvite\n\n▸ createchannelinvite(channelid, options?, reason?): promise<invite<\"withoutcount\", invitechannel>>\n\n# parameters\n\nname        type\nchannelid   string\noptions?    createchannelinviteoptions\nreason?     string\n\n# returns\n\npromise<invite<\"withoutcount\", invitechannel>>\n\n# inherited from\n\neris.client.createchannelinvite\n\n# defined in\n\nnode_modules/eris/index.d.ts:2217\n\n----------------------------------------\n\n\n# createchannelwebhook\n\n▸ createchannelwebhook(channelid, options, reason?): promise<webhook>\n\n# parameters\n\nname              type\nchannelid         string\noptions           object\noptions.avatar?   null | string\noptions.name      string\nreason?           string\n\n# returns\n\npromise<webhook>\n\n# inherited from\n\neris.client.createchannelwebhook\n\n# defined in\n\nnode_modules/eris/index.d.ts:2222\n\n----------------------------------------\n\n\n# createcommand\n\n▸ createcommand(command): promise<applicationcommand<2 | 1 | 3>>\n\n# parameters\n\nname      type\ncommand   applicationcommandstructure\n\n# returns\n\npromise<applicationcommand<2 | 1 | 3>>\n\n# inherited from\n\neris.client.createcommand\n\n# defined in\n\nnode_modules/eris/index.d.ts:2227\n\n----------------------------------------\n\n\n# creategroupchannel\n\n▸ creategroupchannel(userids): promise<groupchannel>\n\n# parameters\n\nname      type\nuserids   string[]\n\n# returns\n\npromise<groupchannel>\n\n# inherited from\n\neris.client.creategroupchannel\n\n# defined in\n\nnode_modules/eris/index.d.ts:2228\n\n----------------------------------------\n\n\n# createguild\n\n▸ createguild(name, options?): promise<guild>\n\n# parameters\n\nname       type\nname       string\noptions?   createguildoptions\n\n# returns\n\npromise<guild>\n\n# inherited from\n\neris.client.createguild\n\n# defined in\n\nnode_modules/eris/index.d.ts:2229\n\n----------------------------------------\n\n\n# createguildcommand\n\n▸ createguildcommand(guildid, command): promise<applicationcommand<2 | 1 | 3>>\n\n# parameters\n\nname      type\nguildid   string\ncommand   applicationcommandstructure\n\n# returns\n\npromise<applicationcommand<2 | 1 | 3>>\n\n# inherited from\n\neris.client.createguildcommand\n\n# defined in\n\nnode_modules/eris/index.d.ts:2230\n\n----------------------------------------\n\n\n# createguildemoji\n\n▸ createguildemoji(guildid, options, reason?): promise<emoji>\n\n# parameters\n\nname      type\nguildid   string\noptions   emojioptions\nreason?   string\n\n# returns\n\npromise<emoji>\n\n# inherited from\n\neris.client.createguildemoji\n\n# defined in\n\nnode_modules/eris/index.d.ts:2231\n\n----------------------------------------\n\n\n# createguildfromtemplate\n\n▸ createguildfromtemplate(code, name, icon?): promise<guild>\n\n# parameters\n\nname    type\ncode    string\nname    string\nicon?   string\n\n# returns\n\npromise<guild>\n\n# inherited from\n\neris.client.createguildfromtemplate\n\n# defined in\n\nnode_modules/eris/index.d.ts:2232\n\n----------------------------------------\n\n\n# createguildsticker\n\n▸ createguildsticker(guildid, options, reason?): promise<sticker>\n\n# parameters\n\nname      type\nguildid   string\noptions   createstickeroptions\nreason?   string\n\n# returns\n\npromise<sticker>\n\n# inherited from\n\neris.client.createguildsticker\n\n# defined in\n\nnode_modules/eris/index.d.ts:2233\n\n----------------------------------------\n\n\n# createguildtemplate\n\n▸ createguildtemplate(guildid, name, description?): promise<guildtemplate>\n\n# parameters\n\nname           type\nguildid        string\nname           string\ndescription?   null | string\n\n# returns\n\npromise<guildtemplate>\n\n# inherited from\n\neris.client.createguildtemplate\n\n# defined in\n\nnode_modules/eris/index.d.ts:2234\n\n----------------------------------------\n\n\n# createinteractionresponse\n\n▸ createinteractionresponse(interactionid, interactiontoken, options, file?): promise<void>\n\n# parameters\n\nname               type\ninteractionid      string\ninteractiontoken   string\noptions            interactionoptions\nfile?              filecontent | filecontent[]\n\n# returns\n\npromise<void>\n\n# inherited from\n\neris.client.createinteractionresponse\n\n# defined in\n\nnode_modules/eris/index.d.ts:2235\n\n----------------------------------------\n\n\n# createmessage\n\n▸ createmessage(channelid, content, file?): promise<message<textablechannel>>\n\n# parameters\n\nname        type\nchannelid   string\ncontent     messagecontent\nfile?       filecontent | filecontent[]\n\n# returns\n\npromise<message<textablechannel>>\n\n# inherited from\n\neris.client.createmessage\n\n# defined in\n\nnode_modules/eris/index.d.ts:2236\n\n----------------------------------------\n\n\n# createrole\n\n▸ createrole(guildid, options?, reason?): promise<role>\n\n# parameters\n\nname       type\nguildid    string\noptions?   roleoptions | role\nreason?    string\n\n# returns\n\npromise<role>\n\n# inherited from\n\neris.client.createrole\n\n# defined in\n\nnode_modules/eris/index.d.ts:2237\n\n----------------------------------------\n\n\n# createstageinstance\n\n▸ createstageinstance(channelid, options): promise<stageinstance>\n\n# parameters\n\nname        type\nchannelid   string\noptions     stageinstanceoptions\n\n# returns\n\npromise<stageinstance>\n\n# inherited from\n\neris.client.createstageinstance\n\n# defined in\n\nnode_modules/eris/index.d.ts:2238\n\n----------------------------------------\n\n\n# createthreadwithmessage\n\n▸ createthreadwithmessage(channelid, messageid, options): promise<newsthreadchannel | publicthreadchannel>\n\n# parameters\n\nname        type\nchannelid   string\nmessageid   string\noptions     createthreadoptions\n\n# returns\n\npromise<newsthreadchannel | publicthreadchannel>\n\n# inherited from\n\neris.client.createthreadwithmessage\n\n# defined in\n\nnode_modules/eris/index.d.ts:2239\n\n----------------------------------------\n\n\n# createthreadwithoutmessage\n\n▸ createthreadwithoutmessage(channelid, options): promise<privatethreadchannel>\n\n# parameters\n\nname        type\nchannelid   string\noptions     createthreadwithoutmessageoptions<10 | 12 | 11>\n\n# returns\n\npromise<privatethreadchannel>\n\n# inherited from\n\neris.client.createthreadwithoutmessage\n\n# defined in\n\nnode_modules/eris/index.d.ts:2240\n\n----------------------------------------\n\n\n# crosspostmessage\n\n▸ crosspostmessage(channelid, messageid): promise<message<textablechannel>>\n\n# parameters\n\nname        type\nchannelid   string\nmessageid   string\n\n# returns\n\npromise<message<textablechannel>>\n\n# inherited from\n\neris.client.crosspostmessage\n\n# defined in\n\nnode_modules/eris/index.d.ts:2241\n\n----------------------------------------\n\n\n# deletechannel\n\n▸ deletechannel(channelid, reason?): promise<void>\n\n# parameters\n\nname        type\nchannelid   string\nreason?     string\n\n# returns\n\npromise<void>\n\n# inherited from\n\neris.client.deletechannel\n\n# defined in\n\nnode_modules/eris/index.d.ts:2242\n\n----------------------------------------\n\n\n# deletechannelpermission\n\n▸ deletechannelpermission(channelid, overwriteid, reason?): promise<void>\n\n# parameters\n\nname          type\nchannelid     string\noverwriteid   string\nreason?       string\n\n# returns\n\npromise<void>\n\n# inherited from\n\neris.client.deletechannelpermission\n\n# defined in\n\nnode_modules/eris/index.d.ts:2243\n\n----------------------------------------\n\n\n# deletecommand\n\n▸ deletecommand(commandid): promise<void>\n\n# parameters\n\nname        type\ncommandid   string\n\n# returns\n\npromise<void>\n\n# inherited from\n\neris.client.deletecommand\n\n# defined in\n\nnode_modules/eris/index.d.ts:2244\n\n----------------------------------------\n\n\n# deleteguild\n\n▸ deleteguild(guildid): promise<void>\n\n# parameters\n\nname      type\nguildid   string\n\n# returns\n\npromise<void>\n\n# inherited from\n\neris.client.deleteguild\n\n# defined in\n\nnode_modules/eris/index.d.ts:2245\n\n----------------------------------------\n\n\n# deleteguildcommand\n\n▸ deleteguildcommand(guildid, commandid): promise<void>\n\n# parameters\n\nname        type\nguildid     string\ncommandid   string\n\n# returns\n\npromise<void>\n\n# inherited from\n\neris.client.deleteguildcommand\n\n# defined in\n\nnode_modules/eris/index.d.ts:2246\n\n----------------------------------------\n\n\n# deleteguilddiscoverysubcategory\n\n▸ deleteguilddiscoverysubcategory(guildid, categoryid, reason?): promise<void>\n\n# parameters\n\nname         type\nguildid      string\ncategoryid   string\nreason?      string\n\n# returns\n\npromise<void>\n\n# inherited from\n\neris.client.deleteguilddiscoverysubcategory\n\n# defined in\n\nnode_modules/eris/index.d.ts:2247\n\n----------------------------------------\n\n\n# deleteguildemoji\n\n▸ deleteguildemoji(guildid, emojiid, reason?): promise<void>\n\n# parameters\n\nname      type\nguildid   string\nemojiid   string\nreason?   string\n\n# returns\n\npromise<void>\n\n# inherited from\n\neris.client.deleteguildemoji\n\n# defined in\n\nnode_modules/eris/index.d.ts:2248\n\n----------------------------------------\n\n\n# deleteguildintegration\n\n▸ deleteguildintegration(guildid, integrationid): promise<void>\n\n# parameters\n\nname            type\nguildid         string\nintegrationid   string\n\n# returns\n\npromise<void>\n\n# inherited from\n\neris.client.deleteguildintegration\n\n# defined in\n\nnode_modules/eris/index.d.ts:2249\n\n----------------------------------------\n\n\n# deleteguildsticker\n\n▸ deleteguildsticker(guildid, stickerid, reason?): promise<void>\n\n# parameters\n\nname        type\nguildid     string\nstickerid   string\nreason?     string\n\n# returns\n\npromise<void>\n\n# inherited from\n\neris.client.deleteguildsticker\n\n# defined in\n\nnode_modules/eris/index.d.ts:2250\n\n----------------------------------------\n\n\n# deleteguildtemplate\n\n▸ deleteguildtemplate(guildid, code): promise<guildtemplate>\n\n# parameters\n\nname      type\nguildid   string\ncode      string\n\n# returns\n\npromise<guildtemplate>\n\n# inherited from\n\neris.client.deleteguildtemplate\n\n# defined in\n\nnode_modules/eris/index.d.ts:2251\n\n----------------------------------------\n\n\n# deleteinvite\n\n▸ deleteinvite(inviteid, reason?): promise<void>\n\n# parameters\n\nname       type\ninviteid   string\nreason?    string\n\n# returns\n\npromise<void>\n\n# inherited from\n\neris.client.deleteinvite\n\n# defined in\n\nnode_modules/eris/index.d.ts:2252\n\n----------------------------------------\n\n\n# deletemessage\n\n▸ deletemessage(channelid, messageid, reason?): promise<void>\n\n# parameters\n\nname        type\nchannelid   string\nmessageid   string\nreason?     string\n\n# returns\n\npromise<void>\n\n# inherited from\n\neris.client.deletemessage\n\n# defined in\n\nnode_modules/eris/index.d.ts:2253\n\n----------------------------------------\n\n\n# deletemessages\n\n▸ deletemessages(channelid, messageids, reason?): promise<void>\n\n# parameters\n\nname         type\nchannelid    string\nmessageids   string[]\nreason?      string\n\n# returns\n\npromise<void>\n\n# inherited from\n\neris.client.deletemessages\n\n# defined in\n\nnode_modules/eris/index.d.ts:2254\n\n----------------------------------------\n\n\n# deleterole\n\n▸ deleterole(guildid, roleid, reason?): promise<void>\n\n# parameters\n\nname      type\nguildid   string\nroleid    string\nreason?   string\n\n# returns\n\npromise<void>\n\n# inherited from\n\neris.client.deleterole\n\n# defined in\n\nnode_modules/eris/index.d.ts:2255\n\n----------------------------------------\n\n\n# deleteselfconnection\n\n▸ deleteselfconnection(platform, id): promise<void>\n\n# parameters\n\nname       type\nplatform   string\nid         string\n\n# returns\n\npromise<void>\n\n# inherited from\n\neris.client.deleteselfconnection\n\n# defined in\n\nnode_modules/eris/index.d.ts:2256\n\n----------------------------------------\n\n\n# deleteselfpremiumsubscription\n\n▸ deleteselfpremiumsubscription(): promise<void>\n\n# returns\n\npromise<void>\n\n# inherited from\n\neris.client.deleteselfpremiumsubscription\n\n# defined in\n\nnode_modules/eris/index.d.ts:2257\n\n----------------------------------------\n\n\n# deletestageinstance\n\n▸ deletestageinstance(channelid): promise<void>\n\n# parameters\n\nname        type\nchannelid   string\n\n# returns\n\npromise<void>\n\n# inherited from\n\neris.client.deletestageinstance\n\n# defined in\n\nnode_modules/eris/index.d.ts:2258\n\n----------------------------------------\n\n\n# deleteusernote\n\n▸ deleteusernote(userid): promise<void>\n\n# parameters\n\nname     type\nuserid   string\n\n# returns\n\npromise<void>\n\n# inherited from\n\neris.client.deleteusernote\n\n# defined in\n\nnode_modules/eris/index.d.ts:2259\n\n----------------------------------------\n\n\n# deletewebhook\n\n▸ deletewebhook(webhookid, token?, reason?): promise<void>\n\n# parameters\n\nname        type\nwebhookid   string\ntoken?      string\nreason?     string\n\n# returns\n\npromise<void>\n\n# inherited from\n\neris.client.deletewebhook\n\n# defined in\n\nnode_modules/eris/index.d.ts:2260\n\n----------------------------------------\n\n\n# deletewebhookmessage\n\n▸ deletewebhookmessage(webhookid, token, messageid): promise<void>\n\n# parameters\n\nname        type\nwebhookid   string\ntoken       string\nmessageid   string\n\n# returns\n\npromise<void>\n\n# inherited from\n\neris.client.deletewebhookmessage\n\n# defined in\n\nnode_modules/eris/index.d.ts:2261\n\n----------------------------------------\n\n\n# disableselfmfatotp\n\n▸ disableselfmfatotp(code): promise<{ token: string }>\n\n# parameters\n\nname   type\ncode   string\n\n# returns\n\npromise<{ token: string }>\n\n# inherited from\n\neris.client.disableselfmfatotp\n\n# defined in\n\nnode_modules/eris/index.d.ts:2262\n\n----------------------------------------\n\n\n# disconnect\n\n▸ disconnect(options): void\n\n# parameters\n\nname                 type\noptions              object\noptions.reconnect?   boolean | \"auto\"\n\n# returns\n\nvoid\n\n# inherited from\n\neris.client.disconnect\n\n# defined in\n\nnode_modules/eris/index.d.ts:2263\n\n----------------------------------------\n\n\n# editafk\n\n▸ editafk(afk): void\n\n# parameters\n\nname   type\nafk    boolean\n\n# returns\n\nvoid\n\n# inherited from\n\neris.client.editafk\n\n# defined in\n\nnode_modules/eris/index.d.ts:2264\n\n----------------------------------------\n\n\n# editchannel\n\n▸ editchannel(channelid, options, reason?): promise<groupchannel | anyguildchannel>\n\n# parameters\n\nname        type\nchannelid   string\noptions     editchanneloptions\nreason?     string\n\n# returns\n\npromise<groupchannel | anyguildchannel>\n\n# inherited from\n\neris.client.editchannel\n\n# defined in\n\nnode_modules/eris/index.d.ts:2265\n\n----------------------------------------\n\n\n# editchannelpermission\n\n▸ editchannelpermission(channelid, overwriteid, allow, deny, type, reason?): promise<void>\n\n# parameters\n\nname          type\nchannelid     string\noverwriteid   string\nallow         number | bigint\ndeny          number | bigint\ntype          permissiontype\nreason?       string\n\n# returns\n\npromise<void>\n\n# inherited from\n\neris.client.editchannelpermission\n\n# defined in\n\nnode_modules/eris/index.d.ts:2270\n\n----------------------------------------\n\n\n# editchannelposition\n\n▸ editchannelposition(channelid, position, options?): promise<void>\n\n# parameters\n\nname        type\nchannelid   string\nposition    number\noptions?    editchannelpositionoptions\n\n# returns\n\npromise<void>\n\n# inherited from\n\neris.client.editchannelposition\n\n# defined in\n\nnode_modules/eris/index.d.ts:2278\n\n----------------------------------------\n\n\n# editcommand\n\n▸ editcommand(commandid, command): promise<applicationcommand<2 | 1 | 3>>\n\n# parameters\n\nname        type\ncommandid   string\ncommand     applicationcommandstructure\n\n# returns\n\npromise<applicationcommand<2 | 1 | 3>>\n\n# inherited from\n\neris.client.editcommand\n\n# defined in\n\nnode_modules/eris/index.d.ts:2279\n\n----------------------------------------\n\n\n# editcommandpermissions\n\n▸ editcommandpermissions(guildid, commandid, permissions): promise<guildapplicationcommandpermissions>\n\n# parameters\n\nname          type\nguildid       string\ncommandid     string\npermissions   applicationcommandpermissions[]\n\n# returns\n\npromise<guildapplicationcommandpermissions>\n\n# inherited from\n\neris.client.editcommandpermissions\n\n# defined in\n\nnode_modules/eris/index.d.ts:2280\n\n----------------------------------------\n\n\n# editguild\n\n▸ editguild(guildid, options, reason?): promise<guild>\n\n# parameters\n\nname      type\nguildid   string\noptions   guildoptions\nreason?   string\n\n# returns\n\npromise<guild>\n\n# inherited from\n\neris.client.editguild\n\n# defined in\n\nnode_modules/eris/index.d.ts:2281\n\n----------------------------------------\n\n\n# editguildcommand\n\n▸ editguildcommand(guildid, commandid, command): promise<applicationcommand<2 | 1 | 3>>\n\n# parameters\n\nname        type\nguildid     string\ncommandid   string\ncommand     applicationcommandstructure\n\n# returns\n\npromise<applicationcommand<2 | 1 | 3>>\n\n# inherited from\n\neris.client.editguildcommand\n\n# defined in\n\nnode_modules/eris/index.d.ts:2282\n\n----------------------------------------\n\n\n# editguilddiscovery\n\n▸ editguilddiscovery(guildid, options?): promise<discoverymetadata>\n\n# parameters\n\nname       type\nguildid    string\noptions?   discoveryoptions\n\n# returns\n\npromise<discoverymetadata>\n\n# inherited from\n\neris.client.editguilddiscovery\n\n# defined in\n\nnode_modules/eris/index.d.ts:2283\n\n----------------------------------------\n\n\n# editguildemoji\n\n▸ editguildemoji(guildid, emojiid, options, reason?): promise<emoji>\n\n# parameters\n\nname             type\nguildid          string\nemojiid          string\noptions          object\noptions.name?    string\noptions.roles?   string[]\nreason?          string\n\n# returns\n\npromise<emoji>\n\n# inherited from\n\neris.client.editguildemoji\n\n# defined in\n\nnode_modules/eris/index.d.ts:2284\n\n----------------------------------------\n\n\n# editguildintegration\n\n▸ editguildintegration(guildid, integrationid, options): promise<void>\n\n# parameters\n\nname            type\nguildid         string\nintegrationid   string\noptions         integrationoptions\n\n# returns\n\npromise<void>\n\n# inherited from\n\neris.client.editguildintegration\n\n# defined in\n\nnode_modules/eris/index.d.ts:2290\n\n----------------------------------------\n\n\n# editguildmember\n\n▸ editguildmember(guildid, memberid, options, reason?): promise<member>\n\n# parameters\n\nname       type\nguildid    string\nmemberid   string\noptions    memberoptions\nreason?    string\n\n# returns\n\npromise<member>\n\n# inherited from\n\neris.client.editguildmember\n\n# defined in\n\nnode_modules/eris/index.d.ts:2291\n\n----------------------------------------\n\n\n# editguildsticker\n\n▸ editguildsticker(guildid, stickerid, options?, reason?): promise<sticker>\n\n# parameters\n\nname        type\nguildid     string\nstickerid   string\noptions?    editstickeroptions\nreason?     string\n\n# returns\n\npromise<sticker>\n\n# inherited from\n\neris.client.editguildsticker\n\n# defined in\n\nnode_modules/eris/index.d.ts:2292\n\n----------------------------------------\n\n\n# editguildtemplate\n\n▸ editguildtemplate(guildid, code, options): promise<guildtemplate>\n\n# parameters\n\nname      type\nguildid   string\ncode      string\noptions   guildtemplateoptions\n\n# returns\n\npromise<guildtemplate>\n\n# inherited from\n\neris.client.editguildtemplate\n\n# defined in\n\nnode_modules/eris/index.d.ts:2293\n\n----------------------------------------\n\n\n# editguildvanity\n\n▸ editguildvanity(guildid, code): promise<guildvanity>\n\n# parameters\n\nname      type\nguildid   string\ncode      null | string\n\n# returns\n\npromise<guildvanity>\n\n# inherited from\n\neris.client.editguildvanity\n\n# defined in\n\nnode_modules/eris/index.d.ts:2294\n\n----------------------------------------\n\n\n# editguildvoicestate\n\n▸ editguildvoicestate(guildid, options, userid?): promise<void>\n\n# parameters\n\nname      type\nguildid   string\noptions   voicestateoptions\nuserid?   string\n\n# returns\n\npromise<void>\n\n# inherited from\n\neris.client.editguildvoicestate\n\n# defined in\n\nnode_modules/eris/index.d.ts:2295\n\n----------------------------------------\n\n\n# editguildwelcomescreen\n\n▸ editguildwelcomescreen(guildid, options): promise<welcomescreen>\n\n# parameters\n\nname      type\nguildid   string\noptions   welcomescreenoptions\n\n# returns\n\npromise<welcomescreen>\n\n# inherited from\n\neris.client.editguildwelcomescreen\n\n# defined in\n\nnode_modules/eris/index.d.ts:2296\n\n----------------------------------------\n\n\n# editguildwidget\n\n▸ editguildwidget(guildid, options): promise<widget>\n\n# parameters\n\nname      type\nguildid   string\noptions   widget\n\n# returns\n\npromise<widget>\n\n# inherited from\n\neris.client.editguildwidget\n\n# defined in\n\nnode_modules/eris/index.d.ts:2297\n\n----------------------------------------\n\n\n# editmessage\n\n▸ editmessage(channelid, messageid, content): promise<message<textablechannel>>\n\n# parameters\n\nname        type\nchannelid   string\nmessageid   string\ncontent     messagecontentedit\n\n# returns\n\npromise<message<textablechannel>>\n\n# inherited from\n\neris.client.editmessage\n\n# defined in\n\nnode_modules/eris/index.d.ts:2298\n\n----------------------------------------\n\n\n# editnickname\n\n▸ editnickname(guildid, nick, reason?): promise<void>\n\ndeprecated\n\n# parameters\n\nname      type\nguildid   string\nnick      string\nreason?   string\n\n# returns\n\npromise<void>\n\n# inherited from\n\neris.client.editnickname\n\n# defined in\n\nnode_modules/eris/index.d.ts:2300\n\n----------------------------------------\n\n\n# editrole\n\n▸ editrole(guildid, roleid, options, reason?): promise<role>\n\n# parameters\n\nname      type\nguildid   string\nroleid    string\noptions   roleoptions\nreason?   string\n\n# returns\n\npromise<role>\n\n# inherited from\n\neris.client.editrole\n\n# defined in\n\nnode_modules/eris/index.d.ts:2301\n\n----------------------------------------\n\n\n# editroleposition\n\n▸ editroleposition(guildid, roleid, position): promise<void>\n\n# parameters\n\nname       type\nguildid    string\nroleid     string\nposition   number\n\n# returns\n\npromise<void>\n\n# inherited from\n\neris.client.editroleposition\n\n# defined in\n\nnode_modules/eris/index.d.ts:2302\n\n----------------------------------------\n\n\n# editself\n\n▸ editself(options): promise<extendeduser>\n\n# parameters\n\nname                type\noptions             object\noptions.avatar?     string\noptions.username?   string\n\n# returns\n\npromise<extendeduser>\n\n# inherited from\n\neris.client.editself\n\n# defined in\n\nnode_modules/eris/index.d.ts:2303\n\n----------------------------------------\n\n\n# editselfconnection\n\n▸ editselfconnection(platform, id, data): promise<connection>\n\n# parameters\n\nname              type\nplatform          string\nid                string\ndata              object\ndata.friendsync   boolean\ndata.visibility   number\n\n# returns\n\npromise<connection>\n\n# inherited from\n\neris.client.editselfconnection\n\n# defined in\n\nnode_modules/eris/index.d.ts:2304\n\n----------------------------------------\n\n\n# editselfsettings\n\n▸ editselfsettings(data): promise<usersettings>\n\n# parameters\n\nname   type\ndata   usersettings\n\n# returns\n\npromise<usersettings>\n\n# inherited from\n\neris.client.editselfsettings\n\n# defined in\n\nnode_modules/eris/index.d.ts:2309\n\n----------------------------------------\n\n\n# editstageinstance\n\n▸ editstageinstance(channelid, options): promise<stageinstance>\n\n# parameters\n\nname        type\nchannelid   string\noptions     stageinstanceoptions\n\n# returns\n\npromise<stageinstance>\n\n# inherited from\n\neris.client.editstageinstance\n\n# defined in\n\nnode_modules/eris/index.d.ts:2310\n\n----------------------------------------\n\n\n# editstatus\n\n▸ editstatus(status, activities?): void\n\n# parameters\n\nname          type\nstatus        status\nactivities?   activitypartial<botactivitytype> |\n              activitypartial<botactivitytype>[]\n\n# returns\n\nvoid\n\n# inherited from\n\neris.client.editstatus\n\n# defined in\n\nnode_modules/eris/index.d.ts:2311\n\n▸ editstatus(activities?): void\n\n# parameters\n\nname          type\nactivities?   activitypartial<botactivitytype> |\n              activitypartial<botactivitytype>[]\n\n# returns\n\nvoid\n\n# inherited from\n\neris.client.editstatus\n\n# defined in\n\nnode_modules/eris/index.d.ts:2312\n\n----------------------------------------\n\n\n# editusernote\n\n▸ editusernote(userid, note): promise<void>\n\n# parameters\n\nname     type\nuserid   string\nnote     string\n\n# returns\n\npromise<void>\n\n# inherited from\n\neris.client.editusernote\n\n# defined in\n\nnode_modules/eris/index.d.ts:2313\n\n----------------------------------------\n\n\n# editwebhook\n\n▸ editwebhook(webhookid, options, token?, reason?): promise<webhook>\n\n# parameters\n\nname        type\nwebhookid   string\noptions     webhookoptions\ntoken?      string\nreason?     string\n\n# returns\n\npromise<webhook>\n\n# inherited from\n\neris.client.editwebhook\n\n# defined in\n\nnode_modules/eris/index.d.ts:2314\n\n----------------------------------------\n\n\n# editwebhookmessage\n\n▸ editwebhookmessage(webhookid, token, messageid, options): promise<message<guildtextablechannel>>\n\n# parameters\n\nname        type\nwebhookid   string\ntoken       string\nmessageid   string\noptions     messagewebhookcontent\n\n# returns\n\npromise<message<guildtextablechannel>>\n\n# inherited from\n\neris.client.editwebhookmessage\n\n# defined in\n\nnode_modules/eris/index.d.ts:2320\n\n----------------------------------------\n\n\n# emit\n\n▸ emit<k>(event, ...args): boolean\n\n# type parameters\n\nname   type\nk      extends keyof clientevents\n\n# parameters\n\nname      type\nevent     k\n...args   clientevents[k]\n\n# returns\n\nboolean\n\n# inherited from\n\neris.client.emit\n\n# defined in\n\nnode_modules/eris/index.d.ts:2326\n\n▸ emit(event, ...args): boolean\n\n# parameters\n\nname      type\nevent     string\n...args   any[]\n\n# returns\n\nboolean\n\n# inherited from\n\neris.client.emit\n\n# defined in\n\nnode_modules/eris/index.d.ts:2327\n\n----------------------------------------\n\n\n# enableselfmfatotp\n\n▸ enableselfmfatotp(secret, code): promise<{ backup_codes: { code: string ; consumed: boolean }[] ; token: string }>\n\n# parameters\n\nname     type\nsecret   string\ncode     string\n\n# returns\n\npromise<{ backup_codes: { code: string ; consumed: boolean }[] ; token: string }>\n\n# inherited from\n\neris.client.enableselfmfatotp\n\n# defined in\n\nnode_modules/eris/index.d.ts:2328\n\n----------------------------------------\n\n\n# eventnames\n\n▸ eventnames(): (string | symbol)[]\n\nreturns an array listing the events for which the emitter has registered listeners. the values in the array are strings or symbols.\n\nconst eventemitter = require('events');\nconst myee = new eventemitter();\nmyee.on('foo', () => {});\nmyee.on('bar', () => {});\n\nconst sym = symbol('symbol');\nmyee.on(sym, () => {});\n\nconsole.log(myee.eventnames());\n// prints: [ 'foo', 'bar', symbol(symbol) ]\n\n\nsince v6.0.0\n\n# returns\n\n(string | symbol)[]\n\n# inherited from\n\neris.client.eventnames\n\n# defined in\n\nnode_modules/@types/node/events.d.ts:642\n\n----------------------------------------\n\n\n# executeslackwebhook\n\n▸ executeslackwebhook(webhookid, token, options): promise<void>\n\n# parameters\n\nname        type\nwebhookid   string\ntoken       string\noptions     record<string, unknown> & { auth?: boolean ; threadid?:\n            string }\n\n# returns\n\npromise<void>\n\n# inherited from\n\neris.client.executeslackwebhook\n\n# defined in\n\nnode_modules/eris/index.d.ts:2332\n\n▸ executeslackwebhook(webhookid, token, options): promise<message<guildtextablechannel>>\n\n# parameters\n\nname        type\nwebhookid   string\ntoken       string\noptions     record<string, unknown> & { auth?: boolean ; threadid?:\n            string ; wait: true }\n\n# returns\n\npromise<message<guildtextablechannel>>\n\n# inherited from\n\neris.client.executeslackwebhook\n\n# defined in\n\nnode_modules/eris/index.d.ts:2333\n\n----------------------------------------\n\n\n# executewebhook\n\n▸ executewebhook(webhookid, token, options): promise<message<guildtextablechannel>>\n\n# parameters\n\nname        type\nwebhookid   string\ntoken       string\noptions     webhookpayload & { wait: true }\n\n# returns\n\npromise<message<guildtextablechannel>>\n\n# inherited from\n\neris.client.executewebhook\n\n# defined in\n\nnode_modules/eris/index.d.ts:2334\n\n▸ executewebhook(webhookid, token, options): promise<void>\n\n# parameters\n\nname        type\nwebhookid   string\ntoken       string\noptions     webhookpayload\n\n# returns\n\npromise<void>\n\n# inherited from\n\neris.client.executewebhook\n\n# defined in\n\nnode_modules/eris/index.d.ts:2335\n\n----------------------------------------\n\n\n# fetchprefix\n\n▸ fetchprefix(message): undefined | string\n\n# parameters\n\nname      type\nmessage   message<textablechannel>\n\n# returns\n\nundefined | string\n\n# defined in\n\nsrc/cofoclient.ts:35\n\n----------------------------------------\n\n\n# followchannel\n\n▸ followchannel(channelid, webhookchannelid): promise<channelfollow>\n\n# parameters\n\nname               type\nchannelid          string\nwebhookchannelid   string\n\n# returns\n\npromise<channelfollow>\n\n# inherited from\n\neris.client.followchannel\n\n# defined in\n\nnode_modules/eris/index.d.ts:2336\n\n----------------------------------------\n\n\n# getactiveguildthreads\n\n▸ getactiveguildthreads(guildid): promise<listedguildthreads<anythreadchannel>>\n\n# parameters\n\nname      type\nguildid   string\n\n# returns\n\npromise<listedguildthreads<anythreadchannel>>\n\n# inherited from\n\neris.client.getactiveguildthreads\n\n# defined in\n\nnode_modules/eris/index.d.ts:2337\n\n----------------------------------------\n\n\n# getactivethreads\n\n▸ getactivethreads(channelid): promise<listedchannelthreads<anythreadchannel>>\n\ndeprecated\n\n# parameters\n\nname        type\nchannelid   string\n\n# returns\n\npromise<listedchannelthreads<anythreadchannel>>\n\n# inherited from\n\neris.client.getactivethreads\n\n# defined in\n\nnode_modules/eris/index.d.ts:2339\n\n----------------------------------------\n\n\n# getarchivedthreads\n\n▸ getarchivedthreads(channelid, type, options?): promise<listedchannelthreads<privatethreadchannel>>\n\n# parameters\n\nname        type\nchannelid   string\ntype        \"private\"\noptions?    getarchivedthreadsoptions\n\n# returns\n\npromise<listedchannelthreads<privatethreadchannel>>\n\n# inherited from\n\neris.client.getarchivedthreads\n\n# defined in\n\nnode_modules/eris/index.d.ts:2340\n\n▸ getarchivedthreads(channelid, type, options?): promise<listedchannelthreads<publicthreadchannel>>\n\n# parameters\n\nname        type\nchannelid   string\ntype        \"public\"\noptions?    getarchivedthreadsoptions\n\n# returns\n\npromise<listedchannelthreads<publicthreadchannel>>\n\n# inherited from\n\neris.client.getarchivedthreads\n\n# defined in\n\nnode_modules/eris/index.d.ts:2341\n\n----------------------------------------\n\n\n# getbotgateway\n\n▸ getbotgateway(): promise<{ session_start_limit: { max_concurrency: number ; remaining: number ; reset_after: number ; total: number } ; shards: number ; url: string }>\n\n# returns\n\npromise<{ session_start_limit: { max_concurrency: number ; remaining: number ; reset_after: number ; total: number } ; shards: number ; url: string }>\n\n# inherited from\n\neris.client.getbotgateway\n\n# defined in\n\nnode_modules/eris/index.d.ts:2342\n\n----------------------------------------\n\n\n# getchannel\n\n▸ getchannel(channelid): anychannel\n\n# parameters\n\nname        type\nchannelid   string\n\n# returns\n\nanychannel\n\n# inherited from\n\neris.client.getchannel\n\n# defined in\n\nnode_modules/eris/index.d.ts:2343\n\n----------------------------------------\n\n\n# getchannelinvites\n\n▸ getchannelinvites(channelid): promise<invite<\"withmetadata\", invitechannel>[]>\n\n# parameters\n\nname        type\nchannelid   string\n\n# returns\n\npromise<invite<\"withmetadata\", invitechannel>[]>\n\n# inherited from\n\neris.client.getchannelinvites\n\n# defined in\n\nnode_modules/eris/index.d.ts:2344\n\n----------------------------------------\n\n\n# getchannelwebhooks\n\n▸ getchannelwebhooks(channelid): promise<webhook[]>\n\n# parameters\n\nname        type\nchannelid   string\n\n# returns\n\npromise<webhook[]>\n\n# inherited from\n\neris.client.getchannelwebhooks\n\n# defined in\n\nnode_modules/eris/index.d.ts:2345\n\n----------------------------------------\n\n\n# getcommand\n\n▸ getcommand(commandid): promise<applicationcommand<2 | 1 | 3>>\n\n# parameters\n\nname        type\ncommandid   string\n\n# returns\n\npromise<applicationcommand<2 | 1 | 3>>\n\n# inherited from\n\neris.client.getcommand\n\n# defined in\n\nnode_modules/eris/index.d.ts:2346\n\n----------------------------------------\n\n\n# getcommandpermissions\n\n▸ getcommandpermissions(guildid, commandid): promise<guildapplicationcommandpermissions>\n\n# parameters\n\nname        type\nguildid     string\ncommandid   string\n\n# returns\n\npromise<guildapplicationcommandpermissions>\n\n# inherited from\n\neris.client.getcommandpermissions\n\n# defined in\n\nnode_modules/eris/index.d.ts:2347\n\n----------------------------------------\n\n\n# getcommands\n\n▸ getcommands(): promise<applicationcommand<2 | 1 | 3>[]>\n\n# returns\n\npromise<applicationcommand<2 | 1 | 3>[]>\n\n# inherited from\n\neris.client.getcommands\n\n# defined in\n\nnode_modules/eris/index.d.ts:2348\n\n----------------------------------------\n\n\n# getdmchannel\n\n▸ getdmchannel(userid): promise<privatechannel>\n\n# parameters\n\nname     type\nuserid   string\n\n# returns\n\npromise<privatechannel>\n\n# inherited from\n\neris.client.getdmchannel\n\n# defined in\n\nnode_modules/eris/index.d.ts:2350\n\n----------------------------------------\n\n\n# getdiscoverycategories\n\n▸ getdiscoverycategories(): promise<discoverycategory[]>\n\n# returns\n\npromise<discoverycategory[]>\n\n# inherited from\n\neris.client.getdiscoverycategories\n\n# defined in\n\nnode_modules/eris/index.d.ts:2349\n\n----------------------------------------\n\n\n# getemojiguild\n\n▸ getemojiguild(emojiid): promise<guild>\n\n# parameters\n\nname      type\nemojiid   string\n\n# returns\n\npromise<guild>\n\n# inherited from\n\neris.client.getemojiguild\n\n# defined in\n\nnode_modules/eris/index.d.ts:2351\n\n----------------------------------------\n\n\n# getgateway\n\n▸ getgateway(): promise<{ url: string }>\n\n# returns\n\npromise<{ url: string }>\n\n# inherited from\n\neris.client.getgateway\n\n# defined in\n\nnode_modules/eris/index.d.ts:2352\n\n----------------------------------------\n\n\n# getguildauditlog\n\n▸ getguildauditlog(guildid, options?): promise<guildauditlog>\n\n# parameters\n\nname       type\nguildid    string\noptions?   getguildauditlogoptions\n\n# returns\n\npromise<guildauditlog>\n\n# inherited from\n\neris.client.getguildauditlog\n\n# defined in\n\nnode_modules/eris/index.d.ts:2353\n\n----------------------------------------\n\n\n# getguildauditlogs\n\n▸ getguildauditlogs(guildid, limit?, before?, actiontype?, userid?): promise<guildauditlog>\n\ndeprecated\n\n# parameters\n\nname          type\nguildid       string\nlimit?        number\nbefore?       string\nactiontype?   number\nuserid?       string\n\n# returns\n\npromise<guildauditlog>\n\n# inherited from\n\neris.client.getguildauditlogs\n\n# defined in\n\nnode_modules/eris/index.d.ts:2355\n\n----------------------------------------\n\n\n# getguildban\n\n▸ getguildban(guildid, userid): promise<{ reason?: string ; user: user }>\n\n# parameters\n\nname      type\nguildid   string\nuserid    string\n\n# returns\n\npromise<{ reason?: string ; user: user }>\n\n# inherited from\n\neris.client.getguildban\n\n# defined in\n\nnode_modules/eris/index.d.ts:2356\n\n----------------------------------------\n\n\n# getguildbans\n\n▸ getguildbans(guildid): promise<{ reason?: string ; user: user }[]>\n\n# parameters\n\nname      type\nguildid   string\n\n# returns\n\npromise<{ reason?: string ; user: user }[]>\n\n# inherited from\n\neris.client.getguildbans\n\n# defined in\n\nnode_modules/eris/index.d.ts:2357\n\n----------------------------------------\n\n\n# getguildcommand\n\n▸ getguildcommand(guildid, commandid): promise<applicationcommand<2 | 1 | 3>>\n\n# parameters\n\nname        type\nguildid     string\ncommandid   string\n\n# returns\n\npromise<applicationcommand<2 | 1 | 3>>\n\n# inherited from\n\neris.client.getguildcommand\n\n# defined in\n\nnode_modules/eris/index.d.ts:2358\n\n----------------------------------------\n\n\n# getguildcommandpermissions\n\n▸ getguildcommandpermissions(guildid): promise<guildapplicationcommandpermissions[]>\n\n# parameters\n\nname      type\nguildid   string\n\n# returns\n\npromise<guildapplicationcommandpermissions[]>\n\n# inherited from\n\neris.client.getguildcommandpermissions\n\n# defined in\n\nnode_modules/eris/index.d.ts:2359\n\n----------------------------------------\n\n\n# getguildcommands\n\n▸ getguildcommands(guildid): promise<applicationcommand<2 | 1 | 3>[]>\n\n# parameters\n\nname      type\nguildid   string\n\n# returns\n\npromise<applicationcommand<2 | 1 | 3>[]>\n\n# inherited from\n\neris.client.getguildcommands\n\n# defined in\n\nnode_modules/eris/index.d.ts:2360\n\n----------------------------------------\n\n\n# getguilddiscovery\n\n▸ getguilddiscovery(guildid): promise<discoverymetadata>\n\n# parameters\n\nname      type\nguildid   string\n\n# returns\n\npromise<discoverymetadata>\n\n# inherited from\n\neris.client.getguilddiscovery\n\n# defined in\n\nnode_modules/eris/index.d.ts:2361\n\n----------------------------------------\n\n\n# getguildembed\n\n▸ getguildembed(guildid): promise<widget>\n\ndeprecated\n\n# parameters\n\nname      type\nguildid   string\n\n# returns\n\npromise<widget>\n\n# inherited from\n\neris.client.getguildembed\n\n# defined in\n\nnode_modules/eris/index.d.ts:2363\n\n----------------------------------------\n\n\n# getguildintegrations\n\n▸ getguildintegrations(guildid): promise<guildintegration[]>\n\n# parameters\n\nname      type\nguildid   string\n\n# returns\n\npromise<guildintegration[]>\n\n# inherited from\n\neris.client.getguildintegrations\n\n# defined in\n\nnode_modules/eris/index.d.ts:2364\n\n----------------------------------------\n\n\n# getguildinvites\n\n▸ getguildinvites(guildid): promise<invite<\"withmetadata\", invitechannel>[]>\n\n# parameters\n\nname      type\nguildid   string\n\n# returns\n\npromise<invite<\"withmetadata\", invitechannel>[]>\n\n# inherited from\n\neris.client.getguildinvites\n\n# defined in\n\nnode_modules/eris/index.d.ts:2365\n\n----------------------------------------\n\n\n# getguildpreview\n\n▸ getguildpreview(guildid): promise<guildpreview>\n\n# parameters\n\nname      type\nguildid   string\n\n# returns\n\npromise<guildpreview>\n\n# inherited from\n\neris.client.getguildpreview\n\n# defined in\n\nnode_modules/eris/index.d.ts:2366\n\n----------------------------------------\n\n\n# getguildtemplate\n\n▸ getguildtemplate(code): promise<guildtemplate>\n\n# parameters\n\nname   type\ncode   string\n\n# returns\n\npromise<guildtemplate>\n\n# inherited from\n\neris.client.getguildtemplate\n\n# defined in\n\nnode_modules/eris/index.d.ts:2367\n\n----------------------------------------\n\n\n# getguildtemplates\n\n▸ getguildtemplates(guildid): promise<guildtemplate[]>\n\n# parameters\n\nname      type\nguildid   string\n\n# returns\n\npromise<guildtemplate[]>\n\n# inherited from\n\neris.client.getguildtemplates\n\n# defined in\n\nnode_modules/eris/index.d.ts:2368\n\n----------------------------------------\n\n\n# getguildvanity\n\n▸ getguildvanity(guildid): promise<guildvanity>\n\n# parameters\n\nname      type\nguildid   string\n\n# returns\n\npromise<guildvanity>\n\n# inherited from\n\neris.client.getguildvanity\n\n# defined in\n\nnode_modules/eris/index.d.ts:2369\n\n----------------------------------------\n\n\n# getguildwebhooks\n\n▸ getguildwebhooks(guildid): promise<webhook[]>\n\n# parameters\n\nname      type\nguildid   string\n\n# returns\n\npromise<webhook[]>\n\n# inherited from\n\neris.client.getguildwebhooks\n\n# defined in\n\nnode_modules/eris/index.d.ts:2370\n\n----------------------------------------\n\n\n# getguildwelcomescreen\n\n▸ getguildwelcomescreen(guildid): promise<welcomescreen>\n\n# parameters\n\nname      type\nguildid   string\n\n# returns\n\npromise<welcomescreen>\n\n# inherited from\n\neris.client.getguildwelcomescreen\n\n# defined in\n\nnode_modules/eris/index.d.ts:2371\n\n----------------------------------------\n\n\n# getguildwidget\n\n▸ getguildwidget(guildid): promise<widgetdata>\n\n# parameters\n\nname      type\nguildid   string\n\n# returns\n\npromise<widgetdata>\n\n# inherited from\n\neris.client.getguildwidget\n\n# defined in\n\nnode_modules/eris/index.d.ts:2372\n\n----------------------------------------\n\n\n# getguildwidgetsettings\n\n▸ getguildwidgetsettings(guildid): promise<widget>\n\n# parameters\n\nname      type\nguildid   string\n\n# returns\n\npromise<widget>\n\n# inherited from\n\neris.client.getguildwidgetsettings\n\n# defined in\n\nnode_modules/eris/index.d.ts:2373\n\n----------------------------------------\n\n\n# getinvite\n\n▸ getinvite(inviteid, withcounts?): promise<invite<\"withoutcount\", invitechannel>>\n\n# parameters\n\nname          type\ninviteid      string\nwithcounts?   false\n\n# returns\n\npromise<invite<\"withoutcount\", invitechannel>>\n\n# inherited from\n\neris.client.getinvite\n\n# defined in\n\nnode_modules/eris/index.d.ts:2374\n\n▸ getinvite(inviteid, withcounts): promise<invite<\"withcount\", invitechannel>>\n\n# parameters\n\nname         type\ninviteid     string\nwithcounts   true\n\n# returns\n\npromise<invite<\"withcount\", invitechannel>>\n\n# inherited from\n\neris.client.getinvite\n\n# defined in\n\nnode_modules/eris/index.d.ts:2375\n\n----------------------------------------\n\n\n# getjoinedprivatearchivedthreads\n\n▸ getjoinedprivatearchivedthreads(channelid, options?): promise<listedchannelthreads<privatethreadchannel>>\n\n# parameters\n\nname        type\nchannelid   string\noptions?    getarchivedthreadsoptions\n\n# returns\n\npromise<listedchannelthreads<privatethreadchannel>>\n\n# inherited from\n\neris.client.getjoinedprivatearchivedthreads\n\n# defined in\n\nnode_modules/eris/index.d.ts:2376\n\n----------------------------------------\n\n\n# getmaxlisteners\n\n▸ getmaxlisteners(): number\n\nreturns the current max listener value for the eventemitter which is either set by emitter.setmaxlisteners(n) or defaults to defaultmaxlisteners.\n\nsince v1.0.0\n\n# returns\n\nnumber\n\n# inherited from\n\neris.client.getmaxlisteners\n\n# defined in\n\nnode_modules/@types/node/events.d.ts:499\n\n----------------------------------------\n\n\n# getmessage\n\n▸ getmessage(channelid, messageid): promise<message<textablechannel>>\n\n# parameters\n\nname        type\nchannelid   string\nmessageid   string\n\n# returns\n\npromise<message<textablechannel>>\n\n# inherited from\n\neris.client.getmessage\n\n# defined in\n\nnode_modules/eris/index.d.ts:2377\n\n----------------------------------------\n\n\n# getmessagereaction\n\n▸ getmessagereaction(channelid, messageid, reaction, options?): promise<user[]>\n\ndeprecated\n\n# parameters\n\nname        type\nchannelid   string\nmessageid   string\nreaction    string\noptions?    getmessagereactionoptions\n\n# returns\n\npromise<user[]>\n\n# inherited from\n\neris.client.getmessagereaction\n\n# defined in\n\nnode_modules/eris/index.d.ts:2378\n\n▸ getmessagereaction(channelid, messageid, reaction, limit?, before?, after?): promise<user[]>\n\ndeprecated\n\n# parameters\n\nname        type\nchannelid   string\nmessageid   string\nreaction    string\nlimit?      number\nbefore?     string\nafter?      string\n\n# returns\n\npromise<user[]>\n\n# inherited from\n\neris.client.getmessagereaction\n\n# defined in\n\nnode_modules/eris/index.d.ts:2380\n\n----------------------------------------\n\n\n# getmessages\n\n▸ getmessages(channelid, options?): promise<message<textablechannel>[]>\n\ndeprecated\n\n# parameters\n\nname        type\nchannelid   string\noptions?    getmessagesoptions\n\n# returns\n\npromise<message<textablechannel>[]>\n\n# inherited from\n\neris.client.getmessages\n\n# defined in\n\nnode_modules/eris/index.d.ts:2381\n\n▸ getmessages(channelid, limit?, before?, after?, around?): promise<message<textablechannel>[]>\n\ndeprecated\n\n# parameters\n\nname        type\nchannelid   string\nlimit?      number\nbefore?     string\nafter?      string\naround?     string\n\n# returns\n\npromise<message<textablechannel>[]>\n\n# inherited from\n\neris.client.getmessages\n\n# defined in\n\nnode_modules/eris/index.d.ts:2383\n\n----------------------------------------\n\n\n# getnitrostickerpacks\n\n▸ getnitrostickerpacks(): promise<{ sticker_packs: stickerpack[] }>\n\n# returns\n\npromise<{ sticker_packs: stickerpack[] }>\n\n# inherited from\n\neris.client.getnitrostickerpacks\n\n# defined in\n\nnode_modules/eris/index.d.ts:2384\n\n----------------------------------------\n\n\n# getoauthapplication\n\n▸ getoauthapplication(appid?): promise<oauthapplicationinfo>\n\n# parameters\n\nname     type\nappid?   string\n\n# returns\n\npromise<oauthapplicationinfo>\n\n# inherited from\n\neris.client.getoauthapplication\n\n# defined in\n\nnode_modules/eris/index.d.ts:2385\n\n----------------------------------------\n\n\n# getpins\n\n▸ getpins(channelid): promise<message<textablechannel>[]>\n\n# parameters\n\nname        type\nchannelid   string\n\n# returns\n\npromise<message<textablechannel>[]>\n\n# inherited from\n\neris.client.getpins\n\n# defined in\n\nnode_modules/eris/index.d.ts:2386\n\n----------------------------------------\n\n\n# getprunecount\n\n▸ getprunecount(guildid, options?): promise<number>\n\n# parameters\n\nname       type\nguildid    string\noptions?   getpruneoptions\n\n# returns\n\npromise<number>\n\n# inherited from\n\neris.client.getprunecount\n\n# defined in\n\nnode_modules/eris/index.d.ts:2387\n\n----------------------------------------\n\n\n# getrestchannel\n\n▸ getrestchannel(channelid): promise<anychannel>\n\n# parameters\n\nname        type\nchannelid   string\n\n# returns\n\npromise<anychannel>\n\n# inherited from\n\neris.client.getrestchannel\n\n# defined in\n\nnode_modules/eris/index.d.ts:2388\n\n----------------------------------------\n\n\n# getrestguild\n\n▸ getrestguild(guildid, withcounts?): promise<guild>\n\n# parameters\n\nname          type\nguildid       string\nwithcounts?   boolean\n\n# returns\n\npromise<guild>\n\n# inherited from\n\neris.client.getrestguild\n\n# defined in\n\nnode_modules/eris/index.d.ts:2389\n\n----------------------------------------\n\n\n# getrestguildchannels\n\n▸ getrestguildchannels(guildid): promise<anyguildchannel[]>\n\n# parameters\n\nname      type\nguildid   string\n\n# returns\n\npromise<anyguildchannel[]>\n\n# inherited from\n\neris.client.getrestguildchannels\n\n# defined in\n\nnode_modules/eris/index.d.ts:2390\n\n----------------------------------------\n\n\n# getrestguildemoji\n\n▸ getrestguildemoji(guildid, emojiid): promise<emoji>\n\n# parameters\n\nname      type\nguildid   string\nemojiid   string\n\n# returns\n\npromise<emoji>\n\n# inherited from\n\neris.client.getrestguildemoji\n\n# defined in\n\nnode_modules/eris/index.d.ts:2391\n\n----------------------------------------\n\n\n# getrestguildemojis\n\n▸ getrestguildemojis(guildid): promise<emoji[]>\n\n# parameters\n\nname      type\nguildid   string\n\n# returns\n\npromise<emoji[]>\n\n# inherited from\n\neris.client.getrestguildemojis\n\n# defined in\n\nnode_modules/eris/index.d.ts:2392\n\n----------------------------------------\n\n\n# getrestguildmember\n\n▸ getrestguildmember(guildid, memberid): promise<member>\n\n# parameters\n\nname       type\nguildid    string\nmemberid   string\n\n# returns\n\npromise<member>\n\n# inherited from\n\neris.client.getrestguildmember\n\n# defined in\n\nnode_modules/eris/index.d.ts:2393\n\n----------------------------------------\n\n\n# getrestguildmembers\n\n▸ getrestguildmembers(guildid, options?): promise<member[]>\n\ndeprecated\n\n# parameters\n\nname       type\nguildid    string\noptions?   getrestguildmembersoptions\n\n# returns\n\npromise<member[]>\n\n# inherited from\n\neris.client.getrestguildmembers\n\n# defined in\n\nnode_modules/eris/index.d.ts:2394\n\n▸ getrestguildmembers(guildid, limit?, after?): promise<member[]>\n\ndeprecated\n\n# parameters\n\nname      type\nguildid   string\nlimit?    number\nafter?    string\n\n# returns\n\npromise<member[]>\n\n# inherited from\n\neris.client.getrestguildmembers\n\n# defined in\n\nnode_modules/eris/index.d.ts:2396\n\n----------------------------------------\n\n\n# getrestguildroles\n\n▸ getrestguildroles(guildid): promise<role[]>\n\n# parameters\n\nname      type\nguildid   string\n\n# returns\n\npromise<role[]>\n\n# inherited from\n\neris.client.getrestguildroles\n\n# defined in\n\nnode_modules/eris/index.d.ts:2397\n\n----------------------------------------\n\n\n# getrestguildsticker\n\n▸ getrestguildsticker(guildid, stickerid): promise<sticker>\n\n# parameters\n\nname        type\nguildid     string\nstickerid   string\n\n# returns\n\npromise<sticker>\n\n# inherited from\n\neris.client.getrestguildsticker\n\n# defined in\n\nnode_modules/eris/index.d.ts:2401\n\n----------------------------------------\n\n\n# getrestguildstickers\n\n▸ getrestguildstickers(guildid): promise<sticker[]>\n\n# parameters\n\nname      type\nguildid   string\n\n# returns\n\npromise<sticker[]>\n\n# inherited from\n\neris.client.getrestguildstickers\n\n# defined in\n\nnode_modules/eris/index.d.ts:2402\n\n----------------------------------------\n\n\n# getrestguilds\n\n▸ getrestguilds(options?): promise<guild[]>\n\ndeprecated\n\n# parameters\n\nname       type\noptions?   getrestguildsoptions\n\n# returns\n\npromise<guild[]>\n\n# inherited from\n\neris.client.getrestguilds\n\n# defined in\n\nnode_modules/eris/index.d.ts:2398\n\n▸ getrestguilds(limit?, before?, after?): promise<guild[]>\n\ndeprecated\n\n# parameters\n\nname      type\nlimit?    number\nbefore?   string\nafter?    string\n\n# returns\n\npromise<guild[]>\n\n# inherited from\n\neris.client.getrestguilds\n\n# defined in\n\nnode_modules/eris/index.d.ts:2400\n\n----------------------------------------\n\n\n# getreststicker\n\n▸ getreststicker(stickerid): promise<sticker>\n\n# parameters\n\nname        type\nstickerid   string\n\n# returns\n\npromise<sticker>\n\n# inherited from\n\neris.client.getreststicker\n\n# defined in\n\nnode_modules/eris/index.d.ts:2403\n\n----------------------------------------\n\n\n# getrestuser\n\n▸ getrestuser(userid): promise<user>\n\n# parameters\n\nname     type\nuserid   string\n\n# returns\n\npromise<user>\n\n# inherited from\n\neris.client.getrestuser\n\n# defined in\n\nnode_modules/eris/index.d.ts:2404\n\n----------------------------------------\n\n\n# getself\n\n▸ getself(): promise<extendeduser>\n\n# returns\n\npromise<extendeduser>\n\n# inherited from\n\neris.client.getself\n\n# defined in\n\nnode_modules/eris/index.d.ts:2405\n\n----------------------------------------\n\n\n# getselfbilling\n\n▸ getselfbilling(): promise<{ payment_gateway?: string ; payment_source?: { brand: string ; expires_month: number ; expires_year: number ; invalid: boolean ; last_4: number ; type: string } ; premium_subscription?: { canceled_at?: string ; created_at: string ; current_period_end?: string ; current_period_start?: string ; ended_at?: string ; plan: string ; status: number } }>\n\n# returns\n\npromise<{ payment_gateway?: string ; payment_source?: { brand: string ; expires_month: number ; expires_year: number ; invalid: boolean ; last_4: number ; type: string } ; premium_subscription?: { canceled_at?: string ; created_at: string ; current_period_end?: string ; current_period_start?: string ; ended_at?: string ; plan: string ; status: number } }>\n\n# inherited from\n\neris.client.getselfbilling\n\n# defined in\n\nnode_modules/eris/index.d.ts:2406\n\n----------------------------------------\n\n\n# getselfconnections\n\n▸ getselfconnections(): promise<connection[]>\n\n# returns\n\npromise<connection[]>\n\n# inherited from\n\neris.client.getselfconnections\n\n# defined in\n\nnode_modules/eris/index.d.ts:2426\n\n----------------------------------------\n\n\n# getselfmfacodes\n\n▸ getselfmfacodes(password, regenerate?): promise<{ backup_codes: { code: string ; consumed: boolean }[] }>\n\n# parameters\n\nname          type\npassword      string\nregenerate?   boolean\n\n# returns\n\npromise<{ backup_codes: { code: string ; consumed: boolean }[] }>\n\n# inherited from\n\neris.client.getselfmfacodes\n\n# defined in\n\nnode_modules/eris/index.d.ts:2427\n\n----------------------------------------\n\n\n# getselfpayments\n\n▸ getselfpayments(): promise<{ amount: number ; amount_refunded: number ; created_at: string ; currency: string ; description: string ; status: number }[]>\n\n# returns\n\npromise<{ amount: number ; amount_refunded: number ; created_at: string ; currency: string ; description: string ; status: number }[]>\n\n# inherited from\n\neris.client.getselfpayments\n\n# defined in\n\nnode_modules/eris/index.d.ts:2431\n\n----------------------------------------\n\n\n# getselfsettings\n\n▸ getselfsettings(): promise<usersettings>\n\n# returns\n\npromise<usersettings>\n\n# inherited from\n\neris.client.getselfsettings\n\n# defined in\n\nnode_modules/eris/index.d.ts:2439\n\n----------------------------------------\n\n\n# getstageinstance\n\n▸ getstageinstance(channelid): promise<stageinstance>\n\n# parameters\n\nname        type\nchannelid   string\n\n# returns\n\npromise<stageinstance>\n\n# inherited from\n\neris.client.getstageinstance\n\n# defined in\n\nnode_modules/eris/index.d.ts:2440\n\n----------------------------------------\n\n\n# getthreadmembers\n\n▸ getthreadmembers(channelid): promise<threadmember[]>\n\n# parameters\n\nname        type\nchannelid   string\n\n# returns\n\npromise<threadmember[]>\n\n# inherited from\n\neris.client.getthreadmembers\n\n# defined in\n\nnode_modules/eris/index.d.ts:2441\n\n----------------------------------------\n\n\n# getuserprofile\n\n▸ getuserprofile(userid): promise<userprofile>\n\n# parameters\n\nname     type\nuserid   string\n\n# returns\n\npromise<userprofile>\n\n# inherited from\n\neris.client.getuserprofile\n\n# defined in\n\nnode_modules/eris/index.d.ts:2442\n\n----------------------------------------\n\n\n# getvoiceregions\n\n▸ getvoiceregions(guildid?): promise<voiceregion[]>\n\n# parameters\n\nname       type\nguildid?   string\n\n# returns\n\npromise<voiceregion[]>\n\n# inherited from\n\neris.client.getvoiceregions\n\n# defined in\n\nnode_modules/eris/index.d.ts:2443\n\n----------------------------------------\n\n\n# getwebhook\n\n▸ getwebhook(webhookid, token?): promise<webhook>\n\n# parameters\n\nname        type\nwebhookid   string\ntoken?      string\n\n# returns\n\npromise<webhook>\n\n# inherited from\n\neris.client.getwebhook\n\n# defined in\n\nnode_modules/eris/index.d.ts:2444\n\n----------------------------------------\n\n\n# getwebhookmessage\n\n▸ getwebhookmessage(webhookid, token, messageid): promise<message<guildtextablechannel>>\n\n# parameters\n\nname        type\nwebhookid   string\ntoken       string\nmessageid   string\n\n# returns\n\npromise<message<guildtextablechannel>>\n\n# inherited from\n\neris.client.getwebhookmessage\n\n# defined in\n\nnode_modules/eris/index.d.ts:2445\n\n----------------------------------------\n\n\n# jointhread\n\n▸ jointhread(channelid, userid?): promise<void>\n\n# parameters\n\nname        type\nchannelid   string\nuserid?     string\n\n# returns\n\npromise<void>\n\n# inherited from\n\neris.client.jointhread\n\n# defined in\n\nnode_modules/eris/index.d.ts:2446\n\n----------------------------------------\n\n\n# joinvoicechannel\n\n▸ joinvoicechannel(channelid, options?): promise<voiceconnection>\n\n# parameters\n\nname        type\nchannelid   string\noptions?    joinvoicechanneloptions\n\n# returns\n\npromise<voiceconnection>\n\n# inherited from\n\neris.client.joinvoicechannel\n\n# defined in\n\nnode_modules/eris/index.d.ts:2447\n\n----------------------------------------\n\n\n# kickguildmember\n\n▸ kickguildmember(guildid, userid, reason?): promise<void>\n\n# parameters\n\nname      type\nguildid   string\nuserid    string\nreason?   string\n\n# returns\n\npromise<void>\n\n# inherited from\n\neris.client.kickguildmember\n\n# defined in\n\nnode_modules/eris/index.d.ts:2448\n\n----------------------------------------\n\n\n# leaveguild\n\n▸ leaveguild(guildid): promise<void>\n\n# parameters\n\nname      type\nguildid   string\n\n# returns\n\npromise<void>\n\n# inherited from\n\neris.client.leaveguild\n\n# defined in\n\nnode_modules/eris/index.d.ts:2449\n\n----------------------------------------\n\n\n# leavethread\n\n▸ leavethread(channelid, userid?): promise<void>\n\n# parameters\n\nname        type\nchannelid   string\nuserid?     string\n\n# returns\n\npromise<void>\n\n# inherited from\n\neris.client.leavethread\n\n# defined in\n\nnode_modules/eris/index.d.ts:2450\n\n----------------------------------------\n\n\n# leavevoicechannel\n\n▸ leavevoicechannel(channelid): void\n\n# parameters\n\nname        type\nchannelid   string\n\n# returns\n\nvoid\n\n# inherited from\n\neris.client.leavevoicechannel\n\n# defined in\n\nnode_modules/eris/index.d.ts:2451\n\n----------------------------------------\n\n\n# listenercount\n\n▸ listenercount(eventname): number\n\nreturns the number of listeners listening to the event named eventname.\n\nsince v3.2.0\n\n# parameters\n\nname        type              description\neventname   string | symbol   the name of the event being listened for\n\n# returns\n\nnumber\n\n# inherited from\n\neris.client.listenercount\n\n# defined in\n\nnode_modules/@types/node/events.d.ts:589\n\n----------------------------------------\n\n\n# listeners\n\n▸ listeners(eventname): function[]\n\nreturns a copy of the array of listeners for the event named eventname.\n\nserver.on('connection', (stream) => {\n  console.log('someone connected!');\n});\nconsole.log(util.inspect(server.listeners('connection')));\n// prints: [ [function] ]\n\n\nsince v0.1.26\n\n# parameters\n\nname        type\neventname   string | symbol\n\n# returns\n\nfunction[]\n\n# inherited from\n\neris.client.listeners\n\n# defined in\n\nnode_modules/@types/node/events.d.ts:512\n\n----------------------------------------\n\n\n# off\n\n▸ off<k>(event, listener): cofoclient\n\n# type parameters\n\nname   type\nk      extends keyof clientevents\n\n# parameters\n\nname       type\nevent      k\nlistener   (...args: clientevents[k]) => void\n\n# returns\n\ncofoclient\n\n# inherited from\n\neris.client.off\n\n# defined in\n\nnode_modules/eris/index.d.ts:2452\n\n▸ off(event, listener): cofoclient\n\n# parameters\n\nname       type\nevent      string\nlistener   (...args: any[]) => void\n\n# returns\n\ncofoclient\n\n# inherited from\n\neris.client.off\n\n# defined in\n\nnode_modules/eris/index.d.ts:2453\n\n----------------------------------------\n\n\n# on\n\n▸ on<k>(event, listener): cofoclient\n\n# type parameters\n\nname   type\nk      extends keyof clientevents\n\n# parameters\n\nname       type\nevent      k\nlistener   (...args: clientevents[k]) => void\n\n# returns\n\ncofoclient\n\n# inherited from\n\neris.client.on\n\n# defined in\n\nnode_modules/eris/index.d.ts:2483\n\n▸ on(event, listener): cofoclient\n\n# parameters\n\nname       type\nevent      string\nlistener   (...args: any[]) => void\n\n# returns\n\ncofoclient\n\n# inherited from\n\neris.client.on\n\n# defined in\n\nnode_modules/eris/index.d.ts:2484\n\n----------------------------------------\n\n\n# once\n\n▸ once<k>(event, listener): cofoclient\n\n# type parameters\n\nname   type\nk      extends keyof clientevents\n\n# parameters\n\nname       type\nevent      k\nlistener   (...args: clientevents[k]) => void\n\n# returns\n\ncofoclient\n\n# inherited from\n\neris.client.once\n\n# defined in\n\nnode_modules/eris/index.d.ts:2454\n\n▸ once(event, listener): cofoclient\n\n# parameters\n\nname       type\nevent      string\nlistener   (...args: any[]) => void\n\n# returns\n\ncofoclient\n\n# inherited from\n\neris.client.once\n\n# defined in\n\nnode_modules/eris/index.d.ts:2455\n\n----------------------------------------\n\n\n# pinmessage\n\n▸ pinmessage(channelid, messageid): promise<void>\n\n# parameters\n\nname        type\nchannelid   string\nmessageid   string\n\n# returns\n\npromise<void>\n\n# inherited from\n\neris.client.pinmessage\n\n# defined in\n\nnode_modules/eris/index.d.ts:2456\n\n----------------------------------------\n\n\n# prependlistener\n\n▸ prependlistener(eventname, listener): cofoclient\n\nadds the listener function to the beginning of the listeners array for the event named eventname. no checks are made to see if the listener has already been added. multiple calls passing the same combination of eventnameand listener will result in the listener being added, and called, multiple times.\n\nserver.prependlistener('connection', (stream) => {\n  console.log('someone connected!');\n});\n\n\nreturns a reference to the eventemitter, so that calls can be chained.\n\nsince v6.0.0\n\n# parameters\n\nname        type                       description\neventname   string | symbol            the name of the event.\nlistener    (...args: any[]) => void   the callback function\n\n# returns\n\ncofoclient\n\n# inherited from\n\neris.client.prependlistener\n\n# defined in\n\nnode_modules/@types/node/events.d.ts:607\n\n----------------------------------------\n\n\n# prependoncelistener\n\n▸ prependoncelistener(eventname, listener): cofoclient\n\nadds a one-timelistener function for the event named eventname to the_beginning_ of the listeners array. the next time eventname is triggered, this listener is removed, and then invoked.\n\nserver.prependoncelistener('connection', (stream) => {\n  console.log('ah, we have our first user!');\n});\n\n\nreturns a reference to the eventemitter, so that calls can be chained.\n\nsince v6.0.0\n\n# parameters\n\nname        type                       description\neventname   string | symbol            the name of the event.\nlistener    (...args: any[]) => void   the callback function\n\n# returns\n\ncofoclient\n\n# inherited from\n\neris.client.prependoncelistener\n\n# defined in\n\nnode_modules/@types/node/events.d.ts:623\n\n----------------------------------------\n\n\n# prunemembers\n\n▸ prunemembers(guildid, options?): promise<number>\n\n# parameters\n\nname       type\nguildid    string\noptions?   prunememberoptions\n\n# returns\n\npromise<number>\n\n# inherited from\n\neris.client.prunemembers\n\n# defined in\n\nnode_modules/eris/index.d.ts:2457\n\n----------------------------------------\n\n\n# purgechannel\n\n▸ purgechannel(channelid, options): promise<number>\n\ndeprecated\n\n# parameters\n\nname        type\nchannelid   string\noptions     purgechanneloptions\n\n# returns\n\npromise<number>\n\n# inherited from\n\neris.client.purgechannel\n\n# defined in\n\nnode_modules/eris/index.d.ts:2458\n\n▸ purgechannel(channelid, limit?, filter?, before?, after?, reason?): promise<number>\n\ndeprecated\n\n# parameters\n\nname        type\nchannelid   string\nlimit?      number\nfilter?     (m: message<guildtextablechannel>) => boolean\nbefore?     string\nafter?      string\nreason?     string\n\n# returns\n\npromise<number>\n\n# inherited from\n\neris.client.purgechannel\n\n# defined in\n\nnode_modules/eris/index.d.ts:2460\n\n----------------------------------------\n\n\n# rawlisteners\n\n▸ rawlisteners(eventname): function[]\n\nreturns a copy of the array of listeners for the event named eventname, including any wrappers (such as those created by .once()).\n\nconst emitter = new eventemitter();\nemitter.once('log', () => console.log('log once'));\n\n// returns a new array with a function `oncewrapper` which has a property\n// `listener` which contains the original listener bound above\nconst listeners = emitter.rawlisteners('log');\nconst logfnwrapper = listeners[0];\n\n// logs \"log once\" to the console and does not unbind the `once` event\nlogfnwrapper.listener();\n\n// logs \"log once\" to the console and removes the listener\nlogfnwrapper();\n\nemitter.on('log', () => console.log('log persistently'));\n// will return a new array with a single function bound by `.on()` above\nconst newlisteners = emitter.rawlisteners('log');\n\n// logs \"log persistently\" twice\nnewlisteners[0]();\nemitter.emit('log');\n\n\nsince v9.4.0\n\n# parameters\n\nname        type\neventname   string | symbol\n\n# returns\n\nfunction[]\n\n# inherited from\n\neris.client.rawlisteners\n\n# defined in\n\nnode_modules/@types/node/events.d.ts:542\n\n----------------------------------------\n\n\n# removealllisteners\n\n▸ removealllisteners(event?): cofoclient\n\nremoves all listeners, or those of the specified eventname.\n\nit is bad practice to remove listeners added elsewhere in the code, particularly when the eventemitter instance was created by some other component or module (e.g. sockets or file streams).\n\nreturns a reference to the eventemitter, so that calls can be chained.\n\nsince v0.1.26\n\n# parameters\n\nname     type\nevent?   string | symbol\n\n# returns\n\ncofoclient\n\n# inherited from\n\neris.client.removealllisteners\n\n# defined in\n\nnode_modules/@types/node/events.d.ts:483\n\n----------------------------------------\n\n\n# removegrouprecipient\n\n▸ removegrouprecipient(groupid, userid): promise<void>\n\n# parameters\n\nname      type\ngroupid   string\nuserid    string\n\n# returns\n\npromise<void>\n\n# inherited from\n\neris.client.removegrouprecipient\n\n# defined in\n\nnode_modules/eris/index.d.ts:2468\n\n----------------------------------------\n\n\n# removeguildmemberrole\n\n▸ removeguildmemberrole(guildid, memberid, roleid, reason?): promise<void>\n\n# parameters\n\nname       type\nguildid    string\nmemberid   string\nroleid     string\nreason?    string\n\n# returns\n\npromise<void>\n\n# inherited from\n\neris.client.removeguildmemberrole\n\n# defined in\n\nnode_modules/eris/index.d.ts:2469\n\n----------------------------------------\n\n\n# removelistener\n\n▸ removelistener(eventname, listener): cofoclient\n\nremoves the specified listener from the listener array for the event namedeventname.\n\nconst callback = (stream) => {\n  console.log('someone connected!');\n};\nserver.on('connection', callback);\n// ...\nserver.removelistener('connection', callback);\n\n\nremovelistener() will remove, at most, one instance of a listener from the listener array. if any single listener has been added multiple times to the listener array for the specified eventname, then removelistener() must be called multiple times to remove each instance.\n\nonce an event is emitted, all listeners attached to it at the time of emitting are called in order. this implies that anyremovelistener() or removealllisteners() calls after emitting and_before_ the last listener finishes execution will not remove them fromemit() in progress. subsequent events behave as expected.\n\nconst myemitter = new myemitter();\n\nconst callbacka = () => {\n  console.log('a');\n  myemitter.removelistener('event', callbackb);\n};\n\nconst callbackb = () => {\n  console.log('b');\n};\n\nmyemitter.on('event', callbacka);\n\nmyemitter.on('event', callbackb);\n\n// callbacka removes listener callbackb but it will still be called.\n// internal listener array at time of emit [callbacka, callbackb]\nmyemitter.emit('event');\n// prints:\n//   a\n//   b\n\n// callbackb is now removed.\n// internal listener array [callbacka]\nmyemitter.emit('event');\n// prints:\n//   a\n\n\nbecause listeners are managed using an internal array, calling this will change the position indices of any listener registered after the listener being removed. this will not impact the order in which listeners are called, but it means that any copies of the listener array as returned by the emitter.listeners() method will need to be recreated.\n\nwhen a single function has been added as a handler multiple times for a single event (as in the example below), removelistener() will remove the most recently added instance. in the example the once('ping')listener is removed:\n\nconst ee = new eventemitter();\n\nfunction pong() {\n  console.log('pong');\n}\n\nee.on('ping', pong);\nee.once('ping', pong);\nee.removelistener('ping', pong);\n\nee.emit('ping');\nee.emit('ping');\n\n\nreturns a reference to the eventemitter, so that calls can be chained.\n\nsince v0.1.26\n\n# parameters\n\nname        type\neventname   string | symbol\nlistener    (...args: any[]) => void\n\n# returns\n\ncofoclient\n\n# inherited from\n\neris.client.removelistener\n\n# defined in\n\nnode_modules/@types/node/events.d.ts:467\n\n----------------------------------------\n\n\n# removemessagereaction\n\n▸ removemessagereaction(channelid, messageid, reaction, userid?): promise<void>\n\n# parameters\n\nname        type\nchannelid   string\nmessageid   string\nreaction    string\nuserid?     string\n\n# returns\n\npromise<void>\n\n# inherited from\n\neris.client.removemessagereaction\n\n# defined in\n\nnode_modules/eris/index.d.ts:2470\n\n----------------------------------------\n\n\n# removemessagereactionemoji\n\n▸ removemessagereactionemoji(channelid, messageid, reaction): promise<void>\n\n# parameters\n\nname        type\nchannelid   string\nmessageid   string\nreaction    string\n\n# returns\n\npromise<void>\n\n# inherited from\n\neris.client.removemessagereactionemoji\n\n# defined in\n\nnode_modules/eris/index.d.ts:2471\n\n----------------------------------------\n\n\n# removemessagereactions\n\n▸ removemessagereactions(channelid, messageid): promise<void>\n\n# parameters\n\nname        type\nchannelid   string\nmessageid   string\n\n# returns\n\npromise<void>\n\n# inherited from\n\neris.client.removemessagereactions\n\n# defined in\n\nnode_modules/eris/index.d.ts:2472\n\n----------------------------------------\n\n\n# removerelationship\n\n▸ removerelationship(userid): promise<void>\n\n# parameters\n\nname     type\nuserid   string\n\n# returns\n\npromise<void>\n\n# inherited from\n\neris.client.removerelationship\n\n# defined in\n\nnode_modules/eris/index.d.ts:2473\n\n----------------------------------------\n\n\n# searchchannelmessages\n\n▸ searchchannelmessages(channelid, query): promise<searchresults>\n\n# parameters\n\nname        type\nchannelid   string\nquery       searchoptions\n\n# returns\n\npromise<searchresults>\n\n# inherited from\n\neris.client.searchchannelmessages\n\n# defined in\n\nnode_modules/eris/index.d.ts:2474\n\n----------------------------------------\n\n\n# searchguildmembers\n\n▸ searchguildmembers(guildid, query, limit?): promise<member[]>\n\n# parameters\n\nname      type\nguildid   string\nquery     string\nlimit?    number\n\n# returns\n\npromise<member[]>\n\n# inherited from\n\neris.client.searchguildmembers\n\n# defined in\n\nnode_modules/eris/index.d.ts:2475\n\n----------------------------------------\n\n\n# searchguildmessages\n\n▸ searchguildmessages(guildid, query): promise<searchresults>\n\n# parameters\n\nname      type\nguildid   string\nquery     searchoptions\n\n# returns\n\npromise<searchresults>\n\n# inherited from\n\neris.client.searchguildmessages\n\n# defined in\n\nnode_modules/eris/index.d.ts:2476\n\n----------------------------------------\n\n\n# sendchanneltyping\n\n▸ sendchanneltyping(channelid): promise<void>\n\n# parameters\n\nname        type\nchannelid   string\n\n# returns\n\npromise<void>\n\n# inherited from\n\neris.client.sendchanneltyping\n\n# defined in\n\nnode_modules/eris/index.d.ts:2477\n\n----------------------------------------\n\n\n# setmaxlisteners\n\n▸ setmaxlisteners(n): cofoclient\n\nby default eventemitters will print a warning if more than 10 listeners are added for a particular event. this is a useful default that helps finding memory leaks. the emitter.setmaxlisteners() method allows the limit to be modified for this specific eventemitter instance. the value can be set toinfinity (or 0) to indicate an unlimited number of listeners.\n\nreturns a reference to the eventemitter, so that calls can be chained.\n\nsince v0.3.5\n\n# parameters\n\nname   type\nn      number\n\n# returns\n\ncofoclient\n\n# inherited from\n\neris.client.setmaxlisteners\n\n# defined in\n\nnode_modules/@types/node/events.d.ts:493\n\n----------------------------------------\n\n\n# syncguildintegration\n\n▸ syncguildintegration(guildid, integrationid): promise<void>\n\n# parameters\n\nname            type\nguildid         string\nintegrationid   string\n\n# returns\n\npromise<void>\n\n# inherited from\n\neris.client.syncguildintegration\n\n# defined in\n\nnode_modules/eris/index.d.ts:2478\n\n----------------------------------------\n\n\n# syncguildtemplate\n\n▸ syncguildtemplate(guildid, code): promise<guildtemplate>\n\n# parameters\n\nname      type\nguildid   string\ncode      string\n\n# returns\n\npromise<guildtemplate>\n\n# inherited from\n\neris.client.syncguildtemplate\n\n# defined in\n\nnode_modules/eris/index.d.ts:2479\n\n----------------------------------------\n\n\n# tostring\n\n▸ tostring(): string\n\n# returns\n\nstring\n\n# inherited from\n\neris.client.tostring\n\n# defined in\n\nnode_modules/eris/index.d.ts:2485\n\n----------------------------------------\n\n\n# unbanguildmember\n\n▸ unbanguildmember(guildid, userid, reason?): promise<void>\n\n# parameters\n\nname      type\nguildid   string\nuserid    string\nreason?   string\n\n# returns\n\npromise<void>\n\n# inherited from\n\neris.client.unbanguildmember\n\n# defined in\n\nnode_modules/eris/index.d.ts:2480\n\n----------------------------------------\n\n\n# unpinmessage\n\n▸ unpinmessage(channelid, messageid): promise<void>\n\n# parameters\n\nname        type\nchannelid   string\nmessageid   string\n\n# returns\n\npromise<void>\n\n# inherited from\n\neris.client.unpinmessage\n\n# defined in\n\nnode_modules/eris/index.d.ts:2481\n\n----------------------------------------\n\n\n# validatediscoverysearchterm\n\n▸ validatediscoverysearchterm(term): promise<{ valid: boolean }>\n\n# parameters\n\nname   type\nterm   string\n\n# returns\n\npromise<{ valid: boolean }>\n\n# inherited from\n\neris.client.validatediscoverysearchterm\n\n# defined in\n\nnode_modules/eris/index.d.ts:2482\n\n----------------------------------------\n\n\n# geteventlisteners\n\n▸ static geteventlisteners(emitter, name): function[]\n\nreturns a copy of the array of listeners for the event named eventname.\n\nfor eventemitters this behaves exactly the same as calling .listeners on the emitter.\n\nfor eventtargets this is the only way to get the event listeners for the event target. this is useful for debugging and diagnostic purposes.\n\nconst { geteventlisteners, eventemitter } = require('events');\n\n{\n  const ee = new eventemitter();\n  const listener = () => console.log('events are fun');\n  ee.on('foo', listener);\n  geteventlisteners(ee, 'foo'); // [listener]\n}\n{\n  const et = new eventtarget();\n  const listener = () => console.log('events are fun');\n  et.addeventlistener('foo', listener);\n  geteventlisteners(et, 'foo'); // [listener]\n}\n\n\nsince v15.2.0, v14.17.0\n\n# parameters\n\nname      type\nemitter   domeventtarget | eventemitter\nname      string | symbol\n\n# returns\n\nfunction[]\n\n# inherited from\n\neris.client.geteventlisteners\n\n# defined in\n\nnode_modules/@types/node/events.d.ts:270\n\n----------------------------------------\n\n\n# listenercount\n\n▸ static listenercount(emitter, eventname): number\n\na class method that returns the number of listeners for the given eventnameregistered on the given emitter.\n\nconst { eventemitter, listenercount } = require('events');\nconst myemitter = new eventemitter();\nmyemitter.on('event', () => {});\nmyemitter.on('event', () => {});\nconsole.log(listenercount(myemitter, 'event'));\n// prints: 2\n\n\nsince v0.9.12\n\ndeprecated since v3.2.0 - use listenercount instead.\n\n# parameters\n\nname        type              description\nemitter     eventemitter      the emitter to query\neventname   string | symbol   the event name\n\n# returns\n\nnumber\n\n# inherited from\n\neris.client.listenercount\n\n# defined in\n\nnode_modules/@types/node/events.d.ts:242\n\n----------------------------------------\n\n\n# on\n\n▸ static on(emitter, eventname, options?): asynciterableiterator<any>\n\nconst { on, eventemitter } = require('events');\n\n(async () => {\n  const ee = new eventemitter();\n\n  // emit later on\n  process.nexttick(() => {\n    ee.emit('foo', 'bar');\n    ee.emit('foo', 42);\n  });\n\n  for await (const event of on(ee, 'foo')) {\n    // the execution of this inner block is synchronous and it\n    // processes one event at a time (even with await). do not use\n    // if concurrent execution is required.\n    console.log(event); // prints ['bar'] [42]\n  }\n  // unreachable here\n})();\n\n\nreturns an asynciterator that iterates eventname events. it will throw if the eventemitter emits 'error'. it removes all listeners when exiting the loop. the value returned by each iteration is an array composed of the emitted event arguments.\n\nan abortsignal can be used to cancel waiting on events:\n\nconst { on, eventemitter } = require('events');\nconst ac = new abortcontroller();\n\n(async () => {\n  const ee = new eventemitter();\n\n  // emit later on\n  process.nexttick(() => {\n    ee.emit('foo', 'bar');\n    ee.emit('foo', 42);\n  });\n\n  for await (const event of on(ee, 'foo', { signal: ac.signal })) {\n    // the execution of this inner block is synchronous and it\n    // processes one event at a time (even with await). do not use\n    // if concurrent execution is required.\n    console.log(event); // prints ['bar'] [42]\n  }\n  // unreachable here\n})();\n\nprocess.nexttick(() => ac.abort());\n\n\nsince v13.6.0, v12.16.0\n\n# parameters\n\nname        type                        description\nemitter     eventemitter                -\neventname   string                      the name of the event being listened for\noptions?    staticeventemitteroptions   -\n\n# returns\n\nasynciterableiterator<any>\n\nthat iterates eventname events emitted by the emitter\n\n# inherited from\n\neris.client.on\n\n# defined in\n\nnode_modules/@types/node/events.d.ts:221\n\n----------------------------------------\n\n\n# once\n\n▸ static once(emitter, eventname, options?): promise<any[]>\n\ncreates a promise that is fulfilled when the eventemitter emits the given event or that is rejected if the eventemitter emits 'error' while waiting. the promise will resolve with an array of all the arguments emitted to the given event.\n\nthis method is intentionally generic and works with the web platform eventtarget interface, which has no special'error' event semantics and does not listen to the 'error' event.\n\nconst { once, eventemitter } = require('events');\n\nasync function run() {\n  const ee = new eventemitter();\n\n  process.nexttick(() => {\n    ee.emit('myevent', 42);\n  });\n\n  const [value] = await once(ee, 'myevent');\n  console.log(value);\n\n  const err = new error('kaboom');\n  process.nexttick(() => {\n    ee.emit('error', err);\n  });\n\n  try {\n    await once(ee, 'myevent');\n  } catch (err) {\n    console.log('error happened', err);\n  }\n}\n\nrun();\n\n\nthe special handling of the 'error' event is only used when events.once()is used to wait for another event. if events.once() is used to wait for the 'error' event itself, then it is treated as any other kind of event without special handling:\n\nconst { eventemitter, once } = require('events');\n\nconst ee = new eventemitter();\n\nonce(ee, 'error')\n  .then(([err]) => console.log('ok', err.message))\n  .catch((err) => console.log('error', err.message));\n\nee.emit('error', new error('boom'));\n\n// prints: ok boom\n\n\nan abortsignal can be used to cancel waiting for the event:\n\nconst { eventemitter, once } = require('events');\n\nconst ee = new eventemitter();\nconst ac = new abortcontroller();\n\nasync function foo(emitter, event, signal) {\n  try {\n    await once(emitter, event, { signal });\n    console.log('event emitted!');\n  } catch (error) {\n    if (error.name === 'aborterror') {\n      console.error('waiting for the event was canceled!');\n    } else {\n      console.error('there was an error', error.message);\n    }\n  }\n}\n\nfoo(ee, 'foo', ac.signal);\nac.abort(); // abort waiting for the event\nee.emit('foo'); // prints: waiting for the event was canceled!\n\n\nsince v11.13.0, v10.16.0\n\n# parameters\n\nname        type\nemitter     nodeeventtarget\neventname   string | symbol\noptions?    staticeventemitteroptions\n\n# returns\n\npromise<any[]>\n\n# inherited from\n\neris.client.once\n\n# defined in\n\nnode_modules/@types/node/events.d.ts:157\n\n▸ static once(emitter, eventname, options?): promise<any[]>\n\n# parameters\n\nname        type\nemitter     domeventtarget\neventname   string\noptions?    staticeventemitteroptions\n\n# returns\n\npromise<any[]>\n\n# inherited from\n\neris.client.once\n\n# defined in\n\nnode_modules/@types/node/events.d.ts:162\n\n----------------------------------------\n\n\n# setmaxlisteners\n\n▸ static setmaxlisteners(n?, ...eventtargets): void\n\nby default eventemitters will print a warning if more than 10 listeners are added for a particular event. this is a useful default that helps finding memory leaks. the eventemitter.setmaxlisteners() method allows the default limit to be modified (if eventtargets is empty) or modify the limit specified in every eventtarget | eventemitter passed as arguments. the value can be set toinfinity (or 0) to indicate an unlimited number of listeners.\n\neventemitter.setmaxlisteners(20);\n// equivalent to\neventemitter.defaultmaxlisteners = 20;\n\nconst eventtarget = new eventtarget();\n// only way to increase limit for `eventtarget` instances\n// as these doesn't expose its own `setmaxlisteners` method\neventemitter.setmaxlisteners(20, eventtarget);\n\n\nsince v15.3.0, v14.17.0\n\n# parameters\n\nname              type\nn?                number\n...eventtargets   (domeventtarget | eventemitter)[]\n\n# returns\n\nvoid\n\n# inherited from\n\neris.client.setmaxlisteners\n\n# defined in\n\nnode_modules/@types/node/events.d.ts:290",
      "charsets": {
        "cjk": true
      }
    },
    {
      "title": "Command",
      "frontmatter": {},
      "regularPath": "/api/classes/Command.html",
      "relativePath": "api/classes/Command.md",
      "key": "v-071e82fa",
      "path": "/api/classes/Command.html",
      "headers": [
        {
          "level": 2,
          "title": "Table of contents",
          "slug": "table-of-contents",
          "normalizedTitle": "table of contents",
          "charIndex": 59
        },
        {
          "level": 3,
          "title": "Constructors",
          "slug": "constructors",
          "normalizedTitle": "constructors",
          "charIndex": 81
        },
        {
          "level": 3,
          "title": "Properties",
          "slug": "properties",
          "normalizedTitle": "properties",
          "charIndex": 114
        },
        {
          "level": 2,
          "title": "Constructors",
          "slug": "constructors-2",
          "normalizedTitle": "constructors",
          "charIndex": 81
        },
        {
          "level": 3,
          "title": "constructor",
          "slug": "constructor",
          "normalizedTitle": "constructor",
          "charIndex": 98
        },
        {
          "level": 2,
          "title": "Properties",
          "slug": "properties-2",
          "normalizedTitle": "properties",
          "charIndex": 114
        },
        {
          "level": 3,
          "title": "aliases",
          "slug": "aliases",
          "normalizedTitle": "aliases",
          "charIndex": 129
        },
        {
          "level": 3,
          "title": "argsRequired",
          "slug": "argsrequired",
          "normalizedTitle": "argsrequired",
          "charIndex": 140
        },
        {
          "level": 3,
          "title": "botOwnerOnly",
          "slug": "botowneronly",
          "normalizedTitle": "botowneronly",
          "charIndex": 156
        },
        {
          "level": 3,
          "title": "client",
          "slug": "client",
          "normalizedTitle": "client",
          "charIndex": 172
        },
        {
          "level": 3,
          "title": "cooldown",
          "slug": "cooldown",
          "normalizedTitle": "cooldown",
          "charIndex": 182
        },
        {
          "level": 3,
          "title": "cooldownMessage",
          "slug": "cooldownmessage",
          "normalizedTitle": "cooldownmessage",
          "charIndex": 194
        },
        {
          "level": 3,
          "title": "customInteractionPreCondition",
          "slug": "custominteractionprecondition",
          "normalizedTitle": "custominteractionprecondition",
          "charIndex": 213
        },
        {
          "level": 3,
          "title": "customPrecondition",
          "slug": "customprecondition",
          "normalizedTitle": "customprecondition",
          "charIndex": 246
        },
        {
          "level": 3,
          "title": "defaultPermission",
          "slug": "defaultpermission",
          "normalizedTitle": "defaultpermission",
          "charIndex": 268
        },
        {
          "level": 3,
          "title": "deleteCommand",
          "slug": "deletecommand",
          "normalizedTitle": "deletecommand",
          "charIndex": 289
        },
        {
          "level": 3,
          "title": "description",
          "slug": "description",
          "normalizedTitle": "description",
          "charIndex": 306
        },
        {
          "level": 3,
          "title": "dmOnly",
          "slug": "dmonly",
          "normalizedTitle": "dmonly",
          "charIndex": 321
        },
        {
          "level": 3,
          "title": "guildOnly",
          "slug": "guildonly",
          "normalizedTitle": "guildonly",
          "charIndex": 331
        },
        {
          "level": 3,
          "title": "guildOwneronly",
          "slug": "guildowneronly",
          "normalizedTitle": "guildowneronly",
          "charIndex": 344
        },
        {
          "level": 3,
          "title": "name",
          "slug": "name",
          "normalizedTitle": "name",
          "charIndex": 362
        },
        {
          "level": 3,
          "title": "options",
          "slug": "options",
          "normalizedTitle": "options",
          "charIndex": 370
        },
        {
          "level": 3,
          "title": "slash",
          "slug": "slash",
          "normalizedTitle": "slash",
          "charIndex": 381
        },
        {
          "level": 3,
          "title": "usage",
          "slug": "usage",
          "normalizedTitle": "usage",
          "charIndex": 390
        }
      ],
      "headersStr": "Table of contents Constructors Properties Constructors constructor Properties aliases argsRequired botOwnerOnly client cooldown cooldownMessage customInteractionPreCondition customPrecondition defaultPermission deleteCommand description dmOnly guildOnly guildOwneronly name options slash usage",
      "content": "@cofo/framework / Exports / Command\n\n\n# Class: Command\n\n\n# Table of contents\n\n\n# Constructors\n\n * constructor\n\n\n# Properties\n\n * aliases\n * argsRequired\n * botOwnerOnly\n * client\n * cooldown\n * cooldownMessage\n * customInteractionPreCondition\n * customPrecondition\n * defaultPermission\n * deleteCommand\n * description\n * dmOnly\n * guildOnly\n * guildOwneronly\n * name\n * options\n * slash\n * usage\n\n\n# Constructors\n\n\n# constructor\n\n• new Command(client, options)\n\nCreate a new command\n\nsince 1.0.0\n\n# Parameters\n\nNAME                                     TYPE\nclient                                   CofoClient\noptions                                  Object\noptions.aliases?                         any[]\noptions.argsRequired?                    boolean\noptions.botOwnerOnly?                    boolean\noptions.cooldown?                        number\noptions.cooldownMessage?                 string\noptions.defaultPermission?               boolean\noptions.deleteCommand?                   boolean\noptions.description?                     string\noptions.dmOnly?                          boolean\noptions.guildOnly?                       boolean\noptions.guildOwnerOnly?                  boolean\noptions.name                             string\noptions.options?                         ApplicationCommandOptions[]\noptions.slash?                           boolean\noptions.usage?                           string\noptions.customInteractionPreCondition?   (interaction: CommandInteraction<TextableChannel>) =>\n                                         boolean\noptions.customPrecondition?              (message: Message<TextableChannel>) => boolean\n\n# Defined in\n\nsrc/Structures/Command.ts:29\n\n\n# Properties\n\n\n# aliases\n\n• Optional aliases: any[]\n\n# Defined in\n\nsrc/Structures/Command.ts:14\n\n----------------------------------------\n\n\n# argsRequired\n\n• Optional argsRequired: boolean\n\n# Defined in\n\nsrc/Structures/Command.ts:16\n\n----------------------------------------\n\n\n# botOwnerOnly\n\n• Optional botOwnerOnly: boolean\n\n# Defined in\n\nsrc/Structures/Command.ts:13\n\n----------------------------------------\n\n\n# client\n\n• Private client: CofoClient\n\n# Defined in\n\nsrc/Structures/Command.ts:5\n\n----------------------------------------\n\n\n# cooldown\n\n• Optional cooldown: number\n\n# Defined in\n\nsrc/Structures/Command.ts:9\n\n----------------------------------------\n\n\n# cooldownMessage\n\n• Optional cooldownMessage: string\n\n# Defined in\n\nsrc/Structures/Command.ts:17\n\n----------------------------------------\n\n\n# customInteractionPreCondition\n\n• Optional customInteractionPreCondition: (interaction: CommandInteraction<TextableChannel>) => boolean\n\n# Type declaration\n\n▸ (interaction): boolean\n\n# Parameters\n\nNAME          TYPE\ninteraction   CommandInteraction<TextableChannel>\n\n# Returns\n\nboolean\n\n# Defined in\n\nsrc/Structures/Command.ts:22\n\n----------------------------------------\n\n\n# customPrecondition\n\n• Optional customPrecondition: (message: Message<TextableChannel>) => boolean\n\n# Type declaration\n\n▸ (message): boolean\n\n# Parameters\n\nNAME      TYPE\nmessage   Message<TextableChannel>\n\n# Returns\n\nboolean\n\n# Defined in\n\nsrc/Structures/Command.ts:21\n\n----------------------------------------\n\n\n# defaultPermission\n\n• Optional defaultPermission: boolean\n\n# Defined in\n\nsrc/Structures/Command.ts:19\n\n----------------------------------------\n\n\n# deleteCommand\n\n• Optional deleteCommand: boolean\n\n# Defined in\n\nsrc/Structures/Command.ts:18\n\n----------------------------------------\n\n\n# description\n\n• description: undefined | string\n\n# Defined in\n\nsrc/Structures/Command.ts:7\n\n----------------------------------------\n\n\n# dmOnly\n\n• Optional dmOnly: boolean\n\n# Defined in\n\nsrc/Structures/Command.ts:11\n\n----------------------------------------\n\n\n# guildOnly\n\n• Optional guildOnly: boolean\n\n# Defined in\n\nsrc/Structures/Command.ts:10\n\n----------------------------------------\n\n\n# guildOwneronly\n\n• Optional guildOwneronly: boolean\n\n# Defined in\n\nsrc/Structures/Command.ts:12\n\n----------------------------------------\n\n\n# name\n\n• name: string\n\n# Defined in\n\nsrc/Structures/Command.ts:6\n\n----------------------------------------\n\n\n# options\n\n• Optional options: ApplicationCommandOptions[]\n\n# Defined in\n\nsrc/Structures/Command.ts:8\n\n----------------------------------------\n\n\n# slash\n\n• Optional slash: boolean\n\n# Defined in\n\nsrc/Structures/Command.ts:20\n\n----------------------------------------\n\n\n# usage\n\n• Optional usage: string\n\n# Defined in\n\nsrc/Structures/Command.ts:15",
      "normalizedContent": "@cofo/framework / exports / command\n\n\n# class: command\n\n\n# table of contents\n\n\n# constructors\n\n * constructor\n\n\n# properties\n\n * aliases\n * argsrequired\n * botowneronly\n * client\n * cooldown\n * cooldownmessage\n * custominteractionprecondition\n * customprecondition\n * defaultpermission\n * deletecommand\n * description\n * dmonly\n * guildonly\n * guildowneronly\n * name\n * options\n * slash\n * usage\n\n\n# constructors\n\n\n# constructor\n\n• new command(client, options)\n\ncreate a new command\n\nsince 1.0.0\n\n# parameters\n\nname                                     type\nclient                                   cofoclient\noptions                                  object\noptions.aliases?                         any[]\noptions.argsrequired?                    boolean\noptions.botowneronly?                    boolean\noptions.cooldown?                        number\noptions.cooldownmessage?                 string\noptions.defaultpermission?               boolean\noptions.deletecommand?                   boolean\noptions.description?                     string\noptions.dmonly?                          boolean\noptions.guildonly?                       boolean\noptions.guildowneronly?                  boolean\noptions.name                             string\noptions.options?                         applicationcommandoptions[]\noptions.slash?                           boolean\noptions.usage?                           string\noptions.custominteractionprecondition?   (interaction: commandinteraction<textablechannel>) =>\n                                         boolean\noptions.customprecondition?              (message: message<textablechannel>) => boolean\n\n# defined in\n\nsrc/structures/command.ts:29\n\n\n# properties\n\n\n# aliases\n\n• optional aliases: any[]\n\n# defined in\n\nsrc/structures/command.ts:14\n\n----------------------------------------\n\n\n# argsrequired\n\n• optional argsrequired: boolean\n\n# defined in\n\nsrc/structures/command.ts:16\n\n----------------------------------------\n\n\n# botowneronly\n\n• optional botowneronly: boolean\n\n# defined in\n\nsrc/structures/command.ts:13\n\n----------------------------------------\n\n\n# client\n\n• private client: cofoclient\n\n# defined in\n\nsrc/structures/command.ts:5\n\n----------------------------------------\n\n\n# cooldown\n\n• optional cooldown: number\n\n# defined in\n\nsrc/structures/command.ts:9\n\n----------------------------------------\n\n\n# cooldownmessage\n\n• optional cooldownmessage: string\n\n# defined in\n\nsrc/structures/command.ts:17\n\n----------------------------------------\n\n\n# custominteractionprecondition\n\n• optional custominteractionprecondition: (interaction: commandinteraction<textablechannel>) => boolean\n\n# type declaration\n\n▸ (interaction): boolean\n\n# parameters\n\nname          type\ninteraction   commandinteraction<textablechannel>\n\n# returns\n\nboolean\n\n# defined in\n\nsrc/structures/command.ts:22\n\n----------------------------------------\n\n\n# customprecondition\n\n• optional customprecondition: (message: message<textablechannel>) => boolean\n\n# type declaration\n\n▸ (message): boolean\n\n# parameters\n\nname      type\nmessage   message<textablechannel>\n\n# returns\n\nboolean\n\n# defined in\n\nsrc/structures/command.ts:21\n\n----------------------------------------\n\n\n# defaultpermission\n\n• optional defaultpermission: boolean\n\n# defined in\n\nsrc/structures/command.ts:19\n\n----------------------------------------\n\n\n# deletecommand\n\n• optional deletecommand: boolean\n\n# defined in\n\nsrc/structures/command.ts:18\n\n----------------------------------------\n\n\n# description\n\n• description: undefined | string\n\n# defined in\n\nsrc/structures/command.ts:7\n\n----------------------------------------\n\n\n# dmonly\n\n• optional dmonly: boolean\n\n# defined in\n\nsrc/structures/command.ts:11\n\n----------------------------------------\n\n\n# guildonly\n\n• optional guildonly: boolean\n\n# defined in\n\nsrc/structures/command.ts:10\n\n----------------------------------------\n\n\n# guildowneronly\n\n• optional guildowneronly: boolean\n\n# defined in\n\nsrc/structures/command.ts:12\n\n----------------------------------------\n\n\n# name\n\n• name: string\n\n# defined in\n\nsrc/structures/command.ts:6\n\n----------------------------------------\n\n\n# options\n\n• optional options: applicationcommandoptions[]\n\n# defined in\n\nsrc/structures/command.ts:8\n\n----------------------------------------\n\n\n# slash\n\n• optional slash: boolean\n\n# defined in\n\nsrc/structures/command.ts:20\n\n----------------------------------------\n\n\n# usage\n\n• optional usage: string\n\n# defined in\n\nsrc/structures/command.ts:15",
      "charsets": {
        "cjk": true
      }
    },
    {
      "title": "Exports",
      "frontmatter": {},
      "regularPath": "/api/",
      "relativePath": "api/index.md",
      "key": "v-0fcc2608",
      "path": "/api/",
      "headers": [
        {
          "level": 2,
          "title": "Table of contents",
          "slug": "table-of-contents",
          "normalizedTitle": "table of contents",
          "charIndex": 50
        },
        {
          "level": 3,
          "title": "Classes",
          "slug": "classes",
          "normalizedTitle": "classes",
          "charIndex": 72
        }
      ],
      "headersStr": "Table of contents Classes",
      "content": "@cofo/framework / Exports\n\n\n# @cofo/framework\n\n\n# Table of contents\n\n\n# Classes\n\n * CofoClient\n * Command\n * Embed\n * Listener",
      "normalizedContent": "@cofo/framework / exports\n\n\n# @cofo/framework\n\n\n# table of contents\n\n\n# classes\n\n * cofoclient\n * command\n * embed\n * listener",
      "charsets": {}
    },
    {
      "title": "Listener",
      "frontmatter": {},
      "regularPath": "/api/classes/Listener.html",
      "relativePath": "api/classes/Listener.md",
      "key": "v-4dce8eaa",
      "path": "/api/classes/Listener.html",
      "headers": [
        {
          "level": 2,
          "title": "Type parameters",
          "slug": "type-parameters",
          "normalizedTitle": "type parameters",
          "charIndex": 66
        },
        {
          "level": 2,
          "title": "Table of contents",
          "slug": "table-of-contents",
          "normalizedTitle": "table of contents",
          "charIndex": 135
        },
        {
          "level": 3,
          "title": "Constructors",
          "slug": "constructors",
          "normalizedTitle": "constructors",
          "charIndex": 157
        },
        {
          "level": 3,
          "title": "Properties",
          "slug": "properties",
          "normalizedTitle": "properties",
          "charIndex": 190
        },
        {
          "level": 2,
          "title": "Constructors",
          "slug": "constructors-2",
          "normalizedTitle": "constructors",
          "charIndex": 157
        },
        {
          "level": 3,
          "title": "constructor",
          "slug": "constructor",
          "normalizedTitle": "constructor",
          "charIndex": 174
        },
        {
          "level": 2,
          "title": "Properties",
          "slug": "properties-2",
          "normalizedTitle": "properties",
          "charIndex": 190
        },
        {
          "level": 3,
          "title": "key",
          "slug": "key",
          "normalizedTitle": "key",
          "charIndex": 110
        },
        {
          "level": 3,
          "title": "run",
          "slug": "run",
          "normalizedTitle": "run",
          "charIndex": 212
        }
      ],
      "headersStr": "Type parameters Table of contents Constructors Properties Constructors constructor Properties key run",
      "content": "@cofo/framework / Exports / Listener\n\n\n# Class: Listener<Key>\n\n\n# Type parameters\n\nNAME   TYPE\nKey    extends keyof EventListeners\n\n\n# Table of contents\n\n\n# Constructors\n\n * constructor\n\n\n# Properties\n\n * key\n * run\n\n\n# Constructors\n\n\n# constructor\n\n• new Listener<Key>(key, run)\n\nCreate a new Listener\n\nsince 1.0.0\n\n# Type parameters\n\nNAME   TYPE\nKey    extends keyof EventListeners\n\n# Parameters\n\nNAME   TYPE\nkey    Key\nrun    (client: CofoClient, ...args: EventListeners[Key]) => any\n\n# Defined in\n\nsrc/Structures/Listener.ts:11\n\n\n# Properties\n\n\n# key\n\n• key: Key\n\n----------------------------------------\n\n\n# run\n\n• run: (client: CofoClient, ...args: EventListeners[Key]) => any\n\n# Type declaration\n\n▸ (client, ...args): any\n\n# Parameters\n\nNAME      TYPE\nclient    CofoClient\n...args   EventListeners[Key]\n\n# Returns\n\nany",
      "normalizedContent": "@cofo/framework / exports / listener\n\n\n# class: listener<key>\n\n\n# type parameters\n\nname   type\nkey    extends keyof eventlisteners\n\n\n# table of contents\n\n\n# constructors\n\n * constructor\n\n\n# properties\n\n * key\n * run\n\n\n# constructors\n\n\n# constructor\n\n• new listener<key>(key, run)\n\ncreate a new listener\n\nsince 1.0.0\n\n# type parameters\n\nname   type\nkey    extends keyof eventlisteners\n\n# parameters\n\nname   type\nkey    key\nrun    (client: cofoclient, ...args: eventlisteners[key]) => any\n\n# defined in\n\nsrc/structures/listener.ts:11\n\n\n# properties\n\n\n# key\n\n• key: key\n\n----------------------------------------\n\n\n# run\n\n• run: (client: cofoclient, ...args: eventlisteners[key]) => any\n\n# type declaration\n\n▸ (client, ...args): any\n\n# parameters\n\nname      type\nclient    cofoclient\n...args   eventlisteners[key]\n\n# returns\n\nany",
      "charsets": {}
    },
    {
      "title": "Creating a new listener",
      "frontmatter": {},
      "regularPath": "/guide/creating-a-new-listener.html",
      "relativePath": "guide/creating-a-new-listener.md",
      "key": "v-15dde1a3",
      "path": "/guide/creating-a-new-listener.html",
      "headers": [
        {
          "level": 2,
          "title": "What is a listener?",
          "slug": "what-is-a-listener",
          "normalizedTitle": "what is a listener?",
          "charIndex": 83
        },
        {
          "level": 2,
          "title": "Creating a new listener",
          "slug": "creating-a-new-listener-2",
          "normalizedTitle": "creating a new listener",
          "charIndex": 2
        },
        {
          "level": 3,
          "title": "Code",
          "slug": "code",
          "normalizedTitle": "code",
          "charIndex": 204
        }
      ],
      "headersStr": "What is a listener? Creating a new listener Code",
      "content": "# Creating a new listener\n\n * This guide will explain how to create a listener\n\n\n# What is a listener?\n\n * Listeners are basically gateway events fired by the discord api.\n\n\n# Creating a new listener\n\n\n# Code\n\n * Let's write some code....\n\nconst { Listener } = require('@cofo/framework');\n\n// The first parameter would always be client then followed by all the eris parameters\nmodule.exports = new Listener(\"messageCreate\", async(client, message) => {\n    message.channel.createMessage({\n        content: \"Pong!\"\n    })\n})\n\n\nimport { Listener, CofoClient } from '@cofo/framework';\nimport { Message } from 'eris';\n\n// The first parameter would always be client then followed by all the eris parameters\nexport default new Listener(\"messageCreate\", async(client: CofoClient, message: Message) => {\n    message.channel.createMessage({\n        content: \"Pong\"\n    })\n})\n",
      "normalizedContent": "# creating a new listener\n\n * this guide will explain how to create a listener\n\n\n# what is a listener?\n\n * listeners are basically gateway events fired by the discord api.\n\n\n# creating a new listener\n\n\n# code\n\n * let's write some code....\n\nconst { listener } = require('@cofo/framework');\n\n// the first parameter would always be client then followed by all the eris parameters\nmodule.exports = new listener(\"messagecreate\", async(client, message) => {\n    message.channel.createmessage({\n        content: \"pong!\"\n    })\n})\n\n\nimport { listener, cofoclient } from '@cofo/framework';\nimport { message } from 'eris';\n\n// the first parameter would always be client then followed by all the eris parameters\nexport default new listener(\"messagecreate\", async(client: cofoclient, message: message) => {\n    message.channel.createmessage({\n        content: \"pong\"\n    })\n})\n",
      "charsets": {}
    },
    {
      "title": "Introduction",
      "frontmatter": {},
      "regularPath": "/guide/",
      "relativePath": "guide/index.md",
      "key": "v-5545177c",
      "path": "/guide/",
      "headers": [
        {
          "level": 2,
          "title": "History",
          "slug": "history",
          "normalizedTitle": "history",
          "charIndex": 83
        }
      ],
      "headersStr": "History",
      "content": "# Introduction\n\n * Cofo is a framework made in Typescript built on top of Eris\n\n\n# History\n\n * Time back, I used to use Discord.js as a library to create discord bots as it was really easy but my bots wouldnt always be ready for production use and it would take a lot of memory due to higher caching, So, My friend told me about Eris and i planned to switch over to eris, I found eris to be really interesting as it took less disk space and less memory as compared to Discordjs, But it had an issue, It had compartively less methods, So to make everybody's work easier i made this framework",
      "normalizedContent": "# introduction\n\n * cofo is a framework made in typescript built on top of eris\n\n\n# history\n\n * time back, i used to use discord.js as a library to create discord bots as it was really easy but my bots wouldnt always be ready for production use and it would take a lot of memory due to higher caching, so, my friend told me about eris and i planned to switch over to eris, i found eris to be really interesting as it took less disk space and less memory as compared to discordjs, but it had an issue, it had compartively less methods, so to make everybody's work easier i made this framework",
      "charsets": {}
    },
    {
      "title": "Creating a new Command",
      "frontmatter": {},
      "regularPath": "/guide/creating-a-new-command.html",
      "relativePath": "guide/creating-a-new-command.md",
      "key": "v-6aeee5a6",
      "path": "/guide/creating-a-new-command.html",
      "headers": [
        {
          "level": 2,
          "title": "File Structure",
          "slug": "file-structure",
          "normalizedTitle": "file structure",
          "charIndex": 72
        }
      ],
      "headersStr": "File Structure",
      "content": "# Creating a new Command\n\n * This guide explains creating a command\n\n\n# File Structure\n\n * Assuming your file structure to be the basic, Specified Here, Create a new file and use the following code as an example:\n\nconst { Command } = require(\"@cofo/framework\");\n\nmodule.exports = class MyCommand extends Command {\n  constructor(client) {\n    super(client, {\n      name: \"ping\", // The command name\n      description: \"pong\", // The command description\n      slash: true, // Whether this command should be registered slash or not\n      options: [], // Application Command Options same as eris\n      cooldown: 5000, // The command cooldown in MS\n      guildOnly: true, // Whether the command should be guild only.\n      dmOnly: false, // Whether the command should be dm only\n      guildOwneronly: false, // Whether the command should be guild's owner only\n      botOwnerOnly: false, // Whether the command should be bot's owner only\n      aliases: [\"pong\"], // Aliases other words which can trigger the command\n      usage: \"ping\", // The command usage, Helpful for help command\n      argsRequired: false, // Whether the command requires arguments\n      cooldownMessage: \"You are on cooldown\", // Message to send when the user is on cooldown, Default: You are on cooldown, try again later!\n      deleteCommand: true, // Whether to delete the message which triggered the command\n      defaultPermission: false, // Whether the command is enabled by default when the app is added to a guild\n      customPrecondition: (message) => true || false, // A Custom precondition, if this returns false the command won't be executed.\n      customInteractionPreCondition: (interaction) => true || false, // A Custom precondition for slash commands, if this returns false the command won't be executed.\n    });\n  }\n  /**\n   * Message Command\n   * @param {Client} client\n   * @param {Message} message\n   */\n  messageRun(client, message) {\n    message.channel.createMessage({\n      content: \"Pong!\",\n    });\n  }\n  /**\n   * Slash Command\n   * @param {Client} client\n   * @param {Interaction} interaction\n   */\n  interactionRun(client, interaction) {\n    interaction.createMessage({\n      content: \"Pong!\",\n    });\n  }\n};\n\n\nimport { Command, CofoClient } from \"@cofo/framework\";\nimport { Message, CommandInteraction } from \"eris\";\n\nexport default class MyCommand extends Command {\n  constructor(client) {\n    super(client, {\n      name: \"ping\",\n      description: \"pong!\",\n      slash: true, // Whether this command should be registered slash or not\n      options: [], // Application Command Options same as eris\n      cooldown: 5000, // The command cooldown in MS\n      guildOnly: true, // Whether the command should be guild only.\n      dmOnly: false, // Whether the command should be dm only\n      guildOwneronly: false, // Whether the command should be guild's owner only\n      botOwnerOnly: false, // Whether the command should be bot's owner only\n      aliases: [\"pong\"], // Aliases other words which can trigger the command\n      usage: \"ping\", // The command usage, Helpful for help command\n      argsRequired: false, // Whether the command requires arguments\n      cooldownMessage: \"You are on cooldown\", // Message to send when the user is on cooldown, Default: You are on cooldown, try again later!\n      deleteCommand: true, // Whether to delete the message which triggered the command\n      defaultPermission: false, // Whether the command is enabled by default when the app is added to a guild\n      customPrecondition: (message) => true || false, // A Custom precondition, if this returns false the command won't be executed.\n      customInteractionPreCondition: (interaction) => true || false, // A Custom precondition for slash commands, if this returns false the command won't be executed.\n    });\n  }\n\n  /**\n   * Message Command\n   * @param {Client} client\n   * @param {Message} message\n   */\n  messageRun(client: CofoClient, message: Message) {\n    message.channel.createMessage({\n      content: \"Pong!\",\n    });\n  }\n  /**\n   * Slash Command\n   * @param {Client} client\n   * @param {Interaction} interaction\n   */\n  interactionRun(client: CofoClient, interaction: CommandInteraction) {\n    interaction.createMessage({\n      content: \"Pong!\",\n    });\n  }\n}\n",
      "normalizedContent": "# creating a new command\n\n * this guide explains creating a command\n\n\n# file structure\n\n * assuming your file structure to be the basic, specified here, create a new file and use the following code as an example:\n\nconst { command } = require(\"@cofo/framework\");\n\nmodule.exports = class mycommand extends command {\n  constructor(client) {\n    super(client, {\n      name: \"ping\", // the command name\n      description: \"pong\", // the command description\n      slash: true, // whether this command should be registered slash or not\n      options: [], // application command options same as eris\n      cooldown: 5000, // the command cooldown in ms\n      guildonly: true, // whether the command should be guild only.\n      dmonly: false, // whether the command should be dm only\n      guildowneronly: false, // whether the command should be guild's owner only\n      botowneronly: false, // whether the command should be bot's owner only\n      aliases: [\"pong\"], // aliases other words which can trigger the command\n      usage: \"ping\", // the command usage, helpful for help command\n      argsrequired: false, // whether the command requires arguments\n      cooldownmessage: \"you are on cooldown\", // message to send when the user is on cooldown, default: you are on cooldown, try again later!\n      deletecommand: true, // whether to delete the message which triggered the command\n      defaultpermission: false, // whether the command is enabled by default when the app is added to a guild\n      customprecondition: (message) => true || false, // a custom precondition, if this returns false the command won't be executed.\n      custominteractionprecondition: (interaction) => true || false, // a custom precondition for slash commands, if this returns false the command won't be executed.\n    });\n  }\n  /**\n   * message command\n   * @param {client} client\n   * @param {message} message\n   */\n  messagerun(client, message) {\n    message.channel.createmessage({\n      content: \"pong!\",\n    });\n  }\n  /**\n   * slash command\n   * @param {client} client\n   * @param {interaction} interaction\n   */\n  interactionrun(client, interaction) {\n    interaction.createmessage({\n      content: \"pong!\",\n    });\n  }\n};\n\n\nimport { command, cofoclient } from \"@cofo/framework\";\nimport { message, commandinteraction } from \"eris\";\n\nexport default class mycommand extends command {\n  constructor(client) {\n    super(client, {\n      name: \"ping\",\n      description: \"pong!\",\n      slash: true, // whether this command should be registered slash or not\n      options: [], // application command options same as eris\n      cooldown: 5000, // the command cooldown in ms\n      guildonly: true, // whether the command should be guild only.\n      dmonly: false, // whether the command should be dm only\n      guildowneronly: false, // whether the command should be guild's owner only\n      botowneronly: false, // whether the command should be bot's owner only\n      aliases: [\"pong\"], // aliases other words which can trigger the command\n      usage: \"ping\", // the command usage, helpful for help command\n      argsrequired: false, // whether the command requires arguments\n      cooldownmessage: \"you are on cooldown\", // message to send when the user is on cooldown, default: you are on cooldown, try again later!\n      deletecommand: true, // whether to delete the message which triggered the command\n      defaultpermission: false, // whether the command is enabled by default when the app is added to a guild\n      customprecondition: (message) => true || false, // a custom precondition, if this returns false the command won't be executed.\n      custominteractionprecondition: (interaction) => true || false, // a custom precondition for slash commands, if this returns false the command won't be executed.\n    });\n  }\n\n  /**\n   * message command\n   * @param {client} client\n   * @param {message} message\n   */\n  messagerun(client: cofoclient, message: message) {\n    message.channel.createmessage({\n      content: \"pong!\",\n    });\n  }\n  /**\n   * slash command\n   * @param {client} client\n   * @param {interaction} interaction\n   */\n  interactionrun(client: cofoclient, interaction: commandinteraction) {\n    interaction.createmessage({\n      content: \"pong!\",\n    });\n  }\n}\n",
      "charsets": {
        "cjk": true
      }
    },
    {
      "title": "Creating a new project",
      "frontmatter": {},
      "regularPath": "/guide/creating-a-new-project.html",
      "relativePath": "guide/creating-a-new-project.md",
      "key": "v-5b35cf11",
      "path": "/guide/creating-a-new-project.html",
      "headers": [
        {
          "level": 2,
          "title": "Installation",
          "slug": "installation",
          "normalizedTitle": "installation",
          "charIndex": 101
        },
        {
          "level": 3,
          "title": "Typescript",
          "slug": "typescript",
          "normalizedTitle": "typescript",
          "charIndex": 303
        },
        {
          "level": 2,
          "title": "Structure",
          "slug": "structure",
          "normalizedTitle": "structure",
          "charIndex": 590
        }
      ],
      "headersStr": "Installation Typescript Structure",
      "content": "# Creating a new project\n\n * This guide will explain you how to create your first bot with cofo!\n\n\n# Installation\n\n * Cofo Framework is on the npm registry, You can install it via any package manager.\n * Create the package.json via the initalize command:\n\nnpm init -y\n\n\nyarn init -y\n\n\npnpm init -y\n\n\n\n# Typescript\n\n * For Typescript, Kindly install typescript,@types/node as devDependencies.\n\n----------------------------------------\n\n * Once installed all the required dependencies, Install @cofo/framework\n\nnpm i @cofo/framework\n\n\nyarn add @cofo/framework\n\n\npnpm add @cofo/framework\n\n\n\n# Structure\n\n * Once you've installed the framework, create the base structure as follows:\n\n.\n├── my-project\n│   ├── `src`\n│   │   ├── `Commands`\n│   │   │   ├── `General`\n│   │   │       └── PingCommand.ts\n│   │   ├── `Listeners`\n│   │   │   ├── ReadyListener.ts\n│   │   ├── index.ts\n│   ├── package.json\n\n\n * Then, Lets Start writing the code\n\n * src/index\n\nconst { CofoClient } = require(\"@cofo/framework\");\n\nconst client = new CofoClient(\n  `Bot ${process.env.TOKEN}`,\n  {\n    baseDirectory: `${process.cwd()}/src/`, // Basically the directory where the commands and listeners folder shall be located (required)\n    defaultPrefix: \"!\", // The Default Prefix to use if no custom prefix / mention prefix enabled (required)\n    mentionPrefix: true, // Whether to take mention as a prefix or not (required)\n    owners: [], // The Bot Owners, (required), This is required for botOwnerOnly commands.\n    testMode: {\n      // Whether the bot is in development mode, if enabled provide a guild id where the slash commands would be registered (not compulsory)\n      enabled: true,\n      guildID: \"928880438641041480\",\n    },\n  }, // Eris Options:\n  {\n    intents: [\"guildMembers\", \"guildMessages\", \"guilds\"],\n    restMode: true, // Recommended\n  }\n);\n\n\nimport { CofoClient } from \"@cofo/framework\";\n\nconst client = new CofoClient(\n  `Bot ${process.env.TOKEN}`,\n  {\n    baseDirectory: `${process.cwd()}/src/`, // Basically the directory where the commands and listeners folder shall be located (required)\n    defaultPrefix: \"!\", // The Default Prefix to use if no custom prefix / mention prefix enabled (required)\n    mentionPrefix: true, // Whether to take mention as a prefix or not (required)\n    owners: [], // The Bot Owners, (required), This is required for botOwnerOnly commands.\n    testMode: {\n      // Whether the bot is in development mode, if enabled provide a guild id where the slash commands would be registered (not compulsory)\n      enabled: true,\n      guildID: \"928880438641041480\",\n    },\n  }, // Eris Options:\n  {\n    intents: [\"guildMembers\", \"guildMessages\", \"guilds\"],\n    restMode: true, // Recommended\n  }\n);\n\n\n * src/commands/General/PingCommand.ts\n\nconst { Command } = require(\"@cofo/framework\");\n\nmodule.exports = class PingCommand extends Command {\n  constructor(client) {\n    super(client, {\n      name: \"mycommandname\",\n      description: \"mycommanddescription\",\n    });\n  }\n  /**\n   * Message Command\n   * @param {Client} client\n   * @param {Message} message\n   */\n  messageRun(client, message) {\n    message.channel.createMessage({\n      content: \"Pong!\",\n    });\n  }\n  /**\n   * Slash Command\n   * @param {Client} client\n   * @param {Interaction} interaction\n   */\n  interactionRun(client, interaction) {\n    interaction.createMessage({\n      content: \"Pong!\",\n    });\n  }\n};\n\n\nimport { Command, CofoClient } from \"@cofo/framework\";\nimport { Message, CommandInteraction } from \"eris\";\n\nexport default class PingCommand extends Command {\n  constructor(client) {\n    super(client, {\n      name: \"mycommandname\",\n      description: \"mycommanddescription\",\n    });\n  }\n\n  /**\n   * Message Command\n   * @param {Client} client\n   * @param {Message} message\n   */\n  messageRun(client: CofoClient, message: Message) {\n    message.channel.createMessage({\n      content: \"Pong!\",\n    });\n  }\n  /**\n   * Slash Command\n   * @param {Client} client\n   * @param {Interaction} interaction\n   */\n  interactionRun(client: CofoClient, interaction: CommandInteraction) {\n    interaction.createMessage({\n      content: \"Pong!\",\n    });\n  }\n}\n\n\n * src/listeners/ReadyListener.ts\n\nconst { Listener } = require('@cofo/framework');\n\nmodule.exports = new Listener(\"ready\", async(client) => {\n  console.log(`Client has connected`)\n})\n\n\nimport { Listener } from '@cofo/framework';\n\nexport default new Listener(\"ready\", async(client) => {\n  console.log(`Client has connected`)\n})\n",
      "normalizedContent": "# creating a new project\n\n * this guide will explain you how to create your first bot with cofo!\n\n\n# installation\n\n * cofo framework is on the npm registry, you can install it via any package manager.\n * create the package.json via the initalize command:\n\nnpm init -y\n\n\nyarn init -y\n\n\npnpm init -y\n\n\n\n# typescript\n\n * for typescript, kindly install typescript,@types/node as devdependencies.\n\n----------------------------------------\n\n * once installed all the required dependencies, install @cofo/framework\n\nnpm i @cofo/framework\n\n\nyarn add @cofo/framework\n\n\npnpm add @cofo/framework\n\n\n\n# structure\n\n * once you've installed the framework, create the base structure as follows:\n\n.\n├── my-project\n│   ├── `src`\n│   │   ├── `commands`\n│   │   │   ├── `general`\n│   │   │       └── pingcommand.ts\n│   │   ├── `listeners`\n│   │   │   ├── readylistener.ts\n│   │   ├── index.ts\n│   ├── package.json\n\n\n * then, lets start writing the code\n\n * src/index\n\nconst { cofoclient } = require(\"@cofo/framework\");\n\nconst client = new cofoclient(\n  `bot ${process.env.token}`,\n  {\n    basedirectory: `${process.cwd()}/src/`, // basically the directory where the commands and listeners folder shall be located (required)\n    defaultprefix: \"!\", // the default prefix to use if no custom prefix / mention prefix enabled (required)\n    mentionprefix: true, // whether to take mention as a prefix or not (required)\n    owners: [], // the bot owners, (required), this is required for botowneronly commands.\n    testmode: {\n      // whether the bot is in development mode, if enabled provide a guild id where the slash commands would be registered (not compulsory)\n      enabled: true,\n      guildid: \"928880438641041480\",\n    },\n  }, // eris options:\n  {\n    intents: [\"guildmembers\", \"guildmessages\", \"guilds\"],\n    restmode: true, // recommended\n  }\n);\n\n\nimport { cofoclient } from \"@cofo/framework\";\n\nconst client = new cofoclient(\n  `bot ${process.env.token}`,\n  {\n    basedirectory: `${process.cwd()}/src/`, // basically the directory where the commands and listeners folder shall be located (required)\n    defaultprefix: \"!\", // the default prefix to use if no custom prefix / mention prefix enabled (required)\n    mentionprefix: true, // whether to take mention as a prefix or not (required)\n    owners: [], // the bot owners, (required), this is required for botowneronly commands.\n    testmode: {\n      // whether the bot is in development mode, if enabled provide a guild id where the slash commands would be registered (not compulsory)\n      enabled: true,\n      guildid: \"928880438641041480\",\n    },\n  }, // eris options:\n  {\n    intents: [\"guildmembers\", \"guildmessages\", \"guilds\"],\n    restmode: true, // recommended\n  }\n);\n\n\n * src/commands/general/pingcommand.ts\n\nconst { command } = require(\"@cofo/framework\");\n\nmodule.exports = class pingcommand extends command {\n  constructor(client) {\n    super(client, {\n      name: \"mycommandname\",\n      description: \"mycommanddescription\",\n    });\n  }\n  /**\n   * message command\n   * @param {client} client\n   * @param {message} message\n   */\n  messagerun(client, message) {\n    message.channel.createmessage({\n      content: \"pong!\",\n    });\n  }\n  /**\n   * slash command\n   * @param {client} client\n   * @param {interaction} interaction\n   */\n  interactionrun(client, interaction) {\n    interaction.createmessage({\n      content: \"pong!\",\n    });\n  }\n};\n\n\nimport { command, cofoclient } from \"@cofo/framework\";\nimport { message, commandinteraction } from \"eris\";\n\nexport default class pingcommand extends command {\n  constructor(client) {\n    super(client, {\n      name: \"mycommandname\",\n      description: \"mycommanddescription\",\n    });\n  }\n\n  /**\n   * message command\n   * @param {client} client\n   * @param {message} message\n   */\n  messagerun(client: cofoclient, message: message) {\n    message.channel.createmessage({\n      content: \"pong!\",\n    });\n  }\n  /**\n   * slash command\n   * @param {client} client\n   * @param {interaction} interaction\n   */\n  interactionrun(client: cofoclient, interaction: commandinteraction) {\n    interaction.createmessage({\n      content: \"pong!\",\n    });\n  }\n}\n\n\n * src/listeners/readylistener.ts\n\nconst { listener } = require('@cofo/framework');\n\nmodule.exports = new listener(\"ready\", async(client) => {\n  console.log(`client has connected`)\n})\n\n\nimport { listener } from '@cofo/framework';\n\nexport default new listener(\"ready\", async(client) => {\n  console.log(`client has connected`)\n})\n",
      "charsets": {}
    },
    {
      "title": "Embed",
      "frontmatter": {},
      "regularPath": "/api/classes/Embed.html",
      "relativePath": "api/classes/Embed.md",
      "key": "v-69c2ab83",
      "path": "/api/classes/Embed.html",
      "headers": [
        {
          "level": 2,
          "title": "Table of contents",
          "slug": "table-of-contents",
          "normalizedTitle": "table of contents",
          "charIndex": 55
        },
        {
          "level": 3,
          "title": "Constructors",
          "slug": "constructors",
          "normalizedTitle": "constructors",
          "charIndex": 77
        },
        {
          "level": 3,
          "title": "Properties",
          "slug": "properties",
          "normalizedTitle": "properties",
          "charIndex": 110
        },
        {
          "level": 3,
          "title": "Methods",
          "slug": "methods",
          "normalizedTitle": "methods",
          "charIndex": 231
        },
        {
          "level": 2,
          "title": "Constructors",
          "slug": "constructors-2",
          "normalizedTitle": "constructors",
          "charIndex": 77
        },
        {
          "level": 3,
          "title": "constructor",
          "slug": "constructor",
          "normalizedTitle": "constructor",
          "charIndex": 94
        },
        {
          "level": 2,
          "title": "Properties",
          "slug": "properties-2",
          "normalizedTitle": "properties",
          "charIndex": 110
        },
        {
          "level": 3,
          "title": "author",
          "slug": "author",
          "normalizedTitle": "author",
          "charIndex": 125
        },
        {
          "level": 3,
          "title": "color",
          "slug": "color",
          "normalizedTitle": "color",
          "charIndex": 135
        },
        {
          "level": 3,
          "title": "description",
          "slug": "description",
          "normalizedTitle": "description",
          "charIndex": 144
        },
        {
          "level": 3,
          "title": "fields",
          "slug": "fields",
          "normalizedTitle": "fields",
          "charIndex": 159
        },
        {
          "level": 3,
          "title": "footer",
          "slug": "footer",
          "normalizedTitle": "footer",
          "charIndex": 169
        },
        {
          "level": 3,
          "title": "image",
          "slug": "image",
          "normalizedTitle": "image",
          "charIndex": 179
        },
        {
          "level": 3,
          "title": "thumbnail",
          "slug": "thumbnail",
          "normalizedTitle": "thumbnail",
          "charIndex": 188
        },
        {
          "level": 3,
          "title": "timestamp",
          "slug": "timestamp",
          "normalizedTitle": "timestamp",
          "charIndex": 201
        },
        {
          "level": 3,
          "title": "title",
          "slug": "title",
          "normalizedTitle": "title",
          "charIndex": 214
        },
        {
          "level": 3,
          "title": "url",
          "slug": "url",
          "normalizedTitle": "url",
          "charIndex": 223
        },
        {
          "level": 2,
          "title": "Methods",
          "slug": "methods-2",
          "normalizedTitle": "methods",
          "charIndex": 231
        },
        {
          "level": 3,
          "title": "addField",
          "slug": "addfield",
          "normalizedTitle": "addfield",
          "charIndex": 243
        },
        {
          "level": 3,
          "title": "addFields",
          "slug": "addfields",
          "normalizedTitle": "addfields",
          "charIndex": 255
        },
        {
          "level": 3,
          "title": "setAuthor",
          "slug": "setauthor",
          "normalizedTitle": "setauthor",
          "charIndex": 268
        },
        {
          "level": 3,
          "title": "setColor",
          "slug": "setcolor",
          "normalizedTitle": "setcolor",
          "charIndex": 281
        },
        {
          "level": 3,
          "title": "setDescription",
          "slug": "setdescription",
          "normalizedTitle": "setdescription",
          "charIndex": 293
        },
        {
          "level": 3,
          "title": "setFooter",
          "slug": "setfooter",
          "normalizedTitle": "setfooter",
          "charIndex": 311
        },
        {
          "level": 3,
          "title": "setImage",
          "slug": "setimage",
          "normalizedTitle": "setimage",
          "charIndex": 324
        },
        {
          "level": 3,
          "title": "setThumbnail",
          "slug": "setthumbnail",
          "normalizedTitle": "setthumbnail",
          "charIndex": 336
        },
        {
          "level": 3,
          "title": "setTimestamp",
          "slug": "settimestamp",
          "normalizedTitle": "settimestamp",
          "charIndex": 352
        },
        {
          "level": 3,
          "title": "setTitle",
          "slug": "settitle",
          "normalizedTitle": "settitle",
          "charIndex": 368
        },
        {
          "level": 3,
          "title": "setURL",
          "slug": "seturl",
          "normalizedTitle": "seturl",
          "charIndex": 380
        }
      ],
      "headersStr": "Table of contents Constructors Properties Methods Constructors constructor Properties author color description fields footer image thumbnail timestamp title url Methods addField addFields setAuthor setColor setDescription setFooter setImage setThumbnail setTimestamp setTitle setURL",
      "content": "@cofo/framework / Exports / Embed\n\n\n# Class: Embed\n\n\n# Table of contents\n\n\n# Constructors\n\n * constructor\n\n\n# Properties\n\n * author\n * color\n * description\n * fields\n * footer\n * image\n * thumbnail\n * timestamp\n * title\n * url\n\n\n# Methods\n\n * addField\n * addFields\n * setAuthor\n * setColor\n * setDescription\n * setFooter\n * setImage\n * setThumbnail\n * setTimestamp\n * setTitle\n * setURL\n\n\n# Constructors\n\n\n# constructor\n\n• new Embed(data?)\n\nCreate a new Embed\n\nsince 1.0.0\n\n# Parameters\n\nNAME    TYPE\ndata?   EmbedOptions\n\n# Defined in\n\nsrc/Structures/Embed.ts:24\n\n\n# Properties\n\n\n# author\n\n• Optional author: EmbedAuthorOptions\n\n# Defined in\n\nsrc/Structures/Embed.ts:17\n\n----------------------------------------\n\n\n# color\n\n• Optional color: number\n\n# Defined in\n\nsrc/Structures/Embed.ts:13\n\n----------------------------------------\n\n\n# description\n\n• Optional description: string\n\n# Defined in\n\nsrc/Structures/Embed.ts:10\n\n----------------------------------------\n\n\n# fields\n\n• fields: EmbedField[]\n\n# Defined in\n\nsrc/Structures/Embed.ts:18\n\n----------------------------------------\n\n\n# footer\n\n• Optional footer: EmbedFooterOptions\n\n# Defined in\n\nsrc/Structures/Embed.ts:14\n\n----------------------------------------\n\n\n# image\n\n• Optional image: EmbedImageOptions\n\n# Defined in\n\nsrc/Structures/Embed.ts:15\n\n----------------------------------------\n\n\n# thumbnail\n\n• Optional thumbnail: EmbedImageOptions\n\n# Defined in\n\nsrc/Structures/Embed.ts:16\n\n----------------------------------------\n\n\n# timestamp\n\n• Optional timestamp: string | Date\n\n# Defined in\n\nsrc/Structures/Embed.ts:12\n\n----------------------------------------\n\n\n# title\n\n• Optional title: string\n\n# Defined in\n\nsrc/Structures/Embed.ts:9\n\n----------------------------------------\n\n\n# url\n\n• Optional url: string\n\n# Defined in\n\nsrc/Structures/Embed.ts:11\n\n\n# Methods\n\n\n# addField\n\n▸ addField(name, value, inline?): Embed\n\nAdd a field to embed\n\n# Parameters\n\nNAME      TYPE\nname      string | any[]\nvalue     string | any[]\ninline?   boolean\n\n# Returns\n\nEmbed\n\n# Defined in\n\nsrc/Structures/Embed.ts:171\n\n----------------------------------------\n\n\n# addFields\n\n▸ addFields(fields): Embed\n\nAdd multiple fields to an embed\n\n# Parameters\n\nNAME     TYPE\nfields   EmbedField[]\n\n# Returns\n\nEmbed\n\n# Defined in\n\nsrc/Structures/Embed.ts:186\n\n----------------------------------------\n\n\n# setAuthor\n\n▸ setAuthor(name, url, iconURL): Embed\n\nSet the embed author\n\n# Parameters\n\nNAME      TYPE\nname      string | any[]\nurl       undefined | string\niconURL   undefined | string\n\n# Returns\n\nEmbed\n\n# Defined in\n\nsrc/Structures/Embed.ts:145\n\n----------------------------------------\n\n\n# setColor\n\n▸ setColor(color): Embed\n\nSet The Embed Color\n\n# Parameters\n\nNAME    TYPE\ncolor   string | number\n\n# Returns\n\nEmbed\n\n# Defined in\n\nsrc/Structures/Embed.ts:63\n\n----------------------------------------\n\n\n# setDescription\n\n▸ setDescription(description): Embed\n\nSet the Embed Description\n\n# Parameters\n\nNAME          TYPE\ndescription   string\n\n# Returns\n\nEmbed\n\n# Defined in\n\nsrc/Structures/Embed.ts:52\n\n----------------------------------------\n\n\n# setFooter\n\n▸ setFooter(iconURL, text): Embed\n\nSet The embed footer\n\n# Parameters\n\nNAME      TYPE\niconURL   undefined | string\ntext      string | any[]\n\n# Returns\n\nEmbed\n\n# Defined in\n\nsrc/Structures/Embed.ts:103\n\n----------------------------------------\n\n\n# setImage\n\n▸ setImage(imageURL): Embed\n\nSet The Embed Image\n\n# Parameters\n\nNAME       TYPE\nimageURL   string\n\n# Returns\n\nEmbed\n\n# Defined in\n\nsrc/Structures/Embed.ts:121\n\n----------------------------------------\n\n\n# setThumbnail\n\n▸ setThumbnail(url): Embed\n\nSet the embed thumbnail\n\n# Parameters\n\nNAME   TYPE\nurl    string\n\n# Returns\n\nEmbed\n\n# Defined in\n\nsrc/Structures/Embed.ts:132\n\n----------------------------------------\n\n\n# setTimestamp\n\n▸ setTimestamp(timestamp?): Embed\n\nSet The Embed Timestamp\n\n# Parameters\n\nNAME        TYPE\ntimestamp   Date\n\n# Returns\n\nEmbed\n\n# Defined in\n\nsrc/Structures/Embed.ts:92\n\n----------------------------------------\n\n\n# setTitle\n\n▸ setTitle(title): Embed\n\nSet the Embed Title\n\n# Parameters\n\nNAME    TYPE\ntitle   string\n\n# Returns\n\nEmbed\n\n# Defined in\n\nsrc/Structures/Embed.ts:41\n\n----------------------------------------\n\n\n# setURL\n\n▸ setURL(url): Embed\n\nSet The Embed URL\n\n# Parameters\n\nNAME   TYPE\nurl    string\n\n# Returns\n\nEmbed\n\n# Defined in\n\nsrc/Structures/Embed.ts:81",
      "normalizedContent": "@cofo/framework / exports / embed\n\n\n# class: embed\n\n\n# table of contents\n\n\n# constructors\n\n * constructor\n\n\n# properties\n\n * author\n * color\n * description\n * fields\n * footer\n * image\n * thumbnail\n * timestamp\n * title\n * url\n\n\n# methods\n\n * addfield\n * addfields\n * setauthor\n * setcolor\n * setdescription\n * setfooter\n * setimage\n * setthumbnail\n * settimestamp\n * settitle\n * seturl\n\n\n# constructors\n\n\n# constructor\n\n• new embed(data?)\n\ncreate a new embed\n\nsince 1.0.0\n\n# parameters\n\nname    type\ndata?   embedoptions\n\n# defined in\n\nsrc/structures/embed.ts:24\n\n\n# properties\n\n\n# author\n\n• optional author: embedauthoroptions\n\n# defined in\n\nsrc/structures/embed.ts:17\n\n----------------------------------------\n\n\n# color\n\n• optional color: number\n\n# defined in\n\nsrc/structures/embed.ts:13\n\n----------------------------------------\n\n\n# description\n\n• optional description: string\n\n# defined in\n\nsrc/structures/embed.ts:10\n\n----------------------------------------\n\n\n# fields\n\n• fields: embedfield[]\n\n# defined in\n\nsrc/structures/embed.ts:18\n\n----------------------------------------\n\n\n# footer\n\n• optional footer: embedfooteroptions\n\n# defined in\n\nsrc/structures/embed.ts:14\n\n----------------------------------------\n\n\n# image\n\n• optional image: embedimageoptions\n\n# defined in\n\nsrc/structures/embed.ts:15\n\n----------------------------------------\n\n\n# thumbnail\n\n• optional thumbnail: embedimageoptions\n\n# defined in\n\nsrc/structures/embed.ts:16\n\n----------------------------------------\n\n\n# timestamp\n\n• optional timestamp: string | date\n\n# defined in\n\nsrc/structures/embed.ts:12\n\n----------------------------------------\n\n\n# title\n\n• optional title: string\n\n# defined in\n\nsrc/structures/embed.ts:9\n\n----------------------------------------\n\n\n# url\n\n• optional url: string\n\n# defined in\n\nsrc/structures/embed.ts:11\n\n\n# methods\n\n\n# addfield\n\n▸ addfield(name, value, inline?): embed\n\nadd a field to embed\n\n# parameters\n\nname      type\nname      string | any[]\nvalue     string | any[]\ninline?   boolean\n\n# returns\n\nembed\n\n# defined in\n\nsrc/structures/embed.ts:171\n\n----------------------------------------\n\n\n# addfields\n\n▸ addfields(fields): embed\n\nadd multiple fields to an embed\n\n# parameters\n\nname     type\nfields   embedfield[]\n\n# returns\n\nembed\n\n# defined in\n\nsrc/structures/embed.ts:186\n\n----------------------------------------\n\n\n# setauthor\n\n▸ setauthor(name, url, iconurl): embed\n\nset the embed author\n\n# parameters\n\nname      type\nname      string | any[]\nurl       undefined | string\niconurl   undefined | string\n\n# returns\n\nembed\n\n# defined in\n\nsrc/structures/embed.ts:145\n\n----------------------------------------\n\n\n# setcolor\n\n▸ setcolor(color): embed\n\nset the embed color\n\n# parameters\n\nname    type\ncolor   string | number\n\n# returns\n\nembed\n\n# defined in\n\nsrc/structures/embed.ts:63\n\n----------------------------------------\n\n\n# setdescription\n\n▸ setdescription(description): embed\n\nset the embed description\n\n# parameters\n\nname          type\ndescription   string\n\n# returns\n\nembed\n\n# defined in\n\nsrc/structures/embed.ts:52\n\n----------------------------------------\n\n\n# setfooter\n\n▸ setfooter(iconurl, text): embed\n\nset the embed footer\n\n# parameters\n\nname      type\niconurl   undefined | string\ntext      string | any[]\n\n# returns\n\nembed\n\n# defined in\n\nsrc/structures/embed.ts:103\n\n----------------------------------------\n\n\n# setimage\n\n▸ setimage(imageurl): embed\n\nset the embed image\n\n# parameters\n\nname       type\nimageurl   string\n\n# returns\n\nembed\n\n# defined in\n\nsrc/structures/embed.ts:121\n\n----------------------------------------\n\n\n# setthumbnail\n\n▸ setthumbnail(url): embed\n\nset the embed thumbnail\n\n# parameters\n\nname   type\nurl    string\n\n# returns\n\nembed\n\n# defined in\n\nsrc/structures/embed.ts:132\n\n----------------------------------------\n\n\n# settimestamp\n\n▸ settimestamp(timestamp?): embed\n\nset the embed timestamp\n\n# parameters\n\nname        type\ntimestamp   date\n\n# returns\n\nembed\n\n# defined in\n\nsrc/structures/embed.ts:92\n\n----------------------------------------\n\n\n# settitle\n\n▸ settitle(title): embed\n\nset the embed title\n\n# parameters\n\nname    type\ntitle   string\n\n# returns\n\nembed\n\n# defined in\n\nsrc/structures/embed.ts:41\n\n----------------------------------------\n\n\n# seturl\n\n▸ seturl(url): embed\n\nset the embed url\n\n# parameters\n\nname   type\nurl    string\n\n# returns\n\nembed\n\n# defined in\n\nsrc/structures/embed.ts:81",
      "charsets": {
        "cjk": true
      }
    },
    {
      "title": "Home",
      "frontmatter": {
        "home": true,
        "actionText": "Getting Started",
        "actionLink": "/guide/",
        "features": [
          {
            "title": "Lightweight",
            "details": "Being a lightweight package, reducing disk-space."
          },
          {
            "title": "Full performance",
            "details": "Being lightweight and speedy, It provides all essential things a bot developer needs."
          },
          {
            "title": "TypeScript",
            "details": "Supports ECMAScript"
          }
        ]
      },
      "regularPath": "/",
      "relativePath": "index.md",
      "key": "v-e50f2e48",
      "path": "/",
      "headersStr": null,
      "content": "Cofo Framework\n\nFramework to build discord bots on top of Eris with ease.\n\n© 2022 Cofo-Framework, All Rights Reserved.",
      "normalizedContent": "cofo framework\n\nframework to build discord bots on top of eris with ease.\n\n© 2022 cofo-framework, all rights reserved.",
      "charsets": {}
    }
  ],
  "themeConfig": {
    "enableDarkMode": true,
    "repo": "https://github.com/Cofo-Bot/Framework",
    "logo": "https://cdn.apidev234.wtf/cofo-logo.png",
    "nav": [
      {
        "text": "Guide",
        "link": "/guide/"
      },
      {
        "text": "API",
        "link": "/api/"
      }
    ],
    "sidebar": [
      {
        "title": "Getting Started",
        "collapsable": false,
        "children": [
          [
            "/guide/",
            "Introduction"
          ]
        ]
      },
      {
        "title": "Guide",
        "collapsable": false,
        "children": [
          [
            "/guide/creating-a-new-project",
            "Creating a new project"
          ],
          [
            "/guide/creating-a-new-command",
            "Creating a new command"
          ],
          [
            "/guide/creating-a-new-listener",
            "Creating a new listener"
          ]
        ]
      },
      {
        "title": "API",
        "collapsable": false,
        "children": [
          [
            "/api/",
            "Exports"
          ]
        ]
      },
      {
        "title": "Classes",
        "collapsable": true,
        "children": [
          [
            "/api/classes/CofoClient",
            "CofoClient"
          ],
          [
            "/api/classes/Command",
            "Command"
          ],
          [
            "/api/classes/Embed",
            "Embed"
          ],
          [
            "/api/classes/Listener",
            "Listener"
          ]
        ]
      }
    ],
    "codeSwitcher": {
      "groups": {
        "default": {
          "ts": "TypeScript",
          "js": "JavaScript"
        },
        "plugin-usage": {
          "tuple": "Tuple",
          "object": "Object"
        }
      }
    }
  }
}